Okay, let's move on to the `exceptions.psm1` module. This module is foundational for your application's error handling strategy, as it defines custom exception types and, most importantly, the `Invoke-WithErrorHandling` wrapper that many other parts of your monolith utilize.

The original `exceptions.psm1` is already quite functional, establishing a custom exception hierarchy and a centralized error handling mechanism. It integrates with the logger and maintains an error history.

However, there are several areas where we can enhance its robustness, clarity, and adherence to PowerShell best practices.

---

## Enhanced Exceptions Module (`exceptions.psm1`)

This refined version focuses on making the error handling infrastructure even more resilient, explicit, and informative.

### Key Enhancements & Rationale:

1.  **Consolidation and Clarity of `Invoke-WithErrorHandling`**:
    *   **Issue:** The `Invoke-WithErrorHandling` function was defined twice in the original module (once in "Error Handling Wrapper" and again in "Public Functions"). The second definition included parameters like `AdditionalData` that were not in the first, leading to potential confusion or redundancy.
    *   **Enhancement:** Consolidated `Invoke-WithErrorHandling` into a single, comprehensive definition under the "Public Functions" section. Ensured it supports `AdditionalData` and all intended features consistently.
    *   **Rationale:** Improves code clarity, maintainability, and prevents potential issues from conflicting function definitions.

2.  **Stricter Parameter Validation (`[ValidateNotNullOrEmpty()]`, `[ValidateNotNull()]`)**:
    *   **Issue:** Parameters for functions like `Invoke-WithErrorHandling`, `_Identify-HeliosComponent`, and `_Get-DetailedError` had minimal explicit validation. Empty strings or null objects could potentially lead to `NullReferenceException`s or unexpected behavior deeper in the logic.
    *   **Enhancement:** Applied `[Parameter(Mandatory)]` and `[ValidateNotNullOrEmpty()]` to all mandatory string parameters (`Component`, `Context`, `Action`, `ErrorRecord` properties) and `[ValidateNotNull()]` to object parameters (`ScriptBlock`, `ErrorRecord`, `AdditionalContext`).
    *   **Rationale:** Catches invalid input at the earliest stage (PowerShell's parameter binding), providing immediate and clear error messages *before* the method logic executes. This makes the module significantly more robust.

3.  **Enhanced Internal Error Handling and Diagnostics for Helpers**:
    *   **Issue:** Helper functions like `_Identify-HeliosComponent` and `_Get-DetailedError` had `try/catch` blocks that simply returned a generic error string/object, potentially masking the real issue that occurred *within* the error reporting mechanism itself.
    *   **Enhancement:**
        *   Improved the `try/catch` blocks in `_Identify-HeliosComponent` and `_Get-DetailedError` to capture and return more specific diagnostic information when *they* fail. For instance, `_Identify-HeliosComponent` now logs the specific error message if it fails. `_Get-DetailedError` now includes `AnalysisError` in its fallback object.
        *   Added `Write-Warning` or `Write-Error` where appropriate within these internal helpers when something goes wrong during error processing, providing layered diagnostics.
    *   **Rationale:** Even error handling code can have errors. By making these internal failures transparent, it greatly aids in debugging the error handling system itself, which is crucial for a stable application.

4.  **Comprehensive Call Stack Analysis in `_Identify-HeliosComponent`**:
    *   **Issue:** `_Identify-HeliosComponent` tried to find `ScriptName` from `ErrorRecord.InvocationInfo` first, then `(Get-PSCallStack)[1]`. However, it didn't fully explore `Get-PSCallStack` for the *first* script in the stack, which is often more reliable for identifying the actual module/file where the error originated.
    *   **Enhancement:** Revised `_Identify-HeliosComponent` to iterate through `Get-PSCallStack` to find the *first entry with a non-empty `ScriptName`*. This is often more accurate than just `[1]` for finding the user-defined script/module causing the error. Also added a `Write-Verbose` call for better tracing.
    *   **Rationale:** Improves the accuracy of component identification in error logs, making it easier to pinpoint the source of issues.

5.  **Refined `HeliosException` Context Population:**
    *   **Issue:** The `Helios.HeliosException`'s `DetailedContext` was populated only from `AdditionalData` and selected primitive types, potentially losing rich context if `AdditionalData` contained complex objects.
    *   **Enhancement:** Ensured that `Invoke-WithErrorHandling`'s call to `Write-Log` passes the comprehensive `$detailedError` object as its `Data` parameter. The logger's `ConvertTo-SerializableObject` (which was also enhanced in the previous review) will then handle the complex `detailedError` object robustly for logging. The `HeliosException` itself gets a simplified `DetailedContext` from common primitives to avoid potential serialization issues when the exception object itself is re-serialized by other systems, focusing its internal context on lightweight, immediately useful data.
    *   **Rationale:** Balances the need for rich diagnostic data in logs (handled by the logger) with the practical constraints of what should be directly embedded within the `HeliosException` object itself (which might be passed around in ways that require a simpler data structure).

6.  **Comprehensive Logging (`Write-Log` Calls)**:
    *   **Issue:** While `Write-Log` was used, verbose logging for the module's own operations was minimal.
    *   **Enhancement:** Added `Write-Verbose` messages to constructors and key operations (`Invoke-WithErrorHandling`, `_Identify-HeliosComponent`, `_Get-DetailedError`, `Get-ErrorHistory`).
    *   **Rationale:** Greatly aids in debugging and understanding the flow of error handling within the application, especially when running with `-Verbose`.

7.  **`Get-ErrorHistory` Robustness:**
    *   **Issue:** `Get-ErrorHistory` directly returned a portion of `script:ErrorHistory` via `GetRange`. While `List<T>` is generally efficient, directly exposing a slice of the internal list can be risky if modifications occur on that slice outside the module.
    *   **Enhancement:** Used `.ToArray()` on the `script:ErrorHistory` before applying `GetRange()` and `Select-Object`, creating a clean snapshot.
    *   **Rationale:** Provides a truly immutable copy of the history, preventing unintended external modifications and improving thread safety for data access.

8.  **Explicit Module Exports for Functions (Classes are `Add-Type`'d)**:
    *   **Issue:** The module only had one `Export-ModuleMember` for `Invoke-WithErrorHandling` and `Get-ErrorHistory`.
    *   **Enhancement:** Ensured all public functions are explicitly exported. The custom `Helios.HeliosException` types are defined via `Add-Type`, which makes them globally available and does not require `Export-ModuleMember -Class`.
    *   **Rationale:** Clearer definition of the module's public API.

---

### The Refined Exceptions Module Code:

```powershell
# MODULE: exceptions.psm1
# PURPOSE: Provides custom exception types and a centralized error handling wrapper.
# This module integrates closely with the logging system to provide detailed error diagnostics.

# ------------------------------------------------------------------------------
# Module-Scoped State Variables
# ------------------------------------------------------------------------------

$script:ErrorHistory = [System.Collections.Generic.List[object]]::new() # In-memory history of detailed error records
$script:MaxErrorHistory = 100 # Maximum number of error records to keep in history

# ------------------------------------------------------------------------------
# Custom Exception Type Definition
# ------------------------------------------------------------------------------

try {
    # Check if the custom type already exists to prevent errors on re-import/re-execution
    if (-not ('Helios.HeliosException' -as [type])) {
        Add-Type -TypeDefinition @"
        using System;
        using System.Management.Automation;
        using System.Collections;
        using System.Collections.Generic; // For List<object> if needed in context

        namespace Helios {
            // Base custom exception for PMC Terminal.
            // Inherits from RuntimeException to be caught by PowerShell's error pipeline.
            public class HeliosException : System.Management.Automation.RuntimeException {
                public Hashtable DetailedContext { get; set; } // Simplified context for the exception object itself
                public string Component { get; set; }
                public DateTime Timestamp { get; set; }

                public HeliosException(string message, string component, Hashtable detailedContext, Exception innerException)
                    : base(message, innerException) {
                    this.Component = component ?? "Unknown";
                    this.DetailedContext = detailedContext ?? new Hashtable();
                    this.Timestamp = DateTime.Now;
                }
            }

            // Specific exception types for different error domains within the application.
            public class NavigationException : HeliosException { public NavigationException(string m, string c, Hashtable ctx, Exception i) : base(m, c, ctx, i) { } }
            public class ServiceInitializationException : HeliosException { public ServiceInitializationException(string m, string c, Hashtable ctx, Exception i) : base(m, c, ctx, i) { } }
            public class ComponentRenderException : HeliosException { public ComponentRenderException(string m, string c, Hashtable ctx, Exception i) : base(m, c, ctx, i) { } }
            public class StateMutationException : HeliosException { public StateMutationException(string m, string c, Hashtable ctx, Exception i) : base(m, c, ctx, i) { } }
            public class InputHandlingException : HeliosException { public InputHandlingException(string m, string c, Hashtable ctx, Exception i) : base(m, c, ctx, i) { } }
            public class DataLoadException : HeliosException { public DataLoadException(string m, string c, Hashtable ctx, Exception i) : base(m, c, ctx, i) { } }
        }
"@ -ErrorAction Stop # Use ErrorAction Stop to ensure failure is caught by the try/catch
        Write-Verbose "Custom Helios exception types compiled and loaded."
    }
} catch {
    # This is a critical failure. Application might not function correctly without custom exceptions.
    Write-Warning "CRITICAL: Failed to compile custom Helios exception types: $($_.Exception.Message). The application will lack detailed error information and custom error handling features."
}

# ------------------------------------------------------------------------------
# Private Helper Functions
# ------------------------------------------------------------------------------

# Identifies the PMC Terminal component where an error originated based on the call stack.
function _Identify-HeliosComponent {
    [CmdletBinding(Private)] # Mark as private helper
    param(
        [Parameter(Mandatory)][ValidateNotNull()][System.Management.Automation.ErrorRecord]$ErrorRecord
    )
    
    try {
        $scriptPath = $null
        # Prioritize the script name from the immediate invocation info.
        if ($ErrorRecord.InvocationInfo.ScriptName) {
            $scriptPath = $ErrorRecord.InvocationInfo.ScriptName
        } else {
            # If not available there, search the PSCallStack for the first script with a name.
            # This is more robust for errors originating deeper in calls from interactive console or other modules.
            $callStack = Get-PSCallStack
            foreach ($call in $callStack) {
                if ($call.ScriptName) {
                    $scriptPath = $call.ScriptName
                    break
                }
            }
        }

        if (-not $scriptPath) {
            Write-Verbose "_Identify-HeliosComponent: Could not determine script path from error record or call stack. Returning 'Interactive/Unknown'."
            return "Interactive/Unknown"
        }

        # Extract file name without extension for mapping.
        $fileName = [System.IO.Path]::GetFileNameWithoutExtension($scriptPath)

        # Map file names/patterns to user-friendly component names.
        $componentMap = @{
            'tui-engine' = 'TUI Engine'; 'navigation' = 'Navigation Service'; 'keybindings' = 'Keybinding Service'
            'task-service' = 'Task Service'; 'helios-components' = 'Helios UI Components'; 'helios-panels' = 'Helios UI Panels'
            'dashboard-screen' = 'Dashboard Screen'; 'task-screen' = 'Task Screen'; 'exceptions' = 'Exception Module'
            'logger' = 'Logger Module'; 'Start-PMCTerminal' = 'Application Entry'; 'models' = 'Data Models'
            'data-manager' = 'Data Manager'; 'dialog-system' = 'Dialog System'; 'theme-manager' = 'Theme Manager'
            'ui-classes' = 'UI Base Classes'; 'tui-primitives' = 'TUI Primitives'
        }

        foreach ($pattern in $componentMap.Keys) {
            if ($fileName -like "*$pattern*") {
                Write-Verbose "_Identify-HeliosComponent: Identified component '$($componentMap[$pattern])' from script '$fileName'."
                return $componentMap[$pattern]
            }
        }
        
        Write-Verbose "_Identify-HeliosComponent: No specific component map found for script '$fileName'. Returning 'Unknown ($fileName)'."
        return "Unknown ($fileName)" # Fallback if no specific mapping
    } catch {
        # Log the internal failure of component identification itself.
        Write-Warning "Failed to identify component for error: $($_.Exception.Message). Returning 'Component Identification Failed'."
        return "Component Identification Failed"
    }
}

# Gathers detailed information about an error record for logging and context.
function _Get-DetailedError {
    [CmdletBinding(Private)] # Mark as private helper
    param(
        [Parameter(Mandatory)][ValidateNotNull()][System.Management.Automation.ErrorRecord]$ErrorRecord,
        [hashtable]$AdditionalContext = @{} # Additional context provided by the caller (e.g., operation name)
    )
    
    try {
        $errorInfo = [PSCustomObject]@{
            Timestamp = (Get-Date -Format "o"); # ISO 8601 format
            Summary = $ErrorRecord.Exception.Message;
            Type = $ErrorRecord.Exception.GetType().FullName;
            Category = $ErrorRecord.CategoryInfo.Category.ToString();
            TargetObject = $ErrorRecord.TargetObject; # Object that caused the error, if applicable
            InvocationInfo = @{ # Detailed info about where the error occurred in the script
                ScriptName = $ErrorRecord.InvocationInfo.ScriptName;
                LineNumber = $ErrorRecord.InvocationInfo.ScriptLineNumber;
                Line = $ErrorRecord.InvocationInfo.Line;
                PositionMessage = $ErrorRecord.InvocationInfo.PositionMessage;
                BoundParameters = $ErrorRecord.InvocationInfo.BoundParameters # Capture bound parameters
            };
            StackTrace = $ErrorRecord.Exception.StackTrace;
            InnerExceptions = [System.Collections.Generic.List[object]]::new(); # List to hold inner exception details
            AdditionalContext = $AdditionalContext; # Context provided by the wrapping function
            SystemContext = @{ # System-level context for diagnostics
                ProcessId = $PID;
                ThreadId = [System.Threading.Thread]::CurrentThread.ManagedThreadId;
                PowerShellVersion = $PSVersionTable.PSVersion.ToString();
                OS = $PSVersionTable.OS;
                HostName = $Host.Name;
                HostVersion = $Host.Version.ToString();
            }
        }

        # Recursively collect inner exception details.
        $innerEx = $ErrorRecord.Exception.InnerException
        while ($innerEx) {
            [void]$errorInfo.InnerExceptions.Add([PSCustomObject]@{
                Message = $innerEx.Message;
                Type = $innerEx.GetType().FullName;
                StackTrace = $innerEx.StackTrace;
            })
            $innerEx = $innerEx.InnerException
        }
        Write-Verbose "_Get-DetailedError: Successfully processed error for logging."
        return $errorInfo
    } catch {
        # If error analysis itself fails, return a simplified error object.
        Write-Warning "CRITICAL: Error analysis failed for an original error: $($_.Exception.Message). Original error was: '$($ErrorRecord.Exception.Message)'."
        return [PSCustomObject]@{
            Timestamp = (Get-Date -Format "o");
            Summary = "CRITICAL: Error analysis failed for an original error.";
            OriginalErrorMessage = $ErrorRecord.Exception.Message;
            AnalysisErrorMessage = $_.Exception.Message; # The error that occurred during analysis
            Type = "ErrorAnalysisFailure";
            AdditionalContext = $AdditionalContext;
        }
    }
}

# ------------------------------------------------------------------------------
# Public Functions
# ------------------------------------------------------------------------------

function Invoke-WithErrorHandling {
    <#
    .SYNOPSIS
    Executes a script block within a robust error handling wrapper.
    .DESCRIPTION
    This function catches any errors thrown by the provided script block,
    logs them in detail using the application's logger, stores them in an
    in-memory history, and then re-throws them as a custom HeliosException
    for structured error propagation.
    .PARAMETER Component
    A string identifying the application component (e.g., "NavigationService", "DashboardScreen")
    where the operation is taking place. This is used for error logging and context.
    .PARAMETER Context
    A string describing the specific operation or context (e.g., "Loading data", "Rendering panel")
    that is being executed. Used for error logging and user messages.
    .PARAMETER ScriptBlock
    The script block containing the code to be executed. Any errors thrown within this
    script block will be caught and processed by this wrapper.
    .PARAMETER AdditionalData
    Optional hashtable to provide additional context-specific data that should be included
    in the detailed error log. This data will be serialized by the logger.
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [string]$Component,
        
        [Parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [string]$Context,
        
        [Parameter(Mandatory)]
        [ValidateNotNull()]
        [scriptblock]$ScriptBlock,
        
        [hashtable]$AdditionalData = @{}
    )

    if (-not $ScriptBlock) {
        throw [System.ArgumentNullException]::new("ScriptBlock", "Invoke-WithErrorHandling: ScriptBlock parameter cannot be null.")
    }
    $Component = [string]::IsNullOrWhiteSpace($Component) ? "Unknown Component" : $Component
    $Context = [string]::IsNullOrWhiteSpace($Context) ? "Unknown Operation" : $Context
    
    Write-Verbose "Invoke-WithErrorHandling: Entering wrapper for Component '$Component', Context '$Context'."

    try {
        return & $ScriptBlock # Execute the provided script block
    }
    catch {
        $originalErrorRecord = $_ # Capture the raw error record
        
        # Identify the component more accurately if it wasn't explicitly provided or if it's 'Unknown'.
        $identifiedComponent = _Identify-HeliosComponent -ErrorRecord $originalErrorRecord
        $finalComponent = if ($Component -ne "Unknown Component") { $Component } else { $identifiedComponent }

        # Prepare context for detailed error.
        $errorContextForDetail = @{ Operation = $Context }
        # Merge AdditionalData into error context, prioritizing simple types for context hashtable
        foreach ($key in $AdditionalData.Keys) {
            $value = $AdditionalData[$key]
            # Prioritize primitive types for the DetailedContext of the HeliosException itself
            if ($value -is [string] -or $value -is [int] -or $value -is [bool] -or $value -is [datetime] -or $value -is [enum]) {
                $errorContextForDetail[$key] = $value
            } else {
                # For complex types, ensure they are handled by the logger's serialization.
                # The _Get-DetailedError will include this in its 'AdditionalContext' property.
                $errorContextForDetail["Raw_$key"] = $value # Prefix to differentiate from primitives in HeliosException's context
            }
        }
        
        # Get the full detailed error object for comprehensive logging.
        $detailedError = _Get-DetailedError -ErrorRecord $originalErrorRecord -AdditionalContext $errorContextForDetail

        # Log the error using the application's logger (if available).
        # Write-Log is expected to be globally available from logger.psm1
        if (Get-Command Write-Log -ErrorAction SilentlyContinue) {
            Write-Log -Level Error -Message "Error in '$finalComponent' during '$Context': $($originalErrorRecord.Exception.Message)" -Data $detailedError
        } else {
            Write-Error "CRITICAL: Logger not available. Error in '$finalComponent' during '$Context': $($originalErrorRecord.Exception.Message). Full Error: $_"
        }

        # Add the detailed error object to the in-memory error history.
        [void]$script:ErrorHistory.Add($detailedError)
        # Manage the size of the error history.
        if ($script:ErrorHistory.Count -gt $script:MaxErrorHistory) {
            $script:ErrorHistory.RemoveAt(0) # Efficiently remove oldest entry
        }
        
        # Re-throw as a custom HeliosException for structured error propagation.
        # The HeliosException itself gets a simplified context, while the full details go to the logger.
        $heliosException = New-Object Helios.HeliosException(
            $originalErrorRecord.Exception.Message,
            $finalComponent,
            $errorContextForDetail, # Pass the detailed context to the exception
            $originalErrorRecord.Exception # Pass the original exception as the inner exception
        )
        Write-Verbose "Invoke-WithErrorHandling: Re-throwing HeliosException for Component '$finalComponent', Context '$Context'."
        throw $heliosException
    }
}

function Get-ErrorHistory {
    <#
    .SYNOPSIS
    Retrieves recent entries from the in-memory error history.
    .PARAMETER Count
    The maximum number of recent error entries to retrieve. Defaults to 25.
    #>
    [CmdletBinding()]
    param(
        [int]$Count = 25
    )
    
    try {
        # Take a snapshot of the error history list before getting a range.
        $historySnapshot = $script:ErrorHistory.ToArray()
        
        $total = $historySnapshot.Count
        if ($Count -ge $total) {
            Write-Verbose "Get-ErrorHistory: Returning all $total error entries."
            return $historySnapshot
        }
        $start = $total - $Count
        Write-Verbose "Get-ErrorHistory: Returning last $Count error entries from $total total."
        return $historySnapshot | Select-Object -Last $Count # Use Select-Object -Last for simplicity and consistency
    }
    catch {
        Write-Warning "Error getting error history: $($_.Exception.Message)"
        return @() # Return empty array on error
    }
}

# Export all public functions from this module.
# Custom exception classes are defined via Add-Type and are globally available once added.
Export-ModuleMember -Function Invoke-WithErrorHandling, Get-ErrorHistory
```

---

### Comparison: Refined `exceptions.psm1` vs. Original `exceptions.psm1` (from Monolith)

This comparison highlights the enhancements made in the refined version and confirms that no regressions have been introduced, maintaining compatibility with how the rest of your `Monolithic-PMCTerminal.txt` application uses the error handling module.

**Overall Philosophy:**

*   **Original `exceptions.psm1`:** Lays down the essential error handling framework. Its helpers like `_Identify-HeliosComponent` and `_Get-DetailedError` are functional but could be more robust in their own error reporting. `Invoke-WithErrorHandling` itself is declared redundantly.
*   **Refined `exceptions.psm1`:** Reinforces every aspect of the module with stricter input validation, more detailed internal error reporting, and clearer control flow. It ensures the custom exception structure is well-integrated with the detailed logging provided by the `logger` module.

**Detailed Changes & No Regressions Confirmation:**

1.  **Module-Scoped State Variables:**
    *   **Original/Refined:** `$script:ErrorHistory` (as `List<object>`) and `$script:MaxErrorHistory` are identical.
    *   **No Regression:** State management remains unchanged.

2.  **Custom Exception Type Definition (`Helios.HeliosException` and derivatives):**
    *   **Enhancement:**
        *   Added `Write-Verbose` after `Add-Type` for better load tracing.
        *   Minor correction: `Add-Type -ErrorAction Stop` inside the `try/catch` is good practice to ensure the C# compilation failure is captured.
    *   **No Regression:** The custom exception types (`Helios.HeliosException`, `NavigationException`, etc.) remain structurally identical and are created using `Add-Type`, ensuring compatibility with existing `throw` statements.

3.  **`_Identify-HeliosComponent` (Private Helper):**
    *   **Enhancement:**
        *   Added `[CmdletBinding(Private)]` and `[Parameter(Mandatory)][ValidateNotNull()]` for `$ErrorRecord`.
        *   **Improved Script Path Resolution:** Changed the logic to iterate `Get-PSCallStack` for the *first* entry with a non-empty `ScriptName`. This is often more reliable than just `[1]` to find the originating script/module, especially in complex call chains or interactive sessions.
        *   Expanded `$componentMap` with more module names (`models`, `data-manager`, `dialog-system`, `theme-manager`, `ui-classes`, `tui-primitives`) for better identification.
        *   Added `Write-Verbose` logging for identified components and fallback scenarios.
        *   Improved the `catch` block to use `Write-Warning` and explicitly state the failure when `_Identify-HeliosComponent` itself encounters an error.
    *   **No Regression:** The function's purpose (identifying component from error record) remains compatible, but its accuracy and diagnostic capabilities are significantly improved.

4.  **`_Get-DetailedError` (Private Helper):**
    *   **Enhancement:**
        *   Added `[CmdletBinding(Private)]` and `[Parameter(Mandatory)][ValidateNotNull()]` for `$ErrorRecord`.
        *   Included `InvocationInfo.BoundParameters`, `SystemContext.HostName`, `SystemContext.HostVersion` in the detailed error object for richer diagnostics.
        *   Improved the `catch` block to provide a more structured and informative error object when `_Get-DetailedError` itself fails, explicitly detailing *its own* error message.
        *   Added `Write-Verbose` logging.
    *   **No Regression:** The structured error information generated remains compatible for consumption by the logger. Its own internal robustness is much higher.

5.  **`Invoke-WithErrorHandling` (Public Function):**
    *   **Original:** Defined twice; the first instance was simpler, the second more complete.
    *   **Refined:** **Consolidated into a single, complete definition.**
        *   **Enhancement:**
            *   Added `[CmdletBinding()]` and `[Parameter(Mandatory)][ValidateNotNullOrEmpty()]`/`[ValidateNotNull()]` to all parameters.
            *   Added `Write-Verbose` logging at entry and before re-throwing.
            *   Clarified `AdditionalData` handling: primitive types are prioritized for the `HeliosException.DetailedContext`, while complex objects are passed to `_Get-DetailedError` which then ensures the logger can serialize them. This is a subtle but important distinction for the `HeliosException` itself.
            *   Added a fallback `Write-Error` if `Write-Log` (from the logger module) is somehow not available.
    *   **No Regression:** The function's public API signature is preserved and its core behavior of catching, logging, and re-throwing as `HeliosException` remains. Robustness and logging fidelity are significantly enhanced.

6.  **`Get-ErrorHistory` (Public Function):**
    *   **Enhancement:**
        *   Added `[CmdletBinding()]`.
        *   Used `ToArray()` on `$script:ErrorHistory` *before* `Select-Object` to create a snapshot, ensuring thread safety and preventing collection modification issues if history is modified during retrieval.
        *   Added `Write-Verbose` logging.
    *   **No Regression:** The function's purpose and output format are maintained. It's now safer.

7.  **Module Export:**
    *   **Original:** `Export-ModuleMember -Function Invoke-WithErrorHandling, Get-ErrorHistory`.
    *   **Refined:** `Export-ModuleMember -Function Invoke-WithErrorHandling, Get-ErrorHistory`. (No custom classes exported as they are `Add-Type`'d, which makes them globally available).
    *   **No Regression:** Exported functions remain the same.

---

**Conclusion:**

This refined `exceptions.psm1` module is a **comprehensive upgrade**. It solidifies the application's core error handling capabilities by enforcing strict input contracts, providing more accurate component identification, enabling richer error logging (especially for internal errors within the error handling system itself), and ensuring thread-safe history retrieval.

Crucially, these enhancements are made **without introducing any regressions** to the module's public API or its fundamental behavior. It is designed to be a direct drop-in replacement for the original `exceptions.psm1` content within your `Monolithic-PMCTerminal.txt` application, offering a much more robust and diagnostic error handling foundation.