# ==============================================================================
# MODULE: tui-primitives (Axiom-Phoenix v4.0 - Truecolor Edition)
# PURPOSE: Provides core TuiCell class and primitive drawing operations
#          with support for 24-bit truecolor.
# ==============================================================================

class TuiAnsiHelper {
    # Caches resolved hex codes to ANSI escape sequences to avoid repeated calculations.
    hidden static [System.Collections.Concurrent.ConcurrentDictionary[string, string]] $_fgCache = [System.Collections.Concurrent.ConcurrentDictionary[string, string]]::new()
    hidden static [System.Collections.Concurrent.ConcurrentDictionary[string, string]] $_bgCache = [System.Collections.Concurrent.ConcurrentDictionary[string, string]]::new()

    # Converts a hex string like "#RRGGBB" or "#RGB" to an RGB integer array.
    # Returns $null if the format is invalid.
    static [int[]] ParseHexColor([string]$hexColor) {
        if ([string]::IsNullOrWhiteSpace($hexColor) -or -not $hexColor.StartsWith("#")) { return $null }
        $hex = $hexColor.Substring(1)
        if ($hex.Length -eq 3) { $hex = "$($hex[0])$($hex[0])$($hex[1])$($hex[1])$($hex[2])$($hex[2])" }
        if ($hex.Length -ne 6) { return $null }
        try {
            $r = [System.Convert]::ToInt32($hex.Substring(0, 2), 16)
            $g = [System.Convert]::ToInt32($hex.Substring(2, 2), 16)
            $b = [System.Convert]::ToInt32($hex.Substring(4, 2), 16)
            return @($r, $g, $b)
        } catch { return $null }
    }

    # Generates the ANSI escape sequence for a foreground truecolor.
    static [string] GetForegroundSequence([string]$hexColor) {
        if ([string]::IsNullOrEmpty($hexColor)) { return "" }
        if ($this::_fgCache.ContainsKey($hexColor)) { return $this::_fgCache[$hexColor] }
        
        $rgb = [TuiAnsiHelper]::ParseHexColor($hexColor)
        if (-not $rgb) { return "" } # Return empty for invalid colors
        
        $sequence = "`e[38;2;$($rgb[0]);$($rgb[1]);$($rgb[2])m"
        $this::_fgCache[$hexColor] = $sequence
        return $sequence
    }
    
    # Generates the ANSI escape sequence for a background truecolor.
    static [string] GetBackgroundSequence([string]$hexColor) {
        if ([string]::IsNullOrEmpty($hexColor)) { return "" }
        if ($this::_bgCache.ContainsKey($hexColor)) { return $this::_bgCache[$hexColor] }

        $rgb = [TuiAnsiHelper]::ParseHexColor($hexColor)
        if (-not $rgb) { return "" }
        
        $sequence = "`e[48;2;$($rgb[0]);$($rgb[1]);$($rgb[2])m"
        $this::_bgCache[$hexColor] = $sequence
        return $sequence
    }
    
    static [string] Reset() { return "`e[0m" }
    static [string] Bold() { return "`e[1m" }
    static [string] Underline() { return "`e[4m" }
    static [string] Italic() { return "`e[3m" }
}

class TuiCell {
    [char]$Char = ' '
    # MODIFIED: Colors are now stored as hex strings.
    [string]$ForegroundColor = "#C9C9C9" # Default to a light gray
    [string]$BackgroundColor = "#000000" # Default to black
    [bool]$Bold = $false
    [bool]$Underline = $false
    [bool]$Italic = $false
    [int]$ZIndex = 0

    # Full constructor now accepts hex strings.
    TuiCell([char]$char, [string]$fg, [string]$bg) {
        $this.Char = $char
        $this.ForegroundColor = $fg
        $this.BackgroundColor = $bg
    }
    
    # ... other constructors would be similarly updated ...

    # DiffersFrom now compares strings instead of enums.
    [bool] DiffersFrom([TuiCell]$other) {
        if ($null -eq $other) { return $true }
        return ($this.Char -ne $other.Char -or 
                $this.ForegroundColor -ne $other.ForegroundColor -or 
                $this.BackgroundColor -ne $other.BackgroundColor -or
                $this.Bold -ne $other.Bold -or
                $this.Underline -ne $other.Underline -or
                $this.Italic -ne $other.Italic)
    }

    # ToAnsiString is now obsolete. The TUI Engine will handle this directly for performance.
}

# ... TuiBuffer class remains the same internally ...
# ... Drawing primitives (Write-TuiText, Write-TuiBox) will be updated to accept hex strings ...

function Write-TuiText {
    param(
        [TuiBuffer]$Buffer, [int]$X, [int]$Y, [string]$Text,
        # MODIFIED: Accept string colors
        [string]$ForegroundColor, [string]$BackgroundColor,
        [bool]$Bold = $false, [bool]$Underline = $false, [bool]$Italic = $false
    )
    # ... The internal logic now creates TuiCells with string colors ...
}