Okay, let's refine the `tui-primitives.psm1` module with the goal of making it more robust, user-friendly, and aligned with PowerShell best practices, similar to the event system upgrade.

### Summary of Enhancements & Rationale:

1.  **Cmdlet Binding (`[CmdletBinding()]`)**:
    *   **Issue:** The standalone functions `Write-TuiText`, `Write-TuiBox`, and `Get-TuiBorderChars` lacked `[CmdletBinding()]`.
    *   **Enhancement:** Added `[CmdletBinding()]` to all public functions.
    *   **Rationale:** This enables standard PowerShell features like `-Verbose`, `-Debug`, `-ErrorAction`, etc., making the functions behave more like native cmdlets and improving debuggability and control for users.

2.  **Robust Parameter Validation (`[ValidateNotNull()]`, `[ValidateNotNullOrEmpty()]`, `[ValidateRange()]`, `[ValidateSet()]`)**:
    *   **Issue:** Parameters for functions and constructors (e.g., `Buffer`, `Text`, dimensions like `Width`, `Height`) could potentially receive `null` or invalid values (e.g., zero or negative dimensions) without immediate feedback.
    *   **Enhancement:**
        *   Added `[ValidateNotNull()]` for object parameters (like `[TuiBuffer]$Buffer`, `[TuiCell]$fillCell`).
        *   Added `[ValidateNotNullOrEmpty()]` for string parameters (like `[string]$Text`).
        *   Added `[ValidateRange(1, [int]::MaxValue)]` for numeric dimension parameters (`$width`, `$height`, `$Width`, `$Height`), ensuring they are always positive.
        *   Used `[ValidateSet("Single", "Double", "Rounded", "Thick")]` for `$BorderStyle` to guide user input.
    *   **Rationale:** Improves data integrity at the input stage, preventing invalid arguments from causing unexpected behavior or runtime errors deeper in the logic. PowerShell's parameter binding will throw a clearer error *before* the function even executes if validation fails.

3.  **Enhanced Error Handling & Logging (`try/catch`, `Write-Error`, `Write-Warning`, `Write-Verbose`)**:
    *   **Issue:** While some basic `if ($null)` checks were present, a more comprehensive `try/catch` block for critical operations was missing, and logging used standard `Write-Host` or `Write-Warning` inconsistently.
    *   **Enhancement:**
        *   Wrapped the core logic of public functions in `try/catch` blocks.
        *   Used `Write-Error` with `$_ Exception.Message` for critical failures, ensuring the root cause is clearer. `throw` is re-added after `Write-Error` to allow calling scripts to catch the error.
        *   Used `Write-Warning` for non-fatal but noteworthy issues (e.g., writing text out of bounds).
        *   Added `Write-Verbose` for successful operations and common flows, aiding in debugging when `-Verbose` is used.
    *   **Rationale:** Provides more informative and structured error messages, better control over error handling for the calling environment, and improved insight into the module's execution flow.

4.  **Refined Class Constructors and Methods**:
    *   **`TuiCell`**: Added more descriptive comments. Ensured `TuiCell([TuiCell]$other)` explicitly creates a new instance to prevent unintended shared references when copying. Added `ToString()` for better debug representation.
    *   **`TuiBuffer`**: Added verbose logging to its constructor and `Resize` method. Improved the `SetCell` warning for out-of-bounds attempts. Clarified comments for `Clear()` methods. Added `ToString()` for better debug representation.
    *   **`TuiAnsiHelper`**: Minor addition of default return values for `GetForegroundCode` and `GetBackgroundCode` in case `ConsoleColor.ToString()` ever returns something unexpected (highly unlikely, but good defensive practice).

5.  **Improved `Write-TuiBox` Logic**:
    *   **Issue:** The original `Write-TuiBox` drew borders and then filled, which could be less efficient and potentially lead to drawing artifacts if not handled carefully with ANSI. The logic for title placement was also simple.
    *   **Enhancement:**
        *   Revised the order: the internal area is now *filled first*, then the *borders are drawn on top*. This is a more robust approach for character-based drawing.
        *   Added bounds checking for the box's *effective drawing area* within the buffer, preventing warnings/errors for boxes entirely off-screen or partial draws for partially off-screen boxes (though `SetCell` still handles per-character clipping).
        *   Explicitly used `Write-TuiText` for drawing the title on the border, which implicitly uses its own bounds checking.
    *   **Rationale:** More robust and efficient drawing, preventing potential visual glitches and improving performance for off-screen elements.

6.  **Explicit `Export-ModuleMember` for Classes**:
    *   **Issue:** The original module only exported functions. While PowerShell 7+ automatically exposes classes, explicitly exporting them makes the module's API clearer and more compatible with older module import mechanisms if needed.
    *   **Enhancement:** Added `-Class TuiAnsiHelper, TuiCell, TuiBuffer` to `Export-ModuleMember`.
    *   **Rationale:** Explicit API declaration, better compatibility.

### The Refined TUI Primitives Module Code:

```powershell
# TUI Primitives v5.1 - NCurses Compositor Foundation
# Provides core TuiCell class and primitive drawing operations
# This module defines the fundamental building blocks for the Terminal User Interface (TUI).

#region TuiAnsiHelper - ANSI Code Generation
# Provides static methods for generating standard ANSI escape codes for colors and text styles.
class TuiAnsiHelper {
    # Hashtable mapping ConsoleColor enum names to standard ANSI foreground color codes.
    static [hashtable] $ColorMap = @{
        Black = 30; DarkBlue = 34; DarkGreen = 32; DarkCyan = 36
        DarkRed = 31; DarkMagenta = 35; DarkYellow = 33; Gray = 37
        DarkGray = 90; Blue = 94; Green = 92; Cyan = 96
        Red = 91; Magenta = 95; Yellow = 93; White = 97
    }

    # Gets the ANSI foreground color code for a given ConsoleColor.
    static [int] GetForegroundCode([ConsoleColor]$color) {
        return [TuiAnsiHelper]::ColorMap[$color.ToString()] ?? 37 # Default to White (37) if not found
    }

    # Gets the ANSI background color code for a given ConsoleColor.
    static [int] GetBackgroundCode([ConsoleColor]$color) {
        # Background codes are foreground codes + 10.
        return ([TuiAnsiHelper]::ColorMap[$color.ToString()] ?? 30) + 10 # Default to Black (30) + 10 = 40
    }

    # Returns the ANSI reset code (clears all formatting).
    static [string] Reset() {
        return "`e[0m"
    }

    # Returns the ANSI bold/bright code.
    static [string] Bold() {
        return "`e[1m"
    }

    # Returns the ANSI underline code.
    static [string] Underline() {
        return "`e[4m"
    }

    # Returns the ANSI italic code.
    static [string] Italic() {
        return "`e[3m"
    }
}
#endregion

#region TuiCell Class - Core Compositor Unit
# Represents a single character cell within the TUI buffer, including its character,
# colors, and styling attributes. This is the atomic unit of the TUI display.
class TuiCell {
    [char] $Char = ' '
    [ConsoleColor] $ForegroundColor = [ConsoleColor]::White
    [ConsoleColor] $BackgroundColor = [ConsoleColor]::Black
    [bool] $Bold = $false
    [bool] $Underline = $false
    [bool] $Italic = $false
    [string] $StyleFlags = "" # Reserved for future custom styling or flags
    [int] $ZIndex = 0        # Used for layering, higher Z-index means it's drawn on top
    [object] $Metadata = $null # Allows attaching arbitrary data to a specific cell

    # Default constructor: Initializes a cell with default properties (space character, white FG, black BG).
    TuiCell() { } # Properties have default values, so explicit init not strictly needed

    # Character constructor: Initializes a cell with a specified character and default colors/styles.
    TuiCell([char]$char) {
        $this.Char = $char
    }

    # Full constructor: Initializes a cell with a specified character, foreground, and background colors.
    TuiCell([char]$char, [ConsoleColor]$fg, [ConsoleColor]$bg) {
        $this.Char = $char
        $this.ForegroundColor = $fg
        $this.BackgroundColor = $bg
    }

    # Style constructor: Initializes a cell with character, colors, and specific bold/underline styles.
    TuiCell([char]$char, [ConsoleColor]$fg, [ConsoleColor]$bg, [bool]$bold, [bool]$underline) {
        $this.Char = $char
        $this.ForegroundColor = $fg
        $this.BackgroundColor = $bg
        $this.Bold = $bold
        $this.Underline = $underline
    }

    # Copy constructor: Creates a new TuiCell by copying all properties from an existing TuiCell instance.
    TuiCell([Parameter(Mandatory)][ValidateNotNull()][TuiCell]$other) {
        $this.Char = $other.Char
        $this.ForegroundColor = $other.ForegroundColor
        $this.BackgroundColor = $other.BackgroundColor
        $this.Bold = $other.Bold
        $this.Underline = $other.Underline
        $this.Italic = $other.Italic
        $this.StyleFlags = $other.StyleFlags
        $this.ZIndex = $other.ZIndex
        $this.Metadata = $other.Metadata
    }

    # Creates a new TuiCell that is a copy of this cell but with new foreground and background colors.
    [TuiCell] WithStyle([ConsoleColor]$fg, [ConsoleColor]$bg) {
        $copy = [TuiCell]::new($this) # Use copy constructor
        $copy.ForegroundColor = $fg
        $copy.BackgroundColor = $bg
        return $copy
    }

    # Creates a new TuiCell that is a copy of this cell but with a new character.
    [TuiCell] WithChar([char]$char) {
        $copy = [TuiCell]::new($this) # Use copy constructor
        $copy.Char = $char
        return $copy
    }

    # Blends this TuiCell with another TuiCell.
    # The cell with the higher ZIndex wins. If ZIndex is equal, the 'other' cell's character wins if it's not a space.
    # This is crucial for layering effects in the compositor.
    [TuiCell] BlendWith([Parameter(Mandatory)][ValidateNotNull()][TuiCell]$other) {
        if ($other.ZIndex -gt $this.ZIndex) {
            return $other # The 'other' cell is on top
        }
        if ($other.ZIndex -eq $this.ZIndex -and $other.Char -ne ' ') {
            return $other # Same layer, but 'other' has a non-transparent character
        }
        return $this # This cell remains, as it's either on top or 'other' is transparent
    }

    # Checks if this TuiCell differs visually from another TuiCell.
    # Used by the TUI engine to optimize rendering by only redrawing changed cells.
    [bool] DiffersFrom([TuiCell]$other) {
        if ($null -eq $other) { return $true } # If 'other' is null, they are definitely different.
        return ($this.Char -ne $other.Char -or 
                $this.ForegroundColor -ne $other.ForegroundColor -or 
                $this.BackgroundColor -ne $other.BackgroundColor -or
                $this.Bold -ne $other.Bold -or
                $this.Underline -ne $other.Underline -or
                $this.Italic -ne $other.Italic)
    }

    # Generates the ANSI escape sequence string for this single TuiCell.
    [string] ToAnsiString() {
        $sb = [System.Text.StringBuilder]::new()
        
        $fgCode = [TuiAnsiHelper]::GetForegroundCode($this.ForegroundColor)
        $bgCode = [TuiAnsiHelper]::GetBackgroundCode($this.BackgroundColor)
        [void]$sb.Append("`e[${fgCode};${bgCode}") # Start with color codes
        
        # Add style codes if applicable
        if ($this.Bold) { [void]$sb.Append(";1") }
        if ($this.Underline) { [void]$sb.Append(";4") }
        if ($this.Italic) { [void]$sb.Append(";3") }
        
        [void]$sb.Append("m").Append($this.Char) # Close sequence and append character
        return $sb.ToString()
    }

    # Converts this TuiCell object into a legacy hashtable format (for backward compatibility if needed).
    [hashtable] ToLegacyFormat() {
        return @{
            Char = $this.Char
            FG = $this.ForegroundColor
            BG = $this.BackgroundColor
        }
    }

    # Provides a human-readable string representation of the TuiCell for debugging purposes.
    [string] ToString() {
        return "TuiCell(Char='$($this.Char)', FG='$($this.ForegroundColor)', BG='$($this.BackgroundColor)', Bold=$($this.Bold), Underline=$($this.Underline), Italic=$($this.Italic), ZIndex=$($this.ZIndex))"
    }
}
#endregion

#region TuiBuffer Class - 2D Array of TuiCells
# Represents a rectangular region of TuiCells, acting as a canvas or layer in the TUI system.
# UI elements render themselves to a TuiBuffer, which can then be blended onto other buffers.
class TuiBuffer {
    [TuiCell[,]] $Cells       # The 2D array holding the TuiCell objects
    [int] $Width             # Width of the buffer in characters
    [int] $Height            # Height of the buffer in characters
    [string] $Name            # A descriptive name for the buffer (e.g., for logging/debugging)
    [bool] $IsDirty = $true  # Flag indicating if the buffer's content has changed and needs redrawing

    # Constructor: Initializes a new 2D buffer of TuiCells with specified dimensions and an optional name.
    TuiBuffer(
        [Parameter(Mandatory)][ValidateRange(1, [int]::MaxValue)][int]$width,
        [Parameter(Mandatory)][ValidateRange(1, [int>::MaxValue)][int]$height,
        [string]$name = "Unnamed"
    ) {
        $this.Width = $width
        $this.Height = $height
        $this.Name = $name
        $this.Cells = New-Object 'TuiCell[,]' $height, $width
        $this.Clear() # Initialize all cells to default empty cells
        Write-Verbose "TuiBuffer '$($this.Name)' initialized with dimensions: $($this.Width)x$($this.Height)."
    }

    # Clears the entire buffer, filling all cells with a default empty TuiCell.
    [void] Clear() {
        $this.Clear([TuiCell]::new()) # Call the overloaded Clear method with default cell
        Write-Verbose "TuiBuffer '$($this.Name)' cleared with default cell."
    }

    # Clears the entire buffer, filling all cells with copies of a specified TuiCell.
    [void] Clear([Parameter(Mandatory)][ValidateNotNull()][TuiCell]$fillCell) {
        for ($y = 0; $y -lt $this.Height; $y++) {
            for ($x = 0; $x -lt $this.Width; $x++) {
                # Crucial: Create a new instance of TuiCell to avoid all cells referencing the same object
                $this.Cells[$y, $x] = [TuiCell]::new($fillCell) 
            }
        }
        $this.IsDirty = $true # Mark buffer as dirty since its content changed
        Write-Verbose "TuiBuffer '$($this.Name)' cleared with specified cell."
    }

    # Safely retrieves the TuiCell at the specified coordinates (X, Y).
    # Returns a default empty TuiCell if coordinates are out of bounds.
    [TuiCell] GetCell([int]$x, [int]$y) {
        if ($x -lt 0 -or $x -ge $this.Width -or $y -lt 0 -or $y -ge $this.Height) {
            # Write-Verbose "Attempted to get cell out of bounds in TuiBuffer '$($this.Name)': ($x, $y)." # Too noisy for common use
            return [TuiCell]::new() # Return an empty, default cell for out-of-bounds access
        }
        return $this.Cells[$y, $x]
    }

    # Safely sets the TuiCell at the specified coordinates (X, Y).
    # Only updates the cell if coordinates are within bounds and the provided cell is not null.
    [void] SetCell([int]$x, [int]$y, [Parameter(Mandatory)][ValidateNotNull()][TuiCell]$cell) {
        if ($x -ge 0 -and $x -lt $this.Width -and $y -ge 0 -and $y -lt $this.Height) {
            $this.Cells[$y, $x] = $cell
            $this.IsDirty = $true # Mark buffer as dirty
        } else {
            Write-Warning "Attempted to set cell out of bounds in TuiBuffer '$($this.Name)': ($x, $y) is outside 0..$($this.Width-1), 0..$($this.Height-1). Cell: '$($cell.Char)'."
        }
    }

    # Writes a string of characters to the buffer starting at specified coordinates.
    # Each character in the string is written as a TuiCell with the given foreground and background colors.
    [void] WriteString([int]$x, [int]$y, [Parameter(Mandatory)][ValidateNotNullOrEmpty()][string]$text, [ConsoleColor]$fg, [ConsoleColor]$bg) {
        # Check if the starting Y position is completely out of bounds for the buffer.
        if ($y -lt 0 -or $y -ge $this.Height) {
            Write-Warning "Skipping WriteString: Y coordinate ($y) out of bounds for buffer '$($this.Name)' (0..$($this.Height-1)). Text: '$text'."
            return
        }

        $currentX = $x
        foreach ($char in $text.ToCharArray()) {
            if ($currentX -ge $this.Width) { break } # Stop writing if the current X goes beyond buffer width
            
            # Only attempt to set the cell if the current X coordinate is within or starting within bounds.
            # This allows starting text off-screen to the left and having it clip into view.
            if ($currentX -ge 0) {
                $this.SetCell($currentX, $y, [TuiCell]::new($char, $fg, $bg))
            }
            $currentX++
        }
        $this.IsDirty = $true
        Write-Verbose "WriteString: Wrote '$text' to buffer '$($this.Name)' at ($x, $y)."
    }

    # Blends the content of another TuiBuffer ('other') onto this buffer.
    # The 'other' buffer is positioned relative to this buffer's top-left corner using offsetX and offsetY.
    # Cell blending is determined by the TuiCell.BlendWith() method.
    [void] BlendBuffer([Parameter(Mandatory)][ValidateNotNull()][TuiBuffer]$other, [int]$offsetX, [int]$offsetY) {
        for ($y = 0; $y -lt $other.Height; $y++) {
            for ($x = 0; $x -lt $other.Width; $x++) {
                $targetX = $offsetX + $x
                $targetY = $offsetY + $y
                
                # Only blend if the target coordinates are within this buffer's bounds
                if ($targetX -ge 0 -and $targetX -lt $this.Width -and $targetY -ge 0 -and $targetY -lt $this.Height) {
                    $sourceCell = $other.GetCell($x, $y) # Get cell from the buffer being blended
                    $targetCell = $this.GetCell($targetX, $targetY) # Get cell from this buffer
                    $blendedCell = $targetCell.BlendWith($sourceCell) # Blend them
                    $this.SetCell($targetX, $targetY, $blendedCell) # Set the blended result
                }
            }
        }
        $this.IsDirty = $true
        Write-Verbose "BlendBuffer: Blended buffer '$($other.Name)' onto '$($this.Name)' at ($offsetX, $offsetY)."
    }

    # Creates a new TuiBuffer representing a sub-section (view) of this buffer.
    # The content is copied, so changes to the sub-buffer will NOT affect the original.
    [TuiBuffer] GetSubBuffer(
        [int]$x, [int]$y,
        [Parameter(Mandatory)][ValidateRange(1, [int]::MaxValue)][int]$width,
        [Parameter(Mandatory)][ValidateRange(1, [int>::MaxValue)][int]$height
    ) {
        $subBuffer = [TuiBuffer]::new($width, $height, "$($this.Name).Sub")
        
        for ($sy = 0; $sy -lt $height; $sy++) {
            for ($sx = 0; $sx -lt $width; $sx++) {
                $sourceCell = $this.GetCell($x + $sx, $y + $sy) # Get cell from parent buffer
                $subBuffer.SetCell($sx, $sy, [TuiCell]::new($sourceCell)) # Set a copy of the cell in sub-buffer
            }
        }
        Write-Verbose "GetSubBuffer: Created sub-buffer '$($subBuffer.Name)' from '$($this.Name)' at ($x, $y) with dimensions $($width)x$($height)."
        return $subBuffer
    }

    # Resizes the buffer to new dimensions.
    # Existing content is preserved in the top-left corner, and new areas are filled with default empty cells.
    [void] Resize(
        [Parameter(Mandatory)][ValidateRange(1, [int]::MaxValue)][int]$newWidth,
        [Parameter(Mandatory)][ValidateRange(1, [int>::MaxValue)][int]$newHeight
    ) {
        $oldCells = $this.Cells
        $oldWidth = $this.Width
        $oldHeight = $this.Height

        $this.Width = $newWidth
        $this.Height = $newHeight
        $this.Cells = New-Object 'TuiCell[,]' $newHeight, $newWidth
        $this.Clear() # Clear the new (larger/smaller) buffer with default cells

        # Copy existing content from the old buffer to the new buffer
        $copyWidth = [Math]::Min($oldWidth, $newWidth)
        $copyHeight = [Math]::Min($oldHeight, $newHeight)

        for ($y = 0; $y -lt $copyHeight; $y++) {
            for ($x = 0; $x -lt $copyWidth; $x++) {
                $this.Cells[$y, $x] = $oldCells[$y, $x]
            }
        }

        $this.IsDirty = $true
        Write-Verbose "TuiBuffer '$($this.Name)' resized from $($oldWidth)x$($oldHeight) to $($newWidth)x$($newHeight)."
    }

    # Provides a human-readable string representation of the TuiBuffer for debugging.
    [string] ToString() {
        return "TuiBuffer(Name='$($this.Name)', Width=$($this.Width), Height=$($this.Height), IsDirty=$($this.IsDirty))"
    }
}
#endregion

#region Drawing Primitives - High-Level Drawing Functions
# These functions provide convenient ways to draw common TUI elements onto a TuiBuffer.

function Write-TuiText {
    <#
    .SYNOPSIS
    Writes a string of text onto a specified TuiBuffer, applying colors and basic styles.
    .DESCRIPTION
    This function takes a string and converts it into a series of TuiCell objects,
    then places them into the target TuiBuffer at the given coordinates. It supports
    clipping if the text extends beyond the buffer's boundaries or starts off-screen.
    .PARAMETER Buffer
    The TuiBuffer object where the text will be written. This is mandatory.
    .PARAMETER X
    The X-coordinate (column) in the TuiBuffer where the text string will begin.
    .PARAMETER Y
    The Y-coordinate (row) in the TuiBuffer where the text string will begin.
    .PARAMETER Text
    The string content to be written. This is mandatory and cannot be null or empty.
    .PARAMETER ForegroundColor
    Specifies the ConsoleColor for the text's foreground. Defaults to White.
    .PARAMETER BackgroundColor
    Specifies the ConsoleColor for the text's background. Defaults to Black.
    .PARAMETER Bold
    If set to $true, the text will be rendered with a bold (bright) attribute.
    .PARAMETER Underline
    If set to $true, the text will be rendered with an underline attribute.
    .PARAMETER Italic
    If set to $true, the text will be rendered with an italic attribute.
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [ValidateNotNull()]
        [TuiBuffer]$Buffer,
        
        [Parameter(Mandatory)]
        [int]$X, # Can be negative for left-clipping
        
        [Parameter(Mandatory)]
        [int]$Y, # Can be negative for top-clipping
        
        [Parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [string]$Text,
        
        [ConsoleColor]$ForegroundColor = [ConsoleColor]::White,
        [ConsoleColor]$BackgroundColor = [ConsoleColor]::Black,
        [bool]$Bold = $false,
        [bool]$Underline = $false,
        [bool]$Italic = $false
    )
    
    try {
        # Check for Y-coordinate being completely out of vertical bounds.
        if ($y -lt 0 -or $y -ge $Buffer.Height) {
            Write-Warning "Skipping Write-TuiText: Y coordinate ($y) for text '$Text' is completely out of buffer '$($Buffer.Name)' vertical bounds (0..$($Buffer.Height-1))."
            return
        }

        # Create a base TuiCell with the desired colors and styles.
        # The character of this base cell doesn't matter, as it will be replaced by the text characters.
        $baseCell = [TuiCell]::new(' ', $ForegroundColor, $BackgroundColor)
        $baseCell.Bold = $Bold
        $baseCell.Underline = $Underline
        $baseCell.Italic = $Italic
        
        $currentX = $X
        foreach ($char in $Text.ToCharArray()) {
            # Stop if the current character position is beyond the buffer's right edge.
            if ($currentX -ge $Buffer.Width) { break } 
            
            # Only set the cell if the current X coordinate is within or starting within the buffer's left edge.
            # This handles text that starts off-screen to the left and clips into view.
            if ($currentX -ge 0) {
                # Create a new TuiCell based on the baseCell, then set its character.
                # This ensures each character cell gets its own instance, maintaining unique styles if needed.
                $charCell = [TuiCell]::new($baseCell) 
                $charCell.Char = $char
                $Buffer.SetCell($currentX, $Y, $charCell)
            }
            $currentX++
        }
        Write-Verbose "Write-TuiText: Wrote '$Text' to buffer '$($Buffer.Name)' at ($X, $Y)."
    }
    catch {
        Write-Error "Failed to write text to TUI buffer '$($Buffer.Name)' at ($X, $Y): $($_.Exception.Message)"
        throw # Re-throw to propagate critical errors to the caller
    }
}

function Write-TuiBox {
    <#
    .SYNOPSIS
    Draws a rectangular box onto a specified TuiBuffer, optionally with a title.
    .DESCRIPTION
    This function draws a box using Unicode line drawing characters (or simple ASCII if not available,
    though this version primarily uses Unicode). It fills the interior with the specified
    background color and draws borders with the specified border color and style.
    The box will be clipped if it extends beyond the buffer boundaries.
    .PARAMETER Buffer
    The TuiBuffer object to draw the box on. This is mandatory.
    .PARAMETER X
    The X-coordinate (column) of the top-left corner of the box within the buffer.
    .PARAMETER Y
    The Y-coordinate (row) of the top-left corner of the box within the buffer.
    .PARAMETER Width
    The desired width of the box. Must be a positive integer.
    .PARAMETER Height
    The desired height of the box. Must be a positive integer.
    .PARAMETER BorderStyle
    Specifies the style of the box borders. Valid values are "Single", "Double", "Rounded", "Thick".
    Defaults to "Single".
    .PARAMETER BorderColor
    Specifies the ConsoleColor for the box borders. Defaults to White.
    .PARAMETER BackgroundColor
    Specifies the ConsoleColor to fill the inside of the box. Defaults to Black.
    .PARAMETER Title
    Optional text to display as a title, centered on the top border of the box.
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [ValidateNotNull()]
        [TuiBuffer]$Buffer,
        
        [Parameter(Mandatory)]
        [int]$X,
        
        [Parameter(Mandatory)]
        [int]$Y,
        
        [Parameter(Mandatory)]
        [ValidateRange(1, [int]::MaxValue)]
        [int]$Width,
        
        [Parameter(Mandatory)]
        [ValidateRange(1, [int]::MaxValue)]
        [int]$Height,
        
        [ValidateSet("Single", "Double", "Rounded", "Thick")]
        [string]$BorderStyle = "Single",
        
        [ConsoleColor]$BorderColor = [ConsoleColor]::White,
        [ConsoleColor]$BackgroundColor = [ConsoleColor]::Black,
        [string]$Title = ""
    )
    
    try {
        # Quick exit if the box is entirely outside the buffer's bounds.
        if ($X -ge $Buffer.Width -or ($X + $Width) -le 0 -or $Y -ge $Buffer.Height -or ($Y + $Height) -le 0) {
            Write-Verbose "Skipping Write-TuiBox: Box at ($X, $Y) with dimensions $($Width)x$($Height) is entirely outside buffer '$($Buffer.Name)'."
            return
        }

        $borders = Get-TuiBorderChars -Style $BorderStyle # Get the character set for the chosen border style
        
        # Determine the actual drawing region, clipping to buffer boundaries.
        $drawStartX = [Math]::Max(0, $X)
        $drawStartY = [Math]::Max(0, $Y)
        $drawEndX = [Math]::Min($Buffer.Width, $X + $Width)
        $drawEndY = [Math]::Min($Buffer.Height, $Y + $Height)
        
        $effectiveWidth = $drawEndX - $drawStartX
        $effectiveHeight = $drawEndY - $drawStartY

        if ($effectiveWidth -le 0 -or $effectiveHeight -le 0) {
            Write-Verbose "Write-TuiBox: Effective drawing area for box ($($effectiveWidth)x$($effectiveHeight)) is invalid after clipping. Skipping."
            return
        }

        # 1. Fill the entire effective box area with the background color.
        $fillCharCell = [TuiCell]::new(' ', $BorderColor, $BackgroundColor)
        for ($currentY = $drawStartY; $currentY -lt $drawEndY; $currentY++) {
            for ($currentX = $drawStartX; $currentX -lt $drawEndX; $currentX++) {
                $Buffer.SetCell($currentX, $currentY, [TuiCell]::new($fillCharCell))
            }
        }

        # 2. Draw the borders on top of the filled area.
        # Ensure that corner pieces are only drawn if they fall within the buffer
        # and are part of the original box's corners.
        
        # Top-left corner
        if ($X -ge 0 -and $Y -ge 0) { $Buffer.SetCell($X, $Y, [TuiCell]::new($borders.TopLeft, $BorderColor, $BackgroundColor)) }
        # Top-right corner
        if (($X + $Width - 1) -lt $Buffer.Width -and $Y -ge 0) { $Buffer.SetCell($X + $Width - 1, $Y, [TuiCell]::new($borders.TopRight, $BorderColor, $BackgroundColor)) }
        # Bottom-left corner
        if ($X -ge 0 -and ($Y + $Height - 1) -lt $Buffer.Height) { $Buffer.SetCell($X, $Y + $Height - 1, [TuiCell]::new($borders.BottomLeft, $BorderColor, $BackgroundColor)) }
        # Bottom-right corner
        if (($X + $Width - 1) -lt $Buffer.Width -and ($Y + $Height - 1) -lt $Buffer.Height) { $Buffer.SetCell($X + $Width - 1, $Y + $Height - 1, [TuiCell]::new($borders.BottomRight, $BorderColor, $BackgroundColor)) }

        # Horizontal borders (top and bottom)
        for ($cx = 1; $cx -lt ($Width - 1); $cx++) {
            if (($X + $cx) -ge 0 -and ($X + $cx) -lt $Buffer.Width) {
                # Top horizontal
                if ($Y -ge 0 -and $Y -lt $Buffer.Height) {
                    $Buffer.SetCell($X + $cx, $Y, [TuiCell]::new($borders.Horizontal, $BorderColor, $BackgroundColor))
                }
                # Bottom horizontal (only if height is sufficient)
                if ($Height -gt 1 -and ($Y + $Height - 1) -ge 0 -and ($Y + $Height - 1) -lt $Buffer.Height) {
                    $Buffer.SetCell($X + $cx, $Y + $Height - 1, [TuiCell]::new($borders.Horizontal, $BorderColor, $BackgroundColor))
                }
            }
        }

        # Vertical borders (left and right)
        for ($cy = 1; $cy -lt ($Height - 1); $cy++) {
            if (($Y + $cy) -ge 0 -and ($Y + $cy) -lt $Buffer.Height) {
                # Left vertical
                if ($X -ge 0 -and $X -lt $Buffer.Width) {
                    $Buffer.SetCell($X, $Y + $cy, [TuiCell]::new($borders.Vertical, $BorderColor, $BackgroundColor))
                }
                # Right vertical (only if width is sufficient)
                if ($Width -gt 1 -and ($X + $Width - 1) -ge 0 -and ($X + $Width - 1) -lt $Buffer.Width) {
                    $Buffer.SetCell($X + $Width - 1, $Y + $cy, [TuiCell]::new($borders.Vertical, $BorderColor, $BackgroundColor))
                }
            }
        }

        # 3. Draw the title if specified. This uses Write-TuiText, which handles its own clipping.
        if (-not [string]::IsNullOrEmpty($Title) -and $Y -ge 0 -and $Y -lt $Buffer.Height) {
            $titleText = " $Title " # Pad with spaces for visual separation
            # Ensure title text fits within the top border area
            if ($titleText.Length -le ($Width - 2)) { 
                $titleX = $X + [Math]::Floor(($Width - $titleText.Length) / 2)
                Write-TuiText -Buffer $Buffer -X $titleX -Y $Y -Text $titleText `
                    -ForegroundColor $BorderColor -BackgroundColor $BackgroundColor
            } else {
                Write-Verbose "Write-TuiBox: Title '$Title' too long for box width ($Width). Title will be truncated or not rendered fully."
            }
        }
        Write-Verbose "Write-TuiBox: Drew '$BorderStyle' box on buffer '$($Buffer.Name)' at ($X, $Y) with dimensions $($Width)x$($Height)."
    }
    catch {
        Write-Error "Failed to draw TUI box on buffer '$($Buffer.Name)' at ($X, $Y), $($Width)x$($Height): $($_.Exception.Message)"
        throw # Re-throw to propagate critical errors
    }
}

function Get-TuiBorderChars {
    <#
    .SYNOPSIS
    Retrieves a hashtable containing the specific Unicode characters for various box border styles.
    .DESCRIPTION
    This function provides a lookup for common box drawing styles (single, double, rounded, thick lines),
    returning a hashtable with keys like 'TopLeft', 'Horizontal', 'Vertical', etc., mapped to their
    corresponding Unicode characters.
    .PARAMETER Style
    The name of the border style to retrieve. Valid values are "Single", "Double", "Rounded", "Thick".
    Defaults to "Single".
    #>
    [CmdletBinding()]
    param(
        [ValidateSet("Single", "Double", "Rounded", "Thick")]
        [string]$Style = "Single"
    )
    
    try {
        $styles = @{
            Single = @{
                TopLeft = '┌'; TopRight = '┐'; BottomLeft = '└'; BottomRight = '┘'
                Horizontal = '─'; Vertical = '│'
            }
            Double = @{
                TopLeft = '╔'; TopRight = '╗'; BottomLeft = '╚'; BottomRight = '╝'
                Horizontal = '═'; Vertical = '║'
            }
            Rounded = @{
                TopLeft = '╭'; TopRight = '╮'; BottomLeft = '╰'; BottomRight = '╯'
                Horizontal = '─'; Vertical = '│'
            }
            Thick = @{
                TopLeft = '┏'; TopRight = '┓'; BottomLeft = '┗'; 'BottomRight' = '┛'
                Horizontal = '━'; Vertical = '┃'
            }
        }
        
        $selectedStyle = $styles[$Style]
        if ($null -eq $selectedStyle) {
            Write-Warning "Get-TuiBorderChars: Border style '$Style' not found. Returning 'Single' style."
            return $styles.Single # Fallback to default if invalid style is provided
        }
        
        Write-Verbose "Get-TuiBorderChars: Retrieved TUI border characters for style: $Style."
        return $selectedStyle
    }
    catch {
        Write-Error "Failed to get TUI border characters for style '$Style': $($_.Exception.Message)"
        throw # Re-throw to propagate critical errors
    }
}
#endregion

# Export all public classes and functions so they are available when the module is imported.
Export-ModuleMember -Function Write-TuiText, Write-TuiBox, Get-TuiBorderChars -Class TuiAnsiHelper, TuiCell, TuiBuffer
```