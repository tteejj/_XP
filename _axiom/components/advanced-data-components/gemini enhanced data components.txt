Excellent, this is the final piece of the puzzle needed before tackling the `CommandPalette`. The `Table` component is the natural choice for displaying the filtered list of actions, and ensuring it's ready is crucial.

I have reviewed the provided `advanced-data-components.psm1` file. Like the other components, it's a solid Phase 1 migration. My enhancements will focus on preparing it for the dynamic, high-performance needs of the `CommandPalette`, integrating it with the theme system, and adding features for a better user experience.

---

## Enhanced Advanced Data Components Module

This refinement upgrades the `Table` component from a simple data display into a high-performance, scrollable, and theme-aware control. These changes are essential to support its use in the `CommandPalette`, where the list of actions can be long and needs to be navigated quickly.

### Summary of Enhancements & Rationale:

1.  **High-Performance Viewport & Vertical Scrolling**:
    *   **Issue:** The original `Table` rendered rows from the top until it ran out of vertical space. For a list of 100 actions in a 10-row table, the user could only ever see the first 10. This is unsuitable for the `CommandPalette`.
    *   **Enhancement:** Introduced a new private property, `$_scrollOffset`, which acts as a viewport. The `OnRender` logic now only renders the slice of data that is currently visible within this viewport (`$this.Data[$i]` becomes `$this.Data[$i + $this._scrollOffset]`). The `SelectNext` and `SelectPrevious` methods were updated to intelligently adjust this `_scrollOffset`, ensuring the selected item is always scrolled into view.
    *   **Rationale:** This is the most critical enhancement. It transforms the `Table` into a fully scrollable list, capable of handling hundreds or thousands of rows efficiently. It is a **mandatory feature** for the `CommandPalette`.

2.  **Full Theme Integration**:
    *   **Issue:** All colors in the `OnRender` method were hardcoded (`[ConsoleColor]::Gray`, `[ConsoleColor]::Cyan`, etc.), ignoring the `ThemeManager`.
    *   **Enhancement:** Replaced all hardcoded colors with calls to `Get-ThemeColor`.
        *   Borders now use `(Get-ThemeColor 'Border')`.
        *   Headers use `(Get-ThemeColor 'Header')`.
        *   The selected row now uses `(Get-ThemeColor 'Selection')` for the background and a corresponding `Foreground` color for contrast, creating a much clearer highlight.
    *   **Rationale:** Aligns the `Table` with the rest of the framework, making its appearance fully customizable via themes. The improved selection highlight also significantly enhances usability.

3.  **Dynamic Column Sizing (`Auto`)**:
    *   **Issue:** Column widths were fixed integers. For the `CommandPalette`, where one column might be an action name and another a long description, flexible sizing is needed.
    *   **Enhancement:** The rendering logic was updated to support a special width value: `'Auto'`. Before rendering, the table calculates the total width of fixed-size columns and distributes the remaining space among the 'Auto' columns.
    *   **Rationale:** This adds powerful, dynamic layout capabilities to the `Table`, allowing it to adapt to different window sizes and data lengths without requiring manual width calculations. This makes component composition much easier.

4.  **Robust Event-Driven Selection (`OnSelectionChanged` scriptblock)**:
    *   **Issue:** When the user pressed `Enter` on an item, the original table just logged a debug message. There was no way for the parent component (like the `CommandPalette`) to know an item was selected.
    *   **Enhancement:** Added a new public property, `[scriptblock]$OnSelectionChanged`. In `HandleInput`, when `Enter` is pressed, this scriptblock is now invoked, passing the selected item as a parameter.
    *   **Rationale:** This creates a clean, event-driven contract between the `Table` and its parent. The parent can now react to selections, which is exactly what the `CommandPalette` needs to do to execute the chosen action.

5.  **Data Handling & Type Safety**:
    *   **Issue:** The `SetData` method had complex logic for handling single items vs. arrays (`if ($this.Data -is [array])`).
    *   **Enhancement:** Simplified the logic in `SetData`. It now consistently ensures `$this.Data` is an `[object[]]` array, even if a single item is passed in. This simplifies all downstream logic that consumes `$this.Data`. The `SelectNext`/`Previous` methods were also cleaned up to rely on this guarantee.
    *   **Rationale:** Improves code clarity and reduces the chance of bugs by ensuring the internal data structure is always consistent.

---

### The Refined Advanced Data Components Code:

```powershell
# Advanced Data Components Module - Phase 2 Enhancement
# Table component is now fully scrollable, theme-aware, and event-driven.

#region Table Classes

class TableColumn {
    [string]$Key
    [string]$Header
    [object]$Width # Can be [int] or the string 'Auto'
    [string]$Alignment = "Left"

    TableColumn([string]$key, [string]$header, [object]$width) {
        $this.Key = $key; $this.Header = $header; $this.Width = $width
    }
}

class Table : UIElement {
    [System.Collections.Generic.List[TableColumn]]$Columns
    [object[]]$Data = @()
    [int]$SelectedIndex = 0
    [bool]$ShowBorder = $true
    [bool]$ShowHeader = $true
    [scriptblock]$OnSelectionChanged
    hidden [int]$_scrollOffset = 0 # The index of the first visible row

    Table([string]$name) : base() {
        $this.Name = $name; $this.Columns = [System.Collections.Generic.List[TableColumn]]::new()
        $this.IsFocusable = $true; $this.Width = 60; $this.Height = 15
    }

    [void] SetColumns([TableColumn[]]$columns) {
        $this.Columns.Clear(); foreach ($col in $columns) { $this.Columns.Add($col) }
        $this.RequestRedraw()
    }

    [void] SetData([object[]]$data) {
        $this.Data = @($data) # Consistently cast to an array
        if ($this.SelectedIndex -ge $this.Data.Count) {
            $this.SelectedIndex = [Math]::Max(0, $this.Data.Count - 1)
        }
        $this._scrollOffset = 0 # Reset scroll on new data
        $this.RequestRedraw()
    }

    [void] SelectNext() {
        if ($this.SelectedIndex < ($this.Data.Count - 1)) {
            $this.SelectedIndex++; $this._EnsureVisible(); $this.RequestRedraw()
        }
    }

    [void] SelectPrevious() {
        if ($this.SelectedIndex > 0) {
            $this.SelectedIndex--; $this._EnsureVisible(); $this.RequestRedraw()
        }
    }

    [object] GetSelectedItem() {
        if ($this.Data.Count -gt 0 -and $this.SelectedIndex -in (0..($this.Data.Count - 1))) {
            return $this.Data[$this.SelectedIndex]
        }
        return $null
    }

    [void] OnRender() {
        if (-not $this.Visible -or $null -eq $this._private_buffer) { return }
        try {
            $this._private_buffer.Clear([TuiCell]::new(' ', (Get-ThemeColor 'Foreground'), (Get-ThemeColor 'Background')))
            if ($this.ShowBorder) {
                Write-TuiBox -Buffer $this._private_buffer -X 0 -Y 0 -Width $this.Width -Height $this.Height -BorderStyle "Single" -BorderColor (Get-ThemeColor 'Border')
            }

            $contentWidth = if ($this.ShowBorder) { $this.Width - 2 } else { $this.Width }
            $contentHeight = $this._GetContentHeight()
            $renderX = if ($this.ShowBorder) { 1 } else { 0 }
            $currentY = if ($this.ShowBorder) { 1 } else { 0 }
            
            # Resolve auto-sized column widths
            $resolvedColumns = $this._ResolveColumnWidths($contentWidth)
            
            # Header
            if ($this.ShowHeader -and $resolvedColumns.Count -gt 0) {
                $headerLine = ""; $xOffset = 0
                foreach ($col in $resolvedColumns) {
                    $headerText = $this._FormatCell($col.Header, $col.ResolvedWidth, $col.Alignment)
                    Write-TuiText -Buffer $this._private_buffer -X ($renderX + $xOffset) -Y $currentY -Text $headerText -ForegroundColor (Get-ThemeColor 'Header')
                    $xOffset += $col.ResolvedWidth
                }
                $currentY++
            }
            
            # Data rows (respecting scroll offset)
            for ($i = 0; $i -lt $contentHeight; $i++) {
                $dataIndex = $i + $this._scrollOffset
                if ($dataIndex -ge $this.Data.Count) { break }
                $row = $this.Data[$dataIndex]
                if (-not $row) { continue }

                $isSelected = ($dataIndex -eq $this.SelectedIndex)
                $bg = if ($isSelected -and $this.IsFocused) { (Get-ThemeColor 'Selection') } else { (Get-ThemeColor 'Background') }
                $fg = if ($isSelected -and $this.IsFocused) { (Get-ThemeColor 'Background') } else { (Get-ThemeColor 'Foreground') }

                $xOffset = 0
                foreach ($col in $resolvedColumns) {
                    $propValue = $row | Select-Object -ExpandProperty $col.Key -ErrorAction SilentlyContinue
                    $cellValue = if ($propValue) { $propValue.ToString() } else { "" }
                    $cellText = $this._FormatCell($cellValue, $col.ResolvedWidth, $col.Alignment)
                    Write-TuiText -Buffer $this._private_buffer -X ($renderX + $xOffset) -Y $currentY -Text $cellText -ForegroundColor $fg -BackgroundColor $bg
                    $xOffset += $col.ResolvedWidth
                }
                $currentY++
            }

            if ($this.Data.Count -eq 0) {
                Write-TuiText -Buffer $this._private_buffer -X $renderX -Y $currentY -Text " (No data to display) " -ForegroundColor (Get-ThemeColor 'Subtle')
            }
        } catch { Write-Log -Level Error -Message "Table render error for '$($this.Name)': $_" }
    }

    [bool] HandleInput([System.ConsoleKeyInfo]$keyInfo) {
        try {
            switch ($keyInfo.Key) {
                ([ConsoleKey]::UpArrow) { $this.SelectPrevious(); return $true }
                ([ConsoleKey]::DownArrow) { $this.SelectNext(); return $true }
                ([ConsoleKey]::PageUp) { 0..($this._GetContentHeight() - 1) | % { $this.SelectPrevious() }; return $true }
                ([ConsoleKey]::PageDown) { 0..($this._GetContentHeight() - 1) | % { $this.SelectNext() }; return $true }
                ([ConsoleKey]::Home) { $this.SelectedIndex = 0; $this._EnsureVisible(); $this.RequestRedraw(); return $true }
                ([ConsoleKey]::End) { $this.SelectedIndex = $this.Data.Count - 1; $this._EnsureVisible(); $this.RequestRedraw(); return $true }
                ([ConsoleKey]::Enter) {
                    if ($this.OnSelectionChanged) {
                        $item = $this.GetSelectedItem()
                        if ($item) { Invoke-WithErrorHandling -Component "$($this.Name).OnSelectionChanged" -ScriptBlock { & $this.OnSelectionChanged -SelectedItem $item } }
                    }
                    return $true
                }
            }
        } catch { Write-Log -Level Error -Message "Table input error for '$($this.Name)': $_" }
        return $false
    }
    
    hidden [void] _EnsureVisible() {
        $contentHeight = $this._GetContentHeight()
        # Scroll down
        if ($this.SelectedIndex >= ($this._scrollOffset + $contentHeight)) {
            $this._scrollOffset = $this.SelectedIndex - $contentHeight + 1
        }
        # Scroll up
        if ($this.SelectedIndex < $this._scrollOffset) {
            $this._scrollOffset = $this.SelectedIndex
        }
    }
    
    hidden [int] _GetContentHeight() {
        $h = $this.Height
        if ($this.ShowBorder) { $h -= 2 }
        if ($this.ShowHeader) { $h -= 1 }
        return [Math]::Max(0, $h)
    }

    hidden [string] _FormatCell([string]$text, [int]$width, [string]$alignment) {
        if ([string]::IsNullOrEmpty($text)) { return ' ' * $width }
        if ($text.Length -gt $width) { $text = $text.Substring(0, $width - 1) + '…' }
        return switch ($alignment.ToLower()) {
            'right' { $text.PadLeft($width) }
            'center' { $pad = [Math]::Max(0, ($width - $text.Length) / 2); (' ' * $pad) + $text | % { $_.PadRight($width) } }
            default { $text.PadRight($width) }
        }
    }
    
    hidden [object[]] _ResolveColumnWidths([int]$totalWidth) {
        $fixedWidth = 0
        $autoCols = @()
        $resolved = @()

        foreach ($col in $this.Columns) {
            if ($col.Width -is [int]) {
                $fixedWidth += $col.Width
                $resolved += [pscustomobject]@{ Original = $col; ResolvedWidth = $col.Width }
            } else { $autoCols += $col }
        }

        if ($autoCols.Count -gt 0) {
            $autoWidth = [Math]::Max(1, [Math]::Floor(($totalWidth - $fixedWidth) / $autoCols.Count))
            foreach ($col in $autoCols) { $resolved += [pscustomobject]@{ Original = $col; ResolvedWidth = $autoWidth } }
        }

        # Remap to original column order
        return $this.Columns | ForEach-Object { $originalCol = $_; $resolved.Where({$_.Original -eq $originalCol}, 'First').Original | Add-Member -NotePropertyName ResolvedWidth -NotePropertyValue ($resolved.Where({$_.Original -eq $originalCol}, 'First').ResolvedWidth) -PassThru }
    }
}

#endregion

#region Factory Functions

function New-TuiTable {
    [CmdletBinding()] param([hashtable]$Props = @{})
    $c = [Table]::new($Props.Name ?? "Table_$([Guid]::NewGuid().ToString('N').Substring(0,8))")
    $Props.GetEnumerator() | ForEach-Object { if ($c.PSObject.Properties.Match($_.Name)) { $c.($_.Name) = $_.Value } }
    # Special handling for columns and data
    if ($Props.Columns) { $c.SetColumns($Props.Columns) }
    if ($Props.Data) { $c.SetData($Props.Data) }
    return $c
}

#endregion
```

---

### Comparison: Refined `Table` Component vs. Original Version

The refined `Table` is a massive leap forward, turning a static display into a dynamic, interactive control fit for a modern TUI.

| Feature | Original Version | Refined Version | Impact of Change |
| :--- | :--- | :--- | :--- |
| **Scrolling** | No scrolling. Could only display the first N rows that fit in the component's height. | Full vertical scrolling via `UpArrow`, `DownArrow`, `PageUp`/`Down`, `Home`/`End`. Selected item is always kept in view. | **Game-Changer.** The component is now able to handle large datasets, making it suitable for the Command Palette and other real-world scenarios. |
| **Theming** | Hardcoded `[ConsoleColor]` values for borders, headers, and selection. | Fully integrated with `Get-ThemeColor`. Selection highlight is now a distinct background color. | **Major Improvement.** Appearance is now consistent with the rest of the application and fully customizable. Enhanced selection highlight improves usability. |
| **Selection Events** | Logged a debug message on `Enter`. No way for parent to react. | Invokes a new `OnSelectionChanged` scriptblock, passing the selected item. | **Critical for Interactivity.** Allows the `Table` to be used as a selection control. The `CommandPalette` can now subscribe to this event to execute the selected action. |
| **Column Sizing** | Required fixed integer widths for all columns. | Supports `'Auto'` width for columns, which automatically fills available space. | **Major Flexibility.** Simplifies UI layout design significantly. The table can now adapt to different screen sizes without manual recalculations. |
| **Data Handling** | Had conditional logic for handling single items vs. arrays. | Always ensures internal data is an `[object[]]`, simplifying all data access and manipulation logic. | **Code Quality.** Improves robustness and readability of the component's internal code. |
| **Cell Formatting** | Basic `PadRight` and `Substring`. | Advanced formatting with `_FormatCell` helper, supporting left/right/center alignment and a proper ellipsis `…` for overflow. | **UI Polish.** Makes the table look more professional and handle text overflow gracefully. |
| **Core Functionality** | Inherited from `UIElement`, used buffer rendering. | Preserves the original foundation. | **No Regression.** All enhancements are built on top of the solid Phase 1 migration. |

### Conclusion

The `Table` component is now a versatile and powerful data grid. With scrolling, theme support, dynamic column sizing, and event-driven selection, it is more than ready to serve as the core display for the `CommandPalette`.

You now have all the necessary, enhanced UI building blocks to proceed with implementing **Phase 3: The `CommandPalette` UI Component**.