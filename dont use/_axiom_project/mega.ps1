# mega.ps1 - The Reconstructor
# Rebuilds the monolithic file from a modular project directory.

[CmdletBinding()]
param(
    # The directory containing the modular project source code.
    [Parameter(Mandatory)]
    [Alias('In', 'Path')]
    [string]$InputDirectory = (Join-Path $PSScriptRoot "_axiom"),

    # The file path where the new monolithic script will be saved.
    [Alias('Out', 'Mono')]
    [string]$OutputMonolithPath = (Join-Path $PSScriptRoot "monolith.txt"),

    # The name of the script that defines the $FileLoadOrder variable.
    [Alias('Build')]
    [string]$BuildScriptFileName = "mega.ps1",

    # The name of the script that contains the main logic.
    [Alias('Runner')]
    [string]$RunnerScriptName = "run.ps1"
)

Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

# --- Main Script Flow ---
try {
    Write-Host "MEGA: Reconstructing monolith from '$InputDirectory'..." -ForegroundColor Yellow
    $components = Extract-MonolithComponents -InputDirectory $InputDirectory -BuildScriptFileName $BuildScriptFileName -RunnerScriptName $RunnerScriptName
    $monolithContent = Build-MonolithContent -Components $components -InputDirectory $InputDirectory
    Set-Content -Path $OutputMonolithPath -Value $monolithContent -Encoding UTF8
    Write-Host "`nReconstruction complete!" -ForegroundColor Yellow
    Write-Host "New monolith created at: '$OutputMonolithPath'" -ForegroundColor White
} catch { Write-Error "A critical error occurred: $($_.Exception.Message)"; exit 1 }

# --- Function Definitions ---
function Extract-MonolithComponents {
    param([string]$InputDirectory, [string]$BuildScriptFileName, [string]$RunnerScriptName)
    Write-Host "`nPhase 1: Analyzing modular project..." -ForegroundColor Yellow
    $buildScriptPath = Join-Path $InputDirectory $BuildScriptFileName; $runnerScriptPath = Join-Path $InputDirectory $RunnerScriptName
    if (-not (Test-Path $buildScriptPath)) { throw "Build script '$buildScriptPath' not found." }
    if (-not (Test-Path $runnerScriptPath)) { throw "Runner script '$runnerScriptPath' not found." }
    $buildScriptContent = Get-Content -Path $buildScriptPath -Raw; $runnerScriptContent = Get-Content -Path $runnerScriptPath -Raw
    $paramBlockRegex = '(?msi)^param\s*\((.*?)\)'; $mainLogicRegex = '(?msi)# --- MAIN EXECUTION LOGIC.*?\r?\n(.*?)\s*\z'; $fileOrderRegex = '(?msi)\$FileLoadOrder\s*=\s*(@\(.*?\))'
    if ($runnerScriptContent -match $paramBlockRegex) { $paramBlock = $matches[0]; Write-Host "  -> Found param() block." -ForegroundColor Cyan } else { $paramBlock = "" }
    if ($runnerScriptContent -match $mainLogicRegex) { $mainLogicContent = $matches[1].Trim(); Write-Host "  -> Found main logic." -ForegroundColor Cyan } else { throw "Main logic not found in '$runnerScriptPath'." }
    if ($buildScriptContent -match $fileOrderRegex) { $fileOrderArray = Invoke-Expression -Command $matches[1]; Write-Host "  -> Parsed file load order." -ForegroundColor Cyan } else { throw "`$FileLoadOrder not found in build script." }
    return [PSCustomObject]@{ ParamBlock = $paramBlock; MainLogic = $mainLogicContent; FileOrder = $fileOrderArray }
}

function Build-MonolithContent {
    param([PSCustomObject]$Components, [string]$InputDirectory)
    Write-Host "`nPhase 2: Assembling new monolith..." -ForegroundColor Yellow
    $sb = [System.Text.StringBuilder]::new()
    [void]$sb.AppendLine("# MONOLITHIC SCRIPT (Generated by mega.ps1)")
    [void]$sb.AppendLine("# ==================================================================================")
    [void]$sb.AppendLine($Components.ParamBlock)
    [void]$sb.AppendLine('Set-StrictMode -Version Latest')
    [void]$sb.AppendLine('$ErrorActionPreference = "Stop"'); [void]$sb.AppendLine()
    foreach ($relativeFilePath in $Components.FileOrder) {
        $fullFilePath = Join-Path $InputDirectory $relativeFilePath
        if (-not (Test-Path $fullFilePath)) { throw "Source file not found: '$fullFilePath'" }
        $fileContent = Get-Content -Path $fullFilePath -Raw
        Write-Host "  -> Embedding: $relativeFilePath"
        [void]$sb.AppendLine("# --- START OF ORIGINAL FILE: $relativeFilePath ---")
        [void]$sb.AppendLine($fileContent.Trim())
        [void]$sb.AppendLine("# --- END OF ORIGINAL FILE: $relativeFilePath ---"); [void]$sb.AppendLine()
    }
    # Use a marker that micro.ps1 can find again.
    [void]$sb.AppendLine("# --- START OF MAIN EXECUTION LOGIC (from run.ps1) ---")
    [void]$sb.AppendLine($Components.MainLogic)
    [void]$sb.AppendLine("# --- END OF MAIN EXECUTION LOGIC ---")
    return $sb.ToString()
}