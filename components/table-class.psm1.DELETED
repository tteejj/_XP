# ==============================================================================
# PMC Terminal v5 - Simple Table Classes
# Basic table and column classes for displaying tabular data.
# ==============================================================================

# Import base classes
using module 'C:\Users\jhnhe\Documents\GitHub\_XP\components\ui-classes.psm1'

Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

# --- TableColumn Class ---
class TableColumn {
    [string]$Key
    [string]$Header
    [int]$Width
    [string]$Alignment = "Left"
    
    TableColumn([string]$key, [string]$header, [int]$width) {
        $this.Key = $key
        $this.Header = $header
        $this.Width = $width
    }
}

# --- Table Class ---
class Table : Component {
    [System.Collections.Generic.List[TableColumn]]$Columns
    [object[]]$Data = @()
    [int]$SelectedIndex = 0
    [bool]$ShowBorder = $true
    [bool]$ShowHeader = $true
    
    Table([string]$name) : base($name) {
        $this.Columns = [System.Collections.Generic.List[TableColumn]]::new()
    }
    
    [void] SetColumns([TableColumn[]]$columns) {
        $this.Columns.Clear()
        foreach ($col in $columns) {
            $this.Columns.Add($col)
        }
    }
    
    [void] SetData([object[]]$data) {
        $this.Data = $data ?? @()
        if ($this.SelectedIndex -ge $this.Data.Count) {
            $this.SelectedIndex = [Math]::Max(0, $this.Data.Count - 1)
        }
    }
    
    [void] SelectNext() {
        if ($this.SelectedIndex -lt ($this.Data.Count - 1)) {
            $this.SelectedIndex++
        }
    }
    
    [void] SelectPrevious() {
        if ($this.SelectedIndex -gt 0) {
            $this.SelectedIndex--
        }
    }
    
    [object] GetSelectedItem() {
        if ($this.Data.Count -gt 0 -and $this.SelectedIndex -ge 0 -and $this.SelectedIndex -lt $this.Data.Count) {
            return $this.Data[$this.SelectedIndex]
        }
        return $null
    }
    
    [string] _RenderContent() {
        $content = [System.Text.StringBuilder]::new()
        
        # Header
        if ($this.ShowHeader -and $this.Columns.Count -gt 0) {
            $headerLine = ""
            foreach ($col in $this.Columns) {
                $headerText = $col.Header.PadRight($col.Width).Substring(0, [Math]::Min($col.Header.Length, $col.Width))
                $headerLine += $headerText + " "
            }
            [void]$content.AppendLine($headerLine.TrimEnd())
            [void]$content.AppendLine("-" * $headerLine.TrimEnd().Length)
        }
        
        # Data rows
        for ($i = 0; $i -lt $this.Data.Count; $i++) {
            $row = $this.Data[$i]
            $rowLine = ""
            $isSelected = ($i -eq $this.SelectedIndex)
            
            foreach ($col in $this.Columns) {
                $cellValue = ""
                if ($row -is [hashtable] -and $row.ContainsKey($col.Key)) {
                    $cellValue = $row[$col.Key]?.ToString() ?? ""
                } elseif ($row.PSObject.Properties[$col.Key]) {
                    $cellValue = $row.($col.Key)?.ToString() ?? ""
                }
                
                $cellText = $cellValue.PadRight($col.Width).Substring(0, [Math]::Min($cellValue.Length, $col.Width))
                $rowLine += $cellText + " "
            }
            
            $finalLine = $rowLine.TrimEnd()
            if ($isSelected) {
                $finalLine = "> $finalLine"
            } else {
                $finalLine = "  $finalLine"
            }
            [void]$content.AppendLine($finalLine)
        }
        
        if ($this.Data.Count -eq 0) {
            [void]$content.AppendLine("  No data to display")
        }
        
        return $content.ToString()
    }
}

Export-ModuleMember -Function @() -Variable @() -Cmdlet @() -Alias @()
