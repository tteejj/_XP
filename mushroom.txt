# mushroom.ps1 - The Monolith Decomposer & Recomposer Toolkit (v1.2 - FindIndex Bug Fixed)

[CmdletBinding()]
param(
    [Parameter(Position = 0)]
    [string]$Command = 'help',
    
    [Parameter(Position = 1)]
    [string]$Path,
    
    [Parameter(Position = 2)]
    [string]$TargetDirectory,
    
    [string]$Output = "monolith.ps1"
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

#==============================================================================
# FUNCTION DEFINITIONS
#==============================================================================

function Write-Status {
    param($Message, $Color = 'Cyan')
    Write-Host "🍄 $Message" -ForegroundColor $Color
}

function Find-LineIndex {
    param(
        [string[]]$Lines,
        [string]$RegexPattern
    )
    for ($i = 0; $i -lt $Lines.Count; $i++) {
        if ($Lines[$i] -match $RegexPattern) {
            return $i
        }
    }
    return -1 # Not found
}

function Invoke-Decompose {
    param(
        [string]$MonolithPath, 
        [string]$TargetDir
    )

    if (-not (Test-Path $MonolithPath)) { throw "Monolith file not found at: '$MonolithPath'" }
    $monolithContent = Get-Content -Path $MonolithPath -Raw
    $monolithLines = $monolithContent -split '(\r?\n)'
    if ($monolithLines.Count -eq 0) { throw "The monolith file '$MonolithPath' is empty." }

    Write-Status "Decomposing '$MonolithPath'..."

    # Setup Output Directory
    if (Test-Path $TargetDir) {
        Write-Status "Target directory '$TargetDir' already exists. Cleaning..." 'DarkYellow'
        Get-ChildItem -Path $TargetDir -Recurse | Remove-Item -Recurse -Force
    }
    New-Item -ItemType Directory -Path $TargetDir -Force | Out-Null
    Write-Status "Created clean output directory: $TargetDir" 'Green'

    Write-Status "Phase 1: Analyzing monolith structure..."
    
    # 1. Extract Using Statements and Param Block first
    $usingStatements = @()
    $paramBlock = ''
    $inParamBlock = $false
    $firstCodeLine = 0
    for ($i = 0; $i -lt $monolithLines.Count; $i++) {
        $line = $monolithLines[$i]
        if ($line.Trim() -match '^using namespace') { $usingStatements += $line.Trim(); continue }
        if ($line.Trim() -match '^param\s*\(') { $inParamBlock = $true }
        if ($inParamBlock) { $paramBlock += "$line`r`n" }
        if ($inParamBlock -and $line.Trim() -eq ')') { $inParamBlock = $false; $firstCodeLine = $i + 1; break }
        if (-not $inParamBlock -and -not [string]::IsNullOrWhiteSpace($line) -and -not $line.Trim().StartsWith('#')) { $firstCodeLine = $i; break }
    }
    Write-Status "  -> Extracted $($usingStatements.Count) 'using' statements."
    if ($paramBlock) { Write-Status "  -> Extracted param() block." }
    
    # 2. Find all file markers
    $markerRegex = '(?i)^# --- START OF .*?([\w\-\.\/\\]+\.psm?1)'
    $fileMarkers = @()
    for ($i = $firstCodeLine; $i -lt $monolithLines.Count; $i++) {
        if ($monolithLines[$i] -match $markerRegex) {
            $fileMarkers += [PSCustomObject]@{
                Path      = $matches[1].Trim() -replace '/', '\' # Normalize to backslash
                StartLine = $i
            }
        }
    }
    if ($fileMarkers.Count -eq 0) { throw "No valid '# --- START OF...' markers found." }
    Write-Status "  -> Found $($fileMarkers.Count) file blocks."

    # 3. Find Main Logic boundaries - CORRECTED
    $mainLogicStartLine = Find-LineIndex -Lines $monolithLines -RegexPattern '# --- START OF MAIN EXECUTION LOGIC'
    $mainLogicEndLine = Find-LineIndex -Lines $monolithLines -RegexPattern '# --- END OF MAIN EXECUTION LOGIC'
    
    if ($mainLogicStartLine -lt 0) { throw "Could not find '# --- START OF MAIN EXECUTION LOGIC' marker."}
    $mainLogicEndBoundary = if ($mainLogicEndLine -gt 0) { $mainLogicEndLine } else { $monolithLines.Count }
    $mainLogicContent = ($monolithLines[($mainLogicStartLine + 1)..($mainLogicEndBoundary - 1)] | Out-String).Trim()
    Write-Status "  -> Extracted main logic block."

    # 4. Extract content for each file block
    $orderedFiles = @()
    for ($i = 0; $i -lt $fileMarkers.Count; $i++) {
        $currentMarker = $fileMarkers[$i]
        $contentStart = $currentMarker.StartLine + 1
        
        $endBoundary = if ($i + 1 -lt $fileMarkers.Count) { $fileMarkers[$i + 1].StartLine } else { $mainLogicStartLine }
        $contentEnd = $endBoundary - 1

        if ($contentStart -ge $contentEnd) {
             Write-Status "  -> Skipping empty block for: $($currentMarker.Path)" 'DarkYellow'
             continue
        }

        $contentBlock = $monolithLines[$contentStart..$contentEnd]
        $fileContent = ($contentBlock | Where-Object { $_ -notmatch '# --- END OF ORIGINAL FILE:' -and $_ -notmatch '# --- END OF REPLACEMENT BLOCK' }).Trim() | Out-String
        
        $orderedFiles += [PSCustomObject]@{
            Path = $currentMarker.Path
            Content = $fileContent.Trim()
        }
    }
    Write-Status "  -> Successfully extracted content for all $($orderedFiles.Count) files."
    
    $components = @{
        UsingStatements = $usingStatements
        ParamBlock      = $paramBlock
        MainLogic       = $mainLogicContent
        OrderedFiles    = $orderedFiles
    }

    # 5. Assemble the Modular Project
    Write-Status "Phase 2: Assembling modular project..."
    foreach ($file in $components.OrderedFiles) {
        $destinationPath = Join-Path $TargetDir $file.Path
        $destinationDir = Split-Path $destinationPath -Parent
        if (-not (Test-Path $destinationDir)) { New-Item -ItemType Directory -Path $destinationDir -Force | Out-Null }
        
        Set-Content -Path $destinationPath -Value $file.Content -Encoding UTF8
        Write-Status "  -> Restored: $($file.Path)" 'Gray'
    }
    Synthesize-RunnerScript -Components $components -OutDir $TargetDir

    Write-Status "Decomposition complete!" 'Green'
    Write-Status "To run the new project: cd '$TargetDir'; ./run.ps1" 'Yellow'
}

function Synthesize-RunnerScript {
    param($Components, $OutDir)
    $fileOrderString = @($Components.OrderedFiles.Path | ForEach-Object { "    '$_'" }) -join ",`r`n"
    
    $runnerScriptContent = @"
# run.ps1 - Main entry point for the deconstructed application.
# Synthesized by mushroom.ps1

# --- PARAMETERS & GLOBAL SETTINGS ---
$($Components.ParamBlock)
Set-StrictMode -Version Latest
`$ErrorActionPreference = "Stop"

# --- MODULE SOURCING ---
# This block dynamically sources all the decomposed script files in the correct order.
`$PSScriptRoot = Split-Path -Parent `$MyInvocation.MyCommand.Definition
`$FileLoadOrder = @(
$($fileOrderString)
)

Write-Host "🚀 Loading Axiom-Phoenix modules..."
foreach (`$filePath in `$FileLoadOrder) {
    `$fullPath = Join-Path `$PSScriptRoot `$filePath
    if (Test-Path `$fullPath) {
        . `$fullPath
    } else {
        Write-Warning "FATAL: Required module not found: `$filePath". Aborting."
        exit 1
    }
}
Write-Host "✅ All modules loaded."

# --- MAIN EXECUTION LOGIC ---
# This is the original startup logic from the monolith, now running after all
# functions and classes have been sourced into the session.
$($Components.MainLogic)
"@
    Set-Content -Path (Join-Path $OutDir "run.ps1") -Value $runnerScriptContent -Encoding UTF8
    Write-Status "  -> SYNTHESIZED: run.ps1 (Main Application Launcher)" 'Green'
}

function Invoke-Recompose {
    param($SourceDir, $OutputPath)
    Write-Status "Recomposing project from '$SourceDir' to '$OutputPath'..."
    $runnerPath = Join-Path $SourceDir "run.ps1"
    if (-not (Test-Path $runnerPath)) { throw "'run.ps1' not found in source directory '$SourceDir'."}
    
    $runnerContent = Get-Content -Path $runnerPath -Raw
    $paramBlock = if ($runnerContent -match '(?msi)^param\s*\((.*?)\)') { $matches[0] } else { '' }
    $mainLogic = if ($runnerContent -match '(?msi)# --- MAIN EXECUTION LOGIC ---\r?\n(.*?)\s*$') { $matches[1].Trim() } else { throw "Main logic not found in run.ps1" }
    $fileOrderMatch = if ($runnerContent -match '(?msi)\$FileLoadOrder\s*=\s*(@\(.*?\))') { $matches[1] } else { throw "`$FileLoadOrder not found in run.ps1" }
    $FileLoadOrder = Invoke-Expression $fileOrderMatch
    Write-Status "  -> Found load order with $($FileLoadOrder.Count) files in run.ps1"
    
    $sb = [System.Text.StringBuilder]::new()
    [void]$sb.AppendLine("# MONOLITHIC SCRIPT (Generated by mushroom recompose)")
    [void]$sb.AppendLine("# ==================================================================================")
    [void]$sb.AppendLine("#Requires -Version 7.0")

    $allUsingStatements = @()
    foreach($path in $FileLoadOrder) {
        $fullPath = Join-Path $SourceDir $path
        if (Test-Path $fullPath) { $allUsingStatements += Get-Content $fullPath | Where-Object { $_.Trim() -match '^using namespace' } }
    }
    $allUsingStatements | Select-Object -Unique | ForEach-Object { [void]$sb.AppendLine($_) }

    [void]$sb.AppendLine($paramBlock)
    [void]$sb.AppendLine("# Global script settings")
    [void]$sb.AppendLine('Set-StrictMode -Version Latest')
    [void]$sb.AppendLine('$ErrorActionPreference = "Stop"')
    [void]$sb.AppendLine()

    foreach ($path in $FileLoadOrder) {
        $fullPath = Join-Path $SourceDir $path
        if (-not (Test-Path $fullPath)) { Write-Warning "Source file '$fullPath' is missing. Skipping."; continue }
        $fileContent = Get-Content -Path $fullPath -Raw
        $cleanContent = $fileContent -replace '(?m)^\s*using namespace .*\r?\n', ''
        Write-Status "  -> Embedding: $path" 'Gray'
        [void]$sb.AppendLine("# --- START OF ORIGINAL FILE: $path ---")
        [void]$sb.AppendLine($cleanContent.Trim())
        [void]$sb.AppendLine("# --- END OF ORIGINAL FILE: $path ---")
        [void]$sb.AppendLine()
    }

    [void]$sb.AppendLine("# --- START OF MAIN EXECUTION LOGIC ---")
    [void]$sb.AppendLine($mainLogic)
    [void]$sb.AppendLine("# --- END OF MAIN EXECUTION LOGIC ---")
    Set-Content -Path $OutputPath -Value $sb.ToString() -Encoding UTF8
    Write-Status "Recomposition complete! New monolith is at '$OutputPath'" "Green"
}

function Show-Help {
    Write-Host @"
🍄 MUSHROOM - The Monolith Decomposer & Recomposer

A toolkit for converting a single, large PowerShell script into a structured,
modular project, and for recompiling that project back into a single script
for easy distribution.

It relies on special comment markers in the source monolith:
  '# --- START OF ORIGINAL FILE: path/to/your/file.psm1'
  '# --- END OF ORIGINAL FILE: path/to/your/file.psm1'
  '# --- START OF MAIN EXECUTION LOGIC ---'
  '# --- END OF MAIN EXECUTION LOGIC ---'

COMMANDS:
  decompose <monolith_file> [target_directory]
    Parses the monolith and splits it into a directory of individual files.
    Also synthesizes a 'run.ps1' to launch the modular project.
    Example: ./mushroom.ps1 decompose ./axiom.txt ./AxiomProject

  recompose [source_directory] [-Output <output_file>]
    Reads the 'run.ps1' from a source directory to determine file order,
    then combines all files back into a single monolithic script.
    Example: ./mushroom.ps1 recompose ./AxiomProject -Output axiom-new.ps1

"@ -ForegroundColor 'Cyan'
}

#==============================================================================
# MAIN EXECUTION BLOCK
#==============================================================================

try {
    switch ($Command.ToLower()) {
        'decompose' {
            if (-not $Path) { throw "The 'decompose' command requires a path to the monolith file." }
            $target = if ($TargetDirectory) { $TargetDirectory } else { "_decomposed" }
            Invoke-Decompose -MonolithPath $Path -TargetDir $target
        }
        
        'recompose' {
            $sourceDir = if ($Path) { $Path } else { "." }
            Invoke-Recompose -SourceDir $sourceDir -OutputPath $Output
        }

        default {
            Show-Help
        }
    }
} catch {
    Write-Host ""
    Write-Host "🍄 ERROR: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}