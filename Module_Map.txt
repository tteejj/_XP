

This map reflects the newly corrected architecture, where all UI components follow the compositor pattern and systems like dialogs and tables are unified.

---

### **PMC Terminal v5 - Module Interaction Map**

This diagram shows the dependency flow: **Bottom layers provide services to the layers above.** An arrow `A ---> B` means A depends on B.

```
+-------------------------------------------------------------+
|                     APPLICATION LAYER                       |
|   +-----------------------+      +-----------------------+  |
|   | screens\              |      | _CLASSY-MAIN.ps1      |  |
|   |  - dashboard-screen   | <--- | (Entry Point)         |  |
|   |  - task-list-screen   |      |                       |  |
|   +-----------------------+      +-----------------------+  |
+--------------------------------|----------------------------+
                                 | (Services, Components, Engine)
+--------------------------------V----------------------------+
|                      FRAMEWORK & SERVICES LAYER             |
|                                |                            |
| +-------------------------+    |   +---------------------+  |
| | navigation-service-class| ---+-> | keybinding-service  |  |
| +-------------------------+        +---------------------+  |
|           |                                                 |
|           +-->+---------------------+<--+----------------+  |
|               | dialog-system-class |   | data-manager   |  |
|               +---------------------+   +----------------+  |
|                           |                                 |
+---------------------------|---------------------------------+
                            | (UI Classes, Engine)
+---------------------------V---------------------------------+
|                        UI/ENGINE LAYER                      |
|                                                             |
|   +-----------------------+ <--------------------+          |
|   | components\           |                      |          |
|   |  - tui-components     |                      |          |
|   |  - advanced-data...   |      +------------+  |          |
|   |  - advanced-input...  | <--- | tui-engine |  |          |
|   |  - navigation-class   |      +------------+  |          |
|   +-----------------------+            ^         |          |
|              |                         |         |          |
| +------------V-----------+   +---------|-------+ |          |
| | layout\panels-class.psm1|   | components\     | |          |
| +--------------------------+   |  - ui-classes   | |          |
|                              +---------|-------+ |          |
|                                        |         |          |
|  +-------------------------------------V---------+-------+  |
|  |           components\tui-primitives.psm1              |  |
|  +-------------------------------------------------------+  |
+-------------------------------------------------------------+
                                 | (Core Language Features)
+--------------------------------V----------------------------+
|                         CORE SERVICES LAYER                 |
|                                                             |
|  +----------+   +--------------+   +-------------+  +-------------+
|  | models   |   | event-system |   | exceptions  |  | logger      |
|  +----------+   +--------------+   +-------------+  +-------------+
|                                                             |
+-------------------------------------------------------------+
```

### Layer-by-Layer Breakdown

#### **Layer 1: Core Services (Foundation)**

These modules have no dependencies on other application modules and can be used by any other layer.

1.  **`modules\logger.psm1`**
    *   **Role:** Provides a global, thread-safe logging function (`Write-Log`).
    *   **Talks To:** No one. It's a self-contained service. Almost everyone talks *to it*.
2.  **`modules\exceptions.psm1`**
    *   **Role:** Defines custom exception types (`HeliosException`, etc.) and the `Invoke-WithErrorHandling` wrapper.
    *   **Talks To:** `logger`. It calls `Write-Log` whenever an exception is caught.
3.  **`modules\event-system.psm1`**
    *   **Role:** Manages a global pub/sub event bus (`Publish-Event`, `Subscribe-Event`). It allows modules to communicate without being directly aware of each other.
    *   **Talks To:** `logger` and `exceptions` for internal operations.
4.  **`modules\models.psm1`**
    *   **Role:** Defines the core data structures of the application (`PmcTask`, `PmcProject`). These are pure data classes.
    *   **Talks To:** No one. It's a library of data types.

---

#### **Layer 2: UI/Engine Layer (The Compositor Core)**

This is the heart of the TUI, managing rendering and the component hierarchy.

1.  **`components\tui-primitives.psm1`**
    *   **Role:** Defines the absolute fundamentals of rendering: `TuiCell`, `TuiBuffer`, and primitive drawing functions (`Write-TuiText`, `Write-TuiBox`).
    *   **Talks To:** No one. It's the foundational building block.
2.  **`components\ui-classes.psm1`**
    *   **Role:** Defines the master `UIElement` class. This is the **single most important class** for the new architecture. It manages the component tree (parent/child relationships), private buffers, and the core `Render()` method which composites child buffers onto the parent's buffer.
    *   **Talks To:** `tui-primitives` (to create and manage its `_private_buffer`), `exceptions` (for `Invoke-WithErrorHandling`).
3.  **`layout\panels-class.psm1`**
    *   **Role:** Defines the `Panel` class, a specialized `UIElement` for containing other components and handling layout (manual, vertical, etc.).
    *   **Talks To:** `ui-classes` (inherits from `UIElement`), `tui-primitives`.
4.  **All other `components\*` modules:**
    *   **Role:** Define concrete, usable UI controls like `Table`, `Button`, `TextBox`, `NavigationMenu`.
    *   **Key Interaction:** Each component class inherits from `UIElement`. Its `OnRender()` method is responsible **only for drawing its own state into its own `_private_buffer`**. It does *not* know or care about where it is on screen; that is the parent's job.
    *   **Talks To:** `ui-classes` (to inherit from), `tui-primitives` (to draw), `logger`.
5.  **`modules\tui-engine.psm1`**
    *   **Role:** The main program loop. Manages the screen stack, handles input, and drives the entire rendering process.
    *   **Key Interaction:**
        *   It holds the top-level `CompositorBuffer` and `PreviousCompositorBuffer`.
        *   In its main loop, it calls `Render()` on the `$CurrentScreen` (`UIElement`).
        *   This triggers the recursive rendering process defined in `UIElement._RenderContent`. The screen renders its panels, which render their components, all compositing up into the screen's buffer.
        *   The engine then composites the screen's buffer and any active dialog's buffer onto the main `CompositorBuffer`.
        *   Finally, it diffs the `CompositorBuffer` against the `PreviousCompositorBuffer` to produce a flicker-free update to the console.
    *   **Talks To:** `tui-primitives`, `ui-classes`, `dialog-system-class`, `event-system`, `logger`, `exceptions`.

---

#### **Layer 3: Framework & Services Layer (Application Brains)**

These modules manage the application's state and business logic. They are "headless" and don't perform any rendering themselves.

1.  **`modules\data-manager.psm1`**
    *   **Role:** Manages persistence (loading/saving JSON) and provides CRUD (Create, Read, Update, Delete) functions for `PmcTask` and `PmcProject` objects.
    *   **Talks To:** `models` (to create instances of tasks/projects), `event-system` (publishes `Tasks.Changed` events when data is modified), `logger`, `exceptions`.
2.  **`services\keybinding-service.psm1`**
    *   **Role:** Maps physical key presses to named actions (e.g., `Ctrl+S` -> `"edit.save"`).
    *   **Talks To:** `logger`, `exceptions`.
3.  **`services\navigation-service-class.psm1`**
    *   **Role:** Manages which screen is currently active. It uses a `ScreenFactory` to create new screen instances based on a URL-like path (e.g., `/tasks`).
    *   **Key Interaction:** It calls `Push-Screen` and `Pop-Screen` in the `tui-engine` to update the global state.
    *   **Talks To:** `ui-classes` (to understand `Screen` types), `tui-engine` (to push/pop screens), `event-system` (publishes navigation events), `logger`, `exceptions`.
4.  **`modules\dialog-system-class.psm1`**
    *   **Role:** Provides a simple API (`Show-AlertDialog`, etc.) to create and display modal dialogs.
    *   **Key Interaction:** When a `Show-*` function is called, it creates a new dialog instance (which is a `UIElement`) and registers it with the `tui-engine`'s dialog manager state. The engine then takes over rendering and input handling for that dialog.
    *   **Talks To:** `ui-classes`, `tui-primitives`, `tui-engine`, `event-system`, `logger`, `exceptions`.

---

#### **Layer 4: Application Layer (The "View")**

This is what the user sees.

1.  **`screens\*` (e.g., `dashboard-screen.psm1`, `task-list-screen.psm1`)**
    *   **Role:** A screen is a top-level `UIElement` that represents a full-screen view. Its job is to instantiate and arrange `Panel` and other `Component` objects.
    *   **Key Interaction:** In its `Initialize` method, it creates panels and components, adding them as children. In `HandleInput`, it responds to user actions, often by calling methods on the services (e.g., `$this.Services.Navigation.GoTo(...)`).
    *   **Talks To:** **All other layers.** A screen is the "glue" that assembles panels, components, and services to create a functional user interface.
2.  **`_CLASSY-MAIN.ps1`**
    *   **Role:** The application entry point.
    *   **Key Interaction:** Its only job is to:
        1.  Load all modules in the correct order using `using module`.
        2.  Initialize all the core services.
        3.  Register the screen classes with the `NavigationService`.
        4.  Initialize the `tui-engine`.
        5.  Tell the `NavigationService` to go to the initial route.
        6.  Start the `tui-engine`'s main loop.