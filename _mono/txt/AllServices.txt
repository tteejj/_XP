# ==============================================================================
# Axiom-Phoenix v4.0 - All Services (Load After Components)
# Core application services: action, navigation, data, theming, logging, events
# ==============================================================================

#region Service Classes

# ===== CLASS: ActionService =====
class ActionService {
    [hashtable]$ActionRegistry = @{}
    [object]$EventManager

    ActionService() {}

    ActionService([object]$eventManager) {
        $this.EventManager = $eventManager
    }

    [void] RegisterAction([string]$actionName, [scriptblock]$action, [hashtable]$metadata = @{}) {
        if ([string]::IsNullOrWhiteSpace($actionName)) { throw "Action name cannot be null or empty" }
        if (-not $action) { throw "Action scriptblock cannot be null" }

        $actionData = @{
            Name = $actionName
            Action = $action
            Category = $metadata.Category ?? "General"
            Description = $metadata.Description ?? ""
        }
        $this.ActionRegistry[$actionName] = $actionData

        if ($this.EventManager) {
            $this.EventManager.Publish("Action.Registered", @{ ActionName = $actionName; Category = $actionData.Category })
        }
    }

    [object] ExecuteAction([string]$actionName, [hashtable]$parameters = @{}) {
        if (-not $this.ActionRegistry.ContainsKey($actionName)) {
            throw "Action '$actionName' not found in registry"
        }

        $actionData = $this.ActionRegistry[$actionName]
        $result = & $actionData.Action @parameters

        if ($this.EventManager) {
            $this.EventManager.Publish("Action.Executed", @{ ActionName = $actionName; Success = $true })
        }
        return $result
    }

    [hashtable] GetAction([string]$actionName) { return $this.ActionRegistry[$actionName] }
    [hashtable] GetAllActions() { return $this.ActionRegistry }

    [void] RegisterDefaultActions() {
        $this.RegisterAction("app.exit", { $global:TuiState.Running = $false }, @{ Category = "Application"; Description = "Exit the application" })
        $this.RegisterAction("app.commandPalette", { $global:TuiState.CommandPalette.Show() }, @{ Category = "Application"; Description = "Open Command Palette" })
        $this.RegisterAction("navigation.nextComponent", { $global:TuiState.Services.FocusManager.MoveFocus($false) }, @{ Category = "Navigation"; Description = "Focus next component" })
        $this.RegisterAction("navigation.previousComponent", { $global:TuiState.Services.FocusManager.MoveFocus($true) }, @{ Category = "Navigation"; Description = "Focus previous component" })
    }
}

# ===== CLASS: KeybindingService =====
class KeybindingService {
    [hashtable]$KeyMap = @{}

    KeybindingService() {
        $this._InitializeDefaultBindings()
    }

    hidden [void] _InitializeDefaultBindings() {
        $this.SetBinding("Ctrl+Q", "app.exit")
        $this.SetBinding("Ctrl+P", "app.commandPalette")
        $this.SetBinding("Tab", "navigation.nextComponent")
        $this.SetBinding("Shift+Tab", "navigation.previousComponent")
    }

    [void] SetBinding([string]$keyPattern, [string]$actionName) {
        $this.KeyMap[$keyPattern] = $actionName
    }

    [string] GetAction([System.ConsoleKeyInfo]$keyInfo) {
        $keyPattern = $this._GetKeyPattern($keyInfo)
        return $this.KeyMap[$keyPattern]
    }

    hidden [string] _GetKeyPattern([System.ConsoleKeyInfo]$keyInfo) {
        $parts = @()
        if ($keyInfo.Modifiers -band [System.ConsoleModifiers]::Control) { $parts += "Ctrl" }
        if ($keyInfo.Modifiers -band [System.ConsoleModifiers]::Alt) { $parts += "Alt" }
        if ($keyInfo.Modifiers -band [System.ConsoleModifiers]::Shift) { $parts += "Shift" }
        $parts += $keyInfo.Key.ToString()
        return $parts -join "+"
    }
}

# ===== CLASS: DataManager =====
class DataManager {
    [hashtable]$Tasks = @{}
    [hashtable]$Projects = @{}
    [string]$DataPath
    [EventManager]$EventManager
    [bool]$IsDirty = $false
    [hashtable]$Metadata = @{}

    DataManager([string]$dataPath, [EventManager]$eventManager) {
        $this.DataPath = $dataPath
        $this.EventManager = $eventManager
        $dataDir = Split-Path -Parent $this.DataPath
        if (-not (Test-Path $dataDir)) {
            New-Item -ItemType Directory -Path $dataDir -Force | Out-Null
        }
    }

    [void] LoadData() {
        if (-not (Test-Path $this.DataPath)) { return }
        
        try {
            $jsonContent = Get-Content -Path $this.DataPath -Raw
            $data = $jsonContent | ConvertFrom-Json

            # Load Tasks
            $this.Tasks.Clear()
            if ($data.Tasks) {
                foreach ($taskData in $data.Tasks) {
                    $task = [PmcTask]::new()
                    # Robustly map properties from the loaded PSObject
                    foreach($prop in $taskData.PSObject.Properties) {
                        if($task.PSObject.Properties.Contains($prop.Name)) {
                            $targetProp = $task.PSObject.Properties[$prop.Name]
                            try {
                                # Handle Enum conversion
                                if ($targetProp.TypeName -match 'TaskStatus|TaskPriority') {
                                    $enumValue = [System.Enum]::Parse($targetProp.TypeName, $prop.Value)
                                    $task.($prop.Name) = $enumValue
                                } else {
                                    $task.($prop.Name) = $prop.Value
                                }
                            } catch {
                                Write-Warning "DataManager: Could not set property '$($prop.Name)' on PmcTask."
                            }
                        }
                    }
                    $this.Tasks[$task.Id] = $task
                }
            }

            # Load Projects
            $this.Projects.Clear()
            if ($data.Projects) {
                 foreach ($projectData in $data.Projects) {
                    $project = [PmcProject]::new()
                    foreach($prop in $projectData.PSObject.Properties) {
                        if($project.PSObject.Properties.Contains($prop.Name)) {
                            $project.($prop.Name) = $prop.Value
                        }
                    }
                    $this.Projects[$project.Key] = $project
                }
            }

            if ($data.Metadata) { $this.Metadata = $data.Metadata }
            $this.IsDirty = $false
        }
        catch {
            Write-Error "Failed to load data: $_"
            throw
        }
    }

    [void] SaveData() {
        try {
            # This is the robust way to serialize. It automatically handles all public properties.
            $data = @{
                Tasks = @($this.Tasks.Values)
                Projects = @($this.Projects.Values)
                Metadata = $this.Metadata
                SavedAt = [datetime]::Now
            }

            $jsonContent = $data | ConvertTo-Json -Depth 10
            Set-Content -Path $this.DataPath -Value $jsonContent -Force

            $this.IsDirty = $false
        }
        catch {
            Write-Error "Failed to save data: $_"
            throw
        }
    }

    [PmcTask[]] GetTasks() { return @($this.Tasks.Values) }
    [void] AddTask([PmcTask]$task) { $this.Tasks[$task.Id] = $task; $this.IsDirty = $true }
    [PmcProject[]] GetProjects() { return @($this.Projects.Values) }
    [void] AddProject([PmcProject]$project) { $this.Projects[$project.Key] = $project; $this.IsDirty = $true }
}

# ===== CLASS: NavigationService =====
class NavigationService {
    [System.Collections.Generic.Stack[Screen]]$NavigationStack
    [Screen]$CurrentScreen
    [EventManager]$EventManager

    NavigationService([EventManager]$eventManager) {
        $this.NavigationStack = [System.Collections.Generic.Stack[Screen]]::new()
        $this.EventManager = $eventManager
    }

    [void] NavigateTo([Screen]$screen) {
        if ($null -eq $screen) { throw [System.ArgumentNullException]::new("screen") }

        try {
            if ($this.CurrentScreen) {
                $this.CurrentScreen.OnExit()
                $this.NavigationStack.Push($this.CurrentScreen)
            }
            $this.CurrentScreen = $screen

            if (-not $screen._isInitialized) {
                $screen.Initialize()
                $screen._isInitialized = $true
            }
            $screen.Resize($global:TuiState.BufferWidth, $global:TuiState.BufferHeight)
            $screen.OnEnter()

            if ($this.EventManager) {
                $this.EventManager.Publish("Navigation.ScreenChanged", @{ ScreenName = $screen.Name })
            }
        }
        catch {
            Write-Error "NavigationService: Failed to navigate to screen '$($screen.Name)': $_"
            throw
        }
    }

    [bool] CanGoBack() { return $this.NavigationStack.Count -gt 0 }

    [void] GoBack() {
        if (-not $this.CanGoBack()) { return }

        try {
            if ($this.CurrentScreen) {
                $this.CurrentScreen.OnExit()
                $this.CurrentScreen.Cleanup()
            }

            $previousScreen = $this.NavigationStack.Pop()
            $this.CurrentScreen = $previousScreen
            $previousScreen.Resize($global:TuiState.BufferWidth, $global:TuiState.BufferHeight)
            $previousScreen.OnResume()

            if ($this.EventManager) {
                $this.EventManager.Publish("Navigation.BackNavigation", @{ ScreenName = $previousScreen.Name })
            }
        }
        catch {
            Write-Error "NavigationService: Failed to go back: $_"
            throw
        }
    }
}

# ===== CLASS: ThemeManager =====
class ThemeManager {
    [hashtable]$CurrentTheme = @{}
    [string]$ThemeName = "Default"

    ThemeManager() {
        $this.LoadDefaultTheme()
    }

    [void] LoadDefaultTheme() {
        $this.CurrentTheme = @{
            Background = "#000000"; Foreground = "#FFFFFF"; Primary = "#1E90FF"; Accent = "#FFD700";
            Error = "#FF4444"; Warning = "#FFA500"; Success = "#32CD32"; Info = "#00CED1"; Subtle = "#808080";
            "component.border" = "#808080"; "component.title" = "#FFFFFF"; "component.background" = "#000000";
            "button.normal.fg" = "#FFFFFF"; "button.normal.bg" = "#333333"; "button.focused.fg" = "#000000"; "button.focused.bg" = "#1E90FF";
            "button.pressed.fg" = "#FFFFFF"; "button.pressed.bg" = "#0066CC"; "button.disabled.fg" = "#808080"; "button.disabled.bg" = "#1A1A1A";
            "list.header.fg" = "#FFD700"; "list.header.bg" = "#1A1A1A"; "list.item.normal" = "#FFFFFF";
            "list.item.selected" = "#000000"; "list.item.selected.background" = "#1E90FF"; "list.scrollbar" = "#808080";
            "dialog.background" = "#1A1A1A"; "dialog.foreground" = "#FFFFFF"; "dialog.border" = "#1E90FF";
            "status.bar.bg" = "#333333"; "status.bar.fg" = "#FFFFFF";
            "input.background" = "#1A1A1A"; "input.foreground" = "#FFFFFF"; "input.placeholder" = "#808080"; "input.cursor" = "#FFD700";
        }
        $this.ThemeName = "Default"
    }

    [string] GetColor([string]$colorName) {
        if ($this.CurrentTheme.ContainsKey($colorName)) {
            return $this.CurrentTheme[$colorName]
        }
        # Corrected: Fallback must return a hex string to avoid type errors.
        return "#FFFFFF"
    }
}

# ===== CLASS: Logger =====
class Logger {
    [string]$LogPath; [bool]$EnableFileLogging = $true; [string]$MinimumLevel = "Info"
    [hashtable]$LevelPriority = @{ 'Trace' = 0; 'Debug' = 1; 'Info' = 2; 'Warning' = 3; 'Error' = 4; 'Fatal' = 5 }
    Logger() {
        $this.LogPath = Join-Path $env:APPDATA "AxiomPhoenix\app.log"
        $logDir = Split-Path -Parent $this.LogPath
        if (-not (Test-Path $logDir)) { New-Item -ItemType Directory -Path $logDir -Force | Out-Null }
    }
    [void] Log([string]$message, [string]$level = "Info") {
        if ($this.LevelPriority[$level] -lt $this.LevelPriority[$this.MinimumLevel]) { return }
        if (-not $this.EnableFileLogging) { return }
        $logLine = "$([DateTime]::Now.ToString('yyyy-MM-dd HH:mm:ss.fff')) [$($level.ToUpper().PadRight(7))] $message"
        Add-Content -Path $this.LogPath -Value $logLine
    }
}

# ===== CLASS: EventManager =====
class EventManager {
    [hashtable]$EventHandlers = @{}
    [int]$NextHandlerId = 1
    [string] Subscribe([string]$eventName, [scriptblock]$handler) {
        if (-not $this.EventHandlers.ContainsKey($eventName)) { $this.EventHandlers[$eventName] = @{} }
        $handlerId = "handler_$($this.NextHandlerId++)"
        $this.EventHandlers[$eventName][$handlerId] = $handler
        return $handlerId
    }
    [void] Unsubscribe([string]$eventName, [string]$handlerId) { if ($this.EventHandlers.ContainsKey($eventName)) { $this.EventHandlers[$eventName].Remove($handlerId) } }
    [void] Publish([string]$eventName, [hashtable]$eventData = @{}) {
        if ($this.EventHandlers.ContainsKey($eventName)) {
            foreach ($entry in $this.EventHandlers[$eventName].GetEnumerator()) {
                try { & $entry.Value $eventData } catch { Write-Warning "EventManager: Error in handler for '$eventName': $_" }
            }
        }
    }
}

# ===== CLASS: TuiFrameworkService =====
class TuiFrameworkService {
    # This class was not fully implemented in the original and is kept as a placeholder.
}

# ===== CLASS: FocusManager =====
class FocusManager {
    [UIElement]$FocusedComponent
    [EventManager]$EventManager

    FocusManager([EventManager]$eventManager) {
        $this.EventManager = $eventManager
    }

    [void] SetFocus([UIElement]$component) {
        if ($this.FocusedComponent -eq $component) { return }
        if ($this.FocusedComponent) { $this.FocusedComponent.OnBlur() }

        $this.FocusedComponent = $null
        if ($component -and $component.IsFocusable -and $component.Enabled -and $component.Visible) {
            $this.FocusedComponent = $component
            $component.OnFocus()
            if ($this.EventManager) { $this.EventManager.Publish("Focus.Changed", @{ ComponentName = $component.Name }) }
        }
        $global:TuiState.IsDirty = $true
    }

    [void] MoveFocus([bool]$reverse = $false) {
        if (-not $global:TuiState.CurrentScreen) { return }
        $focusable = [System.Collections.Generic.List[UIElement]]::new()
        $this.FindFocusableRecursive($global:TuiState.CurrentScreen, $focusable)
        if ($focusable.Count -eq 0) { $this.SetFocus($null); return }

        $sorted = $focusable | Sort-Object { $_.TabIndex * 10000 + $_.Y * 100 + $_.X }
        $currentIndex = if ($this.FocusedComponent) { $sorted.IndexOf($this.FocusedComponent) } else { -1 }

        $nextIndex = if ($currentIndex -eq -1) {
            if ($reverse) { $sorted.Count - 1 } else { 0 }
        } else {
            if ($reverse) { ($currentIndex - 1 + $sorted.Count) % $sorted.Count } else { ($currentIndex + 1) % $sorted.Count }
        }
        $this.SetFocus($sorted[$nextIndex])
    }

    hidden [void] FindFocusableRecursive([UIElement]$element, [System.Collections.Generic.List[UIElement]]$list) {
        if ($element.IsFocusable -and $element.Enabled -and $element.Visible) { $list.Add($element) }
        foreach($child in $element.Children) { $this.FindFocusableRecursive($child, $list) }
    }

    [void] ReleaseFocus() { $this.SetFocus($null) }
}

# ===== CLASS: DialogManager =====
class DialogManager {
    [EventManager]$EventManager
    [FocusManager]$FocusManager

    DialogManager([EventManager]$eventManager, [FocusManager]$focusManager) {
        $this.EventManager = $eventManager
        $this.FocusManager = $focusManager
        $this.EventManager.Subscribe("Dialog.Completed", { param($data) $this.HideDialog($data.Dialog) })
    }

    [void] ShowDialog([Dialog]$dialog) {
        if ($null -eq $dialog) { throw [System.ArgumentNullException]::new("dialog") }

        $dialog.Metadata['PreviousFocus'] = $this.FocusManager.FocusedComponent
        $this.FocusManager.ReleaseFocus()

        $consoleWidth = $global:TuiState.BufferWidth
        $consoleHeight = $global:TuiState.BufferHeight
        $dialog.X = [Math]::Max(0, [Math]::Floor(($consoleWidth - $dialog.Width) / 2))
        $dialog.Y = [Math]::Max(0, [Math]::Floor(($consoleHeight - $dialog.Height) / 2))

        $global:TuiState.OverlayStack.Add($dialog)
        $dialog.OnEnter() # This now handles setting its internal focus
        $dialog.RequestRedraw()
    }

    [void] HideDialog([Dialog]$dialog) {
        if ($null -eq $dialog) { return }
        if ($global:TuiState.OverlayStack.Remove($dialog)) {
            $dialog.Visible = $false
            if ($this.FocusManager -and $dialog.Metadata['PreviousFocus'] -is [UIElement]) {
                $this.FocusManager.SetFocus($dialog.Metadata['PreviousFocus'])
            } else {
                $this.FocusManager.ReleaseFocus()
            }
            $global:TuiState.IsDirty = $true
        }
    }
}

#endregion