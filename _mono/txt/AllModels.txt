# ==============================================================================
# Axiom-Phoenix v4.0 - All Models (No UI Dependencies)
# Data models, enums, and validation classes
# ==============================================================================

#region Enums

enum TaskStatus {
    Pending
    InProgress
    Completed
    Cancelled
}

enum TaskPriority {
    Low
    Medium
    High
}

#endregion

#region Base Validation Class
class ValidationBase {
    static [void] ValidateNotEmpty([string]$value, [string]$parameterName) {
        if ([string]::IsNullOrWhiteSpace($value)) {
            throw [System.ArgumentException]::new("Parameter '$($parameterName)' cannot be null, empty, or whitespace.", $parameterName)
        }
    }
}
#endregion

#region Core Model Classes

# ===== CLASS: PmcTask =====
# Purpose: Represents a single task with lifecycle methods
class PmcTask : ValidationBase {
    [string]$Id = [Guid]::NewGuid().ToString()
    [string]$Title
    [string]$Description
    [TaskStatus]$Status = [TaskStatus]::Pending
    [TaskPriority]$Priority = [TaskPriority]::Medium
    [string]$ProjectKey = "General"
    [datetime]$CreatedAt = [datetime]::Now
    [datetime]$UpdatedAt = [datetime]::Now
    [Nullable[datetime]]$DueDate
    [string[]]$Tags = @()
    [int]$Progress = 0
    [bool]$Completed = $false

    # Parameterless constructor for JSON deserialization
    PmcTask() {}

    PmcTask([string]$title, [string]$description, [TaskPriority]$priority, [string]$projectKey) {
        [ValidationBase]::ValidateNotEmpty($title, "Title")
        [ValidationBase]::ValidateNotEmpty($projectKey, "ProjectKey")

        $this.Title = $title
        $this.Description = $description
        $this.Priority = $priority
        $this.ProjectKey = $projectKey
    }

    [void] Complete() {
        $this.Status = [TaskStatus]::Completed
        $this.Progress = 100
        $this.Completed = $true
        $this.UpdatedAt = [datetime]::Now
    }

    [void] Cancel() {
        $this.Status = [TaskStatus]::Cancelled
        $this.UpdatedAt = [datetime]::Now
    }

    [void] SetProgress([int]$progress) {
        if ($progress -lt 0 -or $progress -gt 100) {
            throw [System.ArgumentOutOfRangeException]::new("progress", "Progress must be between 0 and 100.")
        }
        $this.Progress = $progress
        if ($progress -eq 100) { $this.Complete() }
        elseif ($progress -gt 0) { $this.Status = [TaskStatus]::InProgress }
        $this.UpdatedAt = [datetime]::Now
    }

    [bool] IsOverdue() {
        return ($null -ne $this.DueDate -and
                -not $this.Completed -and
                [datetime]::Now -gt $this.DueDate)
    }

    [string] ToString() {
        $statusSymbol = switch ($this.Status) {
            'Pending'    { "○" }
            'InProgress' { "◐" }
            'Completed'  { "●" }
            'Cancelled'  { "✕" }
            default      { "?" }
        }
        return "$statusSymbol $($this.Title)"
    }
}

# ===== CLASS: PmcProject =====
# Purpose: Represents a project that contains multiple tasks
class PmcProject : ValidationBase {
    [string]$Key
    [string]$Name
    [string]$Description
    [datetime]$CreatedAt = [DateTime]::Now
    [datetime]$UpdatedAt = [DateTime]::Now
    [string]$Owner
    [hashtable]$Metadata = @{}
    [bool]$IsActive = $true

    # Parameterless constructor for JSON deserialization
    PmcProject() {}

    PmcProject([string]$key, [string]$name, [string]$description, [string]$owner) {
        [ValidationBase]::ValidateNotEmpty($key, "Key")
        [ValidationBase]::ValidateNotEmpty($name, "Name")
        $this.Key = $key
        $this.Name = $name
        $this.Description = $description
        $this.Owner = $owner
    }

    [void] Archive() {
        $this.IsActive = $false
        $this.UpdatedAt = [DateTime]::Now
    }

    [string] ToString() {
        $status = if ($this.IsActive) { "Active" } else { "Archived" }
        return "[$($this.Key)] $($this.Name) - $status"
    }
}

#endregion