# ==============================================================================
# Axiom-Phoenix v4.0 - Projects List Screen (FINAL FIX)
# FIXED: Robust Panel creation with comprehensive error handling
# ==============================================================================

using namespace System.Collections.Generic

class ProjectsListScreen : Screen {
    hidden [object] $_mainPanel     # Changed to [object] to handle Panel creation issues
    hidden [object] $_listPanel
    hidden [object] $_detailPanel
    hidden [object] $_actionPanel
    hidden [TextBoxComponent] $_searchBox
    hidden [ListBox] $_projectListBox
    hidden [List[PmcProject]] $_allProjects
    hidden [List[PmcProject]] $_filteredProjects
    hidden [LabelComponent] $_statusLabel
    hidden [object] $_dataManager
    hidden [string] $_currentFilter = ""
    
    # Detail panel components
    hidden [MultilineTextBoxComponent] $_descriptionBox
    hidden [Dictionary[string, LabelComponent]] $_detailLabels
    
    # Search state
    hidden [string] $_searchText = ""
    
    ProjectsListScreen([object]$serviceContainer) : base("ProjectsListScreen", $serviceContainer) {
        $this._dataManager = $serviceContainer.GetService("DataManager")
        $this._detailLabels = [Dictionary[string, LabelComponent]]::new()
        Write-Log -Level Debug -Message "ProjectsListScreen: Constructor called"
    }
    
    [void] Initialize() {
        Write-Log -Level Debug -Message "ProjectsListScreen.Initialize: Starting"
        
        try {
            # ROBUST PANEL CREATION with fallback handling
            $this._mainPanel = $this.CreatePanelSafe("ProjectsMainPanel", 0, 0, $this.Width, $this.Height, " Projects Management ", "Double")
            
            # Calculate dimensions
            $listWidth = [Math]::Floor($this.Width * 0.4)
            $detailWidth = $this.Width - $listWidth - 3
            
            # Create child panels
            $this._listPanel = $this.CreatePanelSafe("ProjectListPanel", 1, 1, $listWidth, $this.Height - 6, " Projects ", "Single")
            $this._mainPanel.AddChild($this._listPanel)
            
            $this._detailPanel = $this.CreatePanelSafe("ProjectDetailPanel", $listWidth + 2, 1, $detailWidth, $this.Height - 6, " Project Details ", "Single") 
            $this._mainPanel.AddChild($this._detailPanel)
            
            $this._actionPanel = $this.CreatePanelSafe("ProjectActionPanel", 1, $this.Height - 4, $this.Width - 2, 3, "", "Single")
            $this._mainPanel.AddChild($this._actionPanel)
            
            # Add main panel to screen
            $this.AddChild($this._mainPanel)
            
            # Create components
            $this.CreateSearchBox()
            $this.CreateProjectList()
            $this.CreateDetailComponents()
            $this.CreateActionButtons()
            
            Write-Log -Level Debug -Message "ProjectsListScreen.Initialize: Completed successfully"
        }
        catch {
            $errorMsg = "ProjectsListScreen.Initialize failed: $($_.Exception.Message)"
            Write-Log -Level Error -Message $errorMsg
            Write-Log -Level Error -Message "Stack trace: $($_.ScriptStackTrace)"
            throw $errorMsg
        }
    }
    
    # ROBUST PANEL CREATION METHOD
    hidden [object] CreatePanelSafe([string]$name, [int]$x, [int]$y, [int]$width, [int]$height, [string]$title, [string]$borderStyle) {
        try {
            Write-Log -Level Debug -Message "Creating panel: $name"
            
            # Method 1: Try normal Panel creation
            try {
                $panel = [Panel]::new($name)
                if ($null -ne $panel) {
                    Write-Log -Level Debug -Message "Panel created successfully via [Panel]::new()"
                    $this.ConfigurePanelSafe($panel, $x, $y, $width, $height, $title, $borderStyle)
                    return $panel
                }
            } catch {
                Write-Log -Level Warning -Message "Panel creation via [Panel]::new() failed: $($_.Exception.Message)"
            }
            
            # Method 2: Try reflection-based creation
            try {
                $panelType = [System.Type]::GetType("Panel")
                if ($panelType) {
                    $panel = [System.Activator]::CreateInstance($panelType, $name)
                    if ($null -ne $panel) {
                        Write-Log -Level Debug -Message "Panel created via reflection"
                        $this.ConfigurePanelSafe($panel, $x, $y, $width, $height, $title, $borderStyle)
                        return $panel
                    }
                }
            } catch {
                Write-Log -Level Warning -Message "Panel creation via reflection failed: $($_.Exception.Message)"
            }
            
            # Method 3: Fallback to UIElement container
            Write-Log -Level Warning -Message "Using UIElement fallback for panel: $name"
            $container = [UIElement]::new($name)
            $container.X = $x
            $container.Y = $y  
            $container.Width = $width
            $container.Height = $height
            $container.BackgroundColor = Get-ThemeColor "Panel.Background" "#1e1e1e"
            
            return $container
            
        } catch {
            Write-Log -Level Error -Message "All panel creation methods failed for $name: $($_.Exception.Message)"
            throw "Failed to create panel $name"
        }
    }
    
    # SAFE PANEL CONFIGURATION
    hidden [void] ConfigurePanelSafe([object]$panel, [int]$x, [int]$y, [int]$width, [int]$height, [string]$title, [string]$borderStyle) {
        try {
            # Basic properties that should always work
            $panel.X = $x
            $panel.Y = $y
            $panel.Width = $width
            $panel.Height = $height
            
            # Safe property setting with existence checks
            if ($panel | Get-Member -Name "Title" -MemberType Property) {
                $panel.Title = $title
            }
            
            if ($panel | Get-Member -Name "BorderStyle" -MemberType Property) {
                $panel.BorderStyle = $borderStyle
                Write-Log -Level Debug -Message "Set BorderStyle to $borderStyle"
            } else {
                Write-Log -Level Warning -Message "Panel $($panel.Name) missing BorderStyle property"
            }
            
            # Set colors safely
            $panel.BorderColor = Get-ThemeColor "Panel.Border" "#666666"
            $panel.BackgroundColor = Get-ThemeColor "Panel.Background" "#1e1e1e"
            
        } catch {
            Write-Log -Level Error -Message "Panel configuration failed: $($_.Exception.Message)"
            # Don't throw - partial configuration is better than total failure
        }
    }
    
    hidden [void] CreateSearchBox() {
        $this._searchBox = [TextBoxComponent]::new("ProjectSearchBox")
        $this._searchBox.X = 2
        $this._searchBox.Y = 1
        $this._searchBox.Width = $this._listPanel.Width - 4
        $this._searchBox.Height = 1
        $this._searchBox.Placeholder = "üîç Search projects..."
        $this._searchBox.IsFocusable = $true
        $this._searchBox.TabIndex = 0
        $this._searchBox.BackgroundColor = Get-ThemeColor "Input.Background" "#2d2d30"
        $this._searchBox.ForegroundColor = Get-ThemeColor "Input.Foreground" "#d4d4d4"
        $this._searchBox.BorderColor = Get-ThemeColor "Input.Border" "#404040"
        
        # Focus feedback
        $this._searchBox | Add-Member -MemberType ScriptMethod -Name OnFocus -Value {
            $this.BorderColor = Get-ThemeColor "primary.accent"
            $this.ShowCursor = $true
            $this.RequestRedraw()
        } -Force
        
        $this._searchBox | Add-Member -MemberType ScriptMethod -Name OnBlur -Value {
            $this.BorderColor = Get-ThemeColor "border"
            $this.ShowCursor = $false
            $this.RequestRedraw()
        } -Force
        
        # Search handler
        $screenRef = $this
        $this._searchBox.OnChange = {
            param($sender, $newText)
            $screenRef._searchText = $newText
            $screenRef.FilterProjects($newText)
        }.GetNewClosure()
        
        $this._listPanel.AddChild($this._searchBox)
    }
    
    hidden [void] CreateProjectList() {
        $this._projectListBox = [ListBox]::new("ProjectList")
        $this._projectListBox.X = 1
        $this._projectListBox.Y = 3
        $this._projectListBox.Width = $this._listPanel.Width - 2
        $this._projectListBox.Height = $this._listPanel.Height - 5
        $this._projectListBox.HasBorder = $false
        $this._projectListBox.IsFocusable = $true
        $this._projectListBox.TabIndex = 1
        $this._projectListBox.SelectedBackgroundColor = Get-ThemeColor "List.ItemSelectedBackground" "#007acc"
        $this._projectListBox.SelectedForegroundColor = Get-ThemeColor "List.ItemSelected" "#ffffff"
        
        # Focus feedback
        $this._projectListBox | Add-Member -MemberType ScriptMethod -Name OnFocus -Value {
            $this.BorderColor = Get-ThemeColor "primary.accent"
            $this.RequestRedraw()
        } -Force
        
        $this._projectListBox | Add-Member -MemberType ScriptMethod -Name OnBlur -Value {
            $this.BorderColor = Get-ThemeColor "border"
            $this.RequestRedraw()
        } -Force
        
        # Selection handler
        $screenRef = $this
        $this._projectListBox.SelectedIndexChanged = {
            param($sender, $newIndex)
            $screenRef.UpdateDetailPanel()
        }.GetNewClosure()
        
        $this._listPanel.AddChild($this._projectListBox)
    }
    
    hidden [void] CreateDetailComponents() {
        $y = 2
        
        # Project details labels
        $this.CreateDetailLabel("KeyLabel", "Project Key:", 2, $y, "#d4d4d4")
        $this.CreateDetailValue("Key", 18, $y, "#00d4ff")
        $y += 2
        
        $this.CreateDetailLabel("NameLabel", "Name:", 2, $y, "#d4d4d4")
        $this.CreateDetailValue("Name", 18, $y, "#d4d4d4")
        $y += 2
        
        $this.CreateDetailLabel("OwnerLabel", "Owner:", 2, $y, "#d4d4d4")
        $this.CreateDetailValue("Owner", 18, $y, "#d4d4d4")
        $y += 2
        
        $this.CreateDetailLabel("StatusLabel", "Status:", 2, $y, "#d4d4d4")
        $this.CreateDetailValue("Status", 18, $y, "#00ff88")
        $y += 2
        
        $this.CreateDetailLabel("ClientLabel", "Client ID:", 2, $y, "#d4d4d4")
        $this.CreateDetailValue("ClientID", 18, $y, "#d4d4d4")
        $y += 2
        
        $this.CreateDetailLabel("DueDateLabel", "Due Date:", 2, $y, "#d4d4d4")
        $this.CreateDetailValue("DueDate", 18, $y, "#d4d4d4")
        $y += 3
        
        # Description
        $descLabel = [LabelComponent]::new("DescLabel")
        $descLabel.Text = "Description:"
        $descLabel.X = 2
        $descLabel.Y = $y
        $descLabel.ForegroundColor = Get-ThemeColor "Label.Foreground" "#d4d4d4"
        $this._detailPanel.AddChild($descLabel)
        $y += 1
        
        $this._descriptionBox = [MultilineTextBoxComponent]::new("DescriptionBox")
        $this._descriptionBox.X = 2
        $this._descriptionBox.Y = $y
        $this._descriptionBox.Width = $this._detailPanel.Width - 4
        $this._descriptionBox.Height = $this._detailPanel.Height - $y - 2
        $this._descriptionBox.ReadOnly = $true
        $this._descriptionBox.IsFocusable = $false
        $this._descriptionBox.BackgroundColor = Get-ThemeColor "textbox.bg" "#2A2A2A"
        $this._descriptionBox.ForegroundColor = Get-ThemeColor "textbox.fg" "#FFFFFF"
        $this._detailPanel.AddChild($this._descriptionBox)
    }
    
    hidden [void] CreateDetailLabel([string]$name, [string]$text, [int]$x, [int]$y, [string]$color) {
        $label = [LabelComponent]::new($name)
        $label.Text = $text
        $label.X = $x
        $label.Y = $y
        $label.ForegroundColor = Get-ThemeColor "Label.Foreground" $color
        $this._detailPanel.AddChild($label)
    }
    
    hidden [void] CreateDetailValue([string]$key, [int]$x, [int]$y, [string]$color) {
        $value = [LabelComponent]::new("${key}Value")
        $value.X = $x
        $value.Y = $y
        $value.ForegroundColor = Get-ThemeColor "Label.Foreground" $color
        $this._detailPanel.AddChild($value)
        $this._detailLabels[$key] = $value
    }
    
    hidden [void] CreateActionButtons() {
        $buttonY = 1
        $buttonSpacing = 15
        
        # Action buttons
        $this.CreateActionButton("ViewButton", "[Enter] View", 2, $buttonY, "#00ff88")
        $this.CreateActionButton("NewButton", "[N] New", 17, $buttonY, "#00d4ff")
        $this.CreateActionButton("EditButton", "[E] Edit", 32, $buttonY, "#ffa500")
        $this.CreateActionButton("DeleteButton", "[D] Delete", 47, $buttonY, "#ff4444")
        $this.CreateActionButton("ArchiveButton", "[A] Archive", 62, $buttonY, "#d4d4d4")
        
        # Status and help
        $this._statusLabel = [LabelComponent]::new("StatusLabel")
        $this._statusLabel.Text = "0 projects"
        $this._statusLabel.X = $this._actionPanel.Width - 20
        $this._statusLabel.Y = $buttonY
        $this._statusLabel.ForegroundColor = Get-ThemeColor "Label.Foreground" "#666666"
        $this._actionPanel.AddChild($this._statusLabel)
        
        $exitLabel = [LabelComponent]::new("ExitLabel")
        $exitLabel.Text = "[Esc] Back"
        $exitLabel.X = $this._actionPanel.Width - 12
        $exitLabel.Y = $buttonY
        $exitLabel.ForegroundColor = Get-ThemeColor "Label.Foreground" "#666666"
        $this._actionPanel.AddChild($exitLabel)
    }
    
    hidden [void] CreateActionButton([string]$name, [string]$text, [int]$x, [int]$y, [string]$color) {
        $button = [LabelComponent]::new($name)
        $button.Text = $text
        $button.X = $x
        $button.Y = $y
        $button.ForegroundColor = Get-ThemeColor "Label.Foreground" $color
        $this._actionPanel.AddChild($button)
    }
    
    [void] OnEnter() {
        Write-Log -Level Debug -Message "ProjectsListScreen.OnEnter: Loading projects"
        
        try {
            # Load all projects
            $this._allProjects = [List[PmcProject]]::new()
            $projects = $this._dataManager.GetProjects()
            foreach ($project in $projects) {
                $this._allProjects.Add($project)
            }
            
            # Initial display
            $this._searchText = ""
            $this._searchBox.Text = ""
            $this.FilterProjects($this._searchText)
            
            # Call base class to handle focus management
            ([Screen]$this).OnEnter()
            
            $this.RequestRedraw()
        }
        catch {
            Write-Log -Level Error -Message "ProjectsListScreen.OnEnter failed: $($_.Exception.Message)"
            throw
        }
    }
    
    [void] OnExit() {
        Write-Log -Level Debug -Message "ProjectsListScreen.OnExit: Cleaning up"
    }
    
    hidden [void] FilterProjects([string]$searchTerm) {
        try {
            $this._currentFilter = $searchTerm
            $this._filteredProjects = [List[PmcProject]]::new()
            
            foreach ($project in $this._allProjects) {
                if ([string]::IsNullOrWhiteSpace($searchTerm) -or
                    $project.Key -like "*$searchTerm*" -or
                    $project.Name -like "*$searchTerm*" -or
                    $project.Description -like "*$searchTerm*" -or
                    $project.Owner -like "*$searchTerm*") {
                    $this._filteredProjects.Add($project)
                }
            }
            
            # Update list
            $this._projectListBox.ClearItems()
            foreach ($project in $this._filteredProjects) {
                $icon = if ($project.IsActive) { "üìÅ" } else { "üìÇ" }
                $status = if ($project.IsActive) { "" } else { " [Archived]" }
                $itemText = "$icon $($project.Key) - $($project.Name)$status"
                $this._projectListBox.AddItem($itemText)
            }
            
            # Update status
            $count = $this._filteredProjects.Count
            $total = $this._allProjects.Count
            if ([string]::IsNullOrWhiteSpace($searchTerm)) {
                $this._statusLabel.Text = "$count projects"
            } else {
                $this._statusLabel.Text = "$count of $total"
            }
            
            # Select first item if available
            if ($this._filteredProjects.Count -gt 0) {
                $this._projectListBox.SelectedIndex = 0
            } else {
                $this._projectListBox.SelectedIndex = -1
            }
            
            $this.UpdateDetailPanel()
            $this.RequestRedraw()
        }
        catch {
            Write-Log -Level Error -Message "FilterProjects failed: $($_.Exception.Message)"
        }
    }
    
    hidden [void] UpdateDetailPanel() {
        try {
            if ($this._projectListBox.SelectedIndex -lt 0 -or 
                $this._projectListBox.SelectedIndex -ge $this._filteredProjects.Count) {
                # Clear all details
                foreach ($label in $this._detailLabels.Values) {
                    $label.Text = ""
                }
                $this._descriptionBox.Text = ""
                return
            }
            
            $project = $this._filteredProjects[$this._projectListBox.SelectedIndex]
            
            # Update basic fields
            $this._detailLabels["Key"].Text = $project.Key
            $this._detailLabels["Name"].Text = $project.Name
            $this._detailLabels["Owner"].Text = if ($project.Owner) { $project.Owner } else { "Unassigned" }
            
            # Status with color
            $statusText = if ($project.IsActive) { "Active" } else { "Archived" }
            $this._detailLabels["Status"].Text = $statusText
            $this._detailLabels["Status"].ForegroundColor = if ($project.IsActive) { 
                Get-ThemeColor "Label.Foreground" "#00ff88"
            } else { 
                Get-ThemeColor "Label.Foreground" "#666666"
            }
            
            # Client ID from metadata
            $clientId = $project.GetMetadata("ClientID")
            $this._detailLabels["ClientID"].Text = if ($clientId) { $clientId } else { "N/A" }
            
            # Due date
            if ($project.BFDate) {
                $daysUntil = ($project.BFDate - [DateTime]::Now).Days
                $dateText = $project.BFDate.ToString("yyyy-MM-dd")
                if ($daysUntil -lt 0) {
                    $dateText += " (Overdue!)"
                    $this._detailLabels["DueDate"].ForegroundColor = Get-ThemeColor "Label.Foreground" "#ff4444"
                } elseif ($daysUntil -le 7) {
                    $dateText += " ($daysUntil days)"
                    $this._detailLabels["DueDate"].ForegroundColor = Get-ThemeColor "Label.Foreground" "#ffa500"
                } else {
                    $this._detailLabels["DueDate"].ForegroundColor = Get-ThemeColor "Label.Foreground" "#d4d4d4"
                }
                $this._detailLabels["DueDate"].Text = $dateText
            } else {
                $this._detailLabels["DueDate"].Text = "Not set"
                $this._detailLabels["DueDate"].ForegroundColor = Get-ThemeColor "Label.Foreground" "#666666"
            }
            
            # Description
            if ($project.Description) {
                $this._descriptionBox.Text = $project.Description
            } else {
                $this._descriptionBox.Text = "No description available."
            }
            
            $this.RequestRedraw()
        }
        catch {
            Write-Log -Level Error -Message "UpdateDetailPanel failed: $($_.Exception.Message)"
        }
    }
    
    # Project actions (simplified for now)
    hidden [void] ViewSelectedProject() {
        Write-Log -Level Info -Message "ViewSelectedProject: Feature not implemented yet"
    }
    
    hidden [void] CreateNewProject() {
        Write-Log -Level Info -Message "CreateNewProject: Feature not implemented yet"
    }
    
    hidden [void] EditSelectedProject() {
        Write-Log -Level Info -Message "EditSelectedProject: Feature not implemented yet"
    }
    
    hidden [void] DeleteSelectedProject() {
        Write-Log -Level Info -Message "DeleteSelectedProject: Feature not implemented yet"
    }
    
    hidden [void] ArchiveSelectedProject() {
        if ($this._projectListBox.SelectedIndex -lt 0 -or 
            $this._projectListBox.SelectedIndex -ge $this._filteredProjects.Count) {
            return
        }
        
        $selectedProject = $this._filteredProjects[$this._projectListBox.SelectedIndex]
        
        if ($selectedProject.IsActive) {
            $selectedProject.IsActive = $false
            $this._dataManager.UpdateProject($selectedProject)
            Write-Log -Level Info -Message "Archived project: $($selectedProject.Key)"
        } else {
            $selectedProject.IsActive = $true
            $this._dataManager.UpdateProject($selectedProject)
            Write-Log -Level Info -Message "Activated project: $($selectedProject.Key)"
        }
        
        # Refresh display
        $this.FilterProjects($this._searchText)
    }
    
    # INPUT HANDLING
    [bool] HandleInput([System.ConsoleKeyInfo]$keyInfo) {
        if ($null -eq $keyInfo) {
            return $false
        }
        
        # FIRST: Let base handle Tab and component routing
        if (([Screen]$this).HandleInput($keyInfo)) {
            return $true
        }
        
        # Handle screen-level shortcuts
        switch ($keyInfo.Key) {
            ([ConsoleKey]::Enter) {
                $this.ViewSelectedProject()
                return $true
            }
            ([ConsoleKey]::Escape) {
                $navService = $this.ServiceContainer?.GetService("NavigationService")
                if ($navService -and $navService.CanGoBack()) {
                    $navService.GoBack()
                } else {
                    $actionService = $this.ServiceContainer?.GetService("ActionService")
                    if ($actionService) {
                        $actionService.ExecuteAction("navigation.dashboard", @{})
                    }
                }
                return $true
            }
        }
        
        # Character shortcuts
        switch ($keyInfo.KeyChar) {
            'n' { 
                if ($keyInfo.Modifiers -eq [ConsoleModifiers]::None) {
                    $this.CreateNewProject()
                    return $true
                }
            }
            'N' { $this.CreateNewProject(); return $true }
            'e' { 
                if ($keyInfo.Modifiers -eq [ConsoleModifiers]::None) {
                    $this.EditSelectedProject()
                    return $true
                }
            }
            'E' { $this.EditSelectedProject(); return $true }
            'd' { 
                if ($keyInfo.Modifiers -eq [ConsoleModifiers]::None) {
                    $this.DeleteSelectedProject()
                    return $true
                }
            }
            'D' { $this.DeleteSelectedProject(); return $true }
            'a' { 
                if ($keyInfo.Modifiers -eq [ConsoleModifiers]::None) {
                    $this.ArchiveSelectedProject()
                    return $true
                }
            }
            'A' { $this.ArchiveSelectedProject(); return $true }
        }
        
        return $false
    }
}
