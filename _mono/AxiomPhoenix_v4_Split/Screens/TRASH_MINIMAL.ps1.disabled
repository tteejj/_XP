# ==============================================================================
# MINIMAL PROJECTS SCREEN - For Testing Navigation Without Panels
# This bypasses Panel creation to test if the issue is Panel-specific
# ==============================================================================

using namespace System.Collections.Generic

class ProjectsListScreen_Minimal : Screen {
    hidden [LabelComponent] $_titleLabel
    hidden [LabelComponent] $_statusLabel
    hidden [object] $_dataManager
    
    ProjectsListScreen_Minimal([object]$serviceContainer) : base("ProjectsListScreen_Minimal", $serviceContainer) {
        $this._dataManager = $serviceContainer.GetService("DataManager")
        Write-Log -Level Debug -Message "ProjectsListScreen_Minimal: Constructor called"
    }
    
    [void] Initialize() {
        Write-Log -Level Debug -Message "ProjectsListScreen_Minimal.Initialize: Starting"
        
        try {
            # Simple title label - no panels
            $this._titleLabel = [LabelComponent]::new("TitleLabel")
            $this._titleLabel.Text = "=== PROJECTS LIST (MINIMAL TEST) ==="
            $this._titleLabel.X = 10
            $this._titleLabel.Y = 5
            $this._titleLabel.ForegroundColor = Get-ThemeColor "Label.Foreground" "#00d4ff"
            $this.AddChild($this._titleLabel)
            
            # Status label
            $this._statusLabel = [LabelComponent]::new("StatusLabel")
            $this._statusLabel.Text = "Navigation test successful - Panel bypass active"
            $this._statusLabel.X = 10
            $this._statusLabel.Y = 7
            $this._statusLabel.ForegroundColor = Get-ThemeColor "Label.Foreground" "#00ff88"
            $this.AddChild($this._statusLabel)
            
            # Instructions
            $instructions = [LabelComponent]::new("Instructions")
            $instructions.Text = "Press Esc to go back - This proves navigation works"
            $instructions.X = 10
            $instructions.Y = 9
            $instructions.ForegroundColor = Get-ThemeColor "Label.Foreground" "#ffa500"
            $this.AddChild($instructions)
            
            # Project count
            $projects = $this._dataManager.GetProjects()
            $countLabel = [LabelComponent]::new("CountLabel")
            $countLabel.Text = "Found $($projects.Count) projects in data store"
            $countLabel.X = 10
            $countLabel.Y = 11
            $countLabel.ForegroundColor = Get-ThemeColor "Label.Foreground" "#d4d4d4"
            $this.AddChild($countLabel)
            
            Write-Log -Level Debug -Message "ProjectsListScreen_Minimal.Initialize: Completed successfully"
        }
        catch {
            $errorMsg = "ProjectsListScreen_Minimal.Initialize failed: $($_.Exception.Message)"
            Write-Log -Level Error -Message $errorMsg
            throw $errorMsg
        }
    }
    
    [void] OnEnter() {
        Write-Log -Level Debug -Message "ProjectsListScreen_Minimal.OnEnter: Screen activated"
        ([Screen]$this).OnEnter()
        $this.RequestRedraw()
    }
    
    [void] OnExit() {
        Write-Log -Level Debug -Message "ProjectsListScreen_Minimal.OnExit: Cleaning up"
    }
    
    [bool] HandleInput([System.ConsoleKeyInfo]$keyInfo) {
        if ($null -eq $keyInfo) {
            return $false
        }
        
        # Let base handle Tab navigation
        if (([Screen]$this).HandleInput($keyInfo)) {
            return $true
        }
        
        # Handle screen-level shortcuts
        if ($keyInfo.Key -eq [ConsoleKey]::Escape) {
            $navService = $this.ServiceContainer?.GetService("NavigationService")
            if ($navService -and $navService.CanGoBack()) {
                $navService.GoBack()
            } else {
                $actionService = $this.ServiceContainer?.GetService("ActionService")
                if ($actionService) {
                    $actionService.ExecuteAction("navigation.dashboard", @{})
                }
            }
            return $true
        }
        
        return $false
    }
}
