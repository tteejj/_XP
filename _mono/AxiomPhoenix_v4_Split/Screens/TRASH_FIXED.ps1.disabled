# ==============================================================================
# Axiom-Phoenix v4.0 - Projects List Screen (FIXED)
# FIXED: Proper Panel creation with error handling and guide compliance
# ==============================================================================

using namespace System.Collections.Generic

class ProjectsListScreen : Screen {
    hidden [Panel] $_mainPanel
    hidden [Panel] $_listPanel
    hidden [Panel] $_detailPanel
    hidden [Panel] $_actionPanel
    hidden [TextBoxComponent] $_searchBox
    hidden [ListBox] $_projectListBox
    hidden [List[PmcProject]] $_allProjects
    hidden [List[PmcProject]] $_filteredProjects
    hidden [LabelComponent] $_statusLabel
    hidden [object] $_dataManager
    hidden [string] $_currentFilter = ""
    
    # Detail panel components
    hidden [MultilineTextBoxComponent] $_descriptionBox
    hidden [Dictionary[string, LabelComponent]] $_detailLabels
    
    # Search state
    hidden [string] $_searchText = ""
    
    ProjectsListScreen([object]$serviceContainer) : base("ProjectsListScreen", $serviceContainer) {
        $this._dataManager = $serviceContainer.GetService("DataManager")
        $this._detailLabels = [Dictionary[string, LabelComponent]]::new()
        Write-Log -Level Debug -Message "ProjectsListScreen: Constructor called"
    }
    
    [void] Initialize() {
        Write-Log -Level Debug -Message "ProjectsListScreen.Initialize: Starting"
        
        try {
            # Main panel covering the whole screen
            Write-Log -Level Debug -Message "Creating main panel..."
            $this._mainPanel = [Panel]::new("ProjectsMainPanel")
            if ($null -eq $this._mainPanel) {
                throw "Failed to create main panel - Panel constructor returned null"
            }
            Write-Log -Level Debug -Message "Main panel created successfully"
            
            $this._mainPanel.X = 0
            $this._mainPanel.Y = 0
            $this._mainPanel.Width = $this.Width
            $this._mainPanel.Height = $this.Height
            $this._mainPanel.Title = " Projects Management "
            
            # Check if panel has BorderStyle property before setting it
            if ($this._mainPanel | Get-Member -Name "BorderStyle" -MemberType Property) {
                $this._mainPanel.BorderStyle = "Double"
                Write-Log -Level Debug -Message "Set main panel BorderStyle to Double"
            } else {
                Write-Log -Level Warning -Message "Main panel missing BorderStyle property"
            }
            
            $this._mainPanel.BorderColor = Get-ThemeColor "Panel.Border" "#00d4ff"
            $this._mainPanel.BackgroundColor = Get-ThemeColor "Panel.Background" "#1e1e1e"
            $this.AddChild($this._mainPanel)
            
            # Calculate dimensions
            $listWidth = [Math]::Floor($this.Width * 0.4)
            $detailWidth = $this.Width - $listWidth - 3
            
            # List panel (left side)
            Write-Log -Level Debug -Message "Creating list panel..."
            $this._listPanel = [Panel]::new("ProjectListPanel")
            if ($null -eq $this._listPanel) {
                throw "Failed to create list panel - Panel constructor returned null"
            }
            Write-Log -Level Debug -Message "List panel created successfully"
            
            $this._listPanel.X = 1
            $this._listPanel.Y = 1
            $this._listPanel.Width = $listWidth
            $this._listPanel.Height = $this.Height - 6  # Leave room for action panel
            $this._listPanel.Title = " Projects "
            
            # Safe property setting
            if ($this._listPanel | Get-Member -Name "BorderStyle" -MemberType Property) {
                $this._listPanel.BorderStyle = "Single"
            }
            $this._listPanel.BorderColor = Get-ThemeColor "Panel.Border" "#666666"
            $this._mainPanel.AddChild($this._listPanel)
            
            # Search box
            Write-Log -Level Debug -Message "Creating search box..."
            $this._searchBox = [TextBoxComponent]::new("ProjectSearchBox")
            if ($null -eq $this._searchBox) {
                throw "Failed to create search box - TextBoxComponent constructor returned null"
            }
            
            $this._searchBox.X = 2
            $this._searchBox.Y = 1
            $this._searchBox.Width = $this._listPanel.Width - 4
            $this._searchBox.Height = 1
            $this._searchBox.Placeholder = "üîç Search projects..."
            $this._searchBox.IsFocusable = $true
            $this._searchBox.TabIndex = 0
            $this._searchBox.BackgroundColor = Get-ThemeColor "Input.Background" "#2d2d30"
            $this._searchBox.ForegroundColor = Get-ThemeColor "Input.Foreground" "#d4d4d4"
            $this._searchBox.BorderColor = Get-ThemeColor "Input.Border" "#404040"
            
            # Add visual focus feedback for search box
            $this._searchBox | Add-Member -MemberType ScriptMethod -Name OnFocus -Value {
                $this.BorderColor = Get-ThemeColor "primary.accent"
                $this.ShowCursor = $true
                $this.RequestRedraw()
            } -Force
            
            $this._searchBox | Add-Member -MemberType ScriptMethod -Name OnBlur -Value {
                $this.BorderColor = Get-ThemeColor "border"
                $this.ShowCursor = $false
                $this.RequestRedraw()
            } -Force
            
            # Handle search text changes
            $screenRef = $this
            $this._searchBox.OnChange = {
                param($sender, $newText)
                $screenRef._searchText = $newText
                $screenRef.FilterProjects($newText)
            }.GetNewClosure()
            
            $this._listPanel.AddChild($this._searchBox)
            
            # Project list
            Write-Log -Level Debug -Message "Creating project list box..."
            $this._projectListBox = [ListBox]::new("ProjectList")
            if ($null -eq $this._projectListBox) {
                throw "Failed to create project list box - ListBox constructor returned null"
            }
            
            $this._projectListBox.X = 1
            $this._projectListBox.Y = 3
            $this._projectListBox.Width = $this._listPanel.Width - 2
            $this._projectListBox.Height = $this._listPanel.Height - 5
            $this._projectListBox.HasBorder = $false
            $this._projectListBox.IsFocusable = $true
            $this._projectListBox.TabIndex = 1
            $this._projectListBox.SelectedBackgroundColor = Get-ThemeColor "List.ItemSelectedBackground" "#007acc"
            $this._projectListBox.SelectedForegroundColor = Get-ThemeColor "List.ItemSelected" "#ffffff"
            
            # Add visual focus feedback for list box
            $this._projectListBox | Add-Member -MemberType ScriptMethod -Name OnFocus -Value {
                $this.BorderColor = Get-ThemeColor "primary.accent"
                $this.RequestRedraw()
            } -Force
            
            $this._projectListBox | Add-Member -MemberType ScriptMethod -Name OnBlur -Value {
                $this.BorderColor = Get-ThemeColor "border"
                $this.RequestRedraw()
            } -Force
            
            # Handle list selection changes
            $screenRef = $this
            $this._projectListBox.SelectedIndexChanged = {
                param($sender, $newIndex)
                $screenRef.UpdateDetailPanel()
            }.GetNewClosure()
            
            $this._listPanel.AddChild($this._projectListBox)
            
            # Detail panel (right side)
            Write-Log -Level Debug -Message "Creating detail panel..."
            $this._detailPanel = [Panel]::new("ProjectDetailPanel")
            if ($null -eq $this._detailPanel) {
                throw "Failed to create detail panel - Panel constructor returned null"
            }
            
            $this._detailPanel.X = $listWidth + 2
            $this._detailPanel.Y = 1
            $this._detailPanel.Width = $detailWidth
            $this._detailPanel.Height = $this.Height - 6  # Leave room for action panel
            $this._detailPanel.Title = " Project Details "
            
            # Safe property setting
            if ($this._detailPanel | Get-Member -Name "BorderStyle" -MemberType Property) {
                $this._detailPanel.BorderStyle = "Single"
            }
            $this._detailPanel.BorderColor = Get-ThemeColor "Panel.Border" "#666666"
            $this._mainPanel.AddChild($this._detailPanel)
            
            # Create detail components
            $this.CreateDetailComponents()
            
            # Action panel (bottom)
            Write-Log -Level Debug -Message "Creating action panel..."
            $this._actionPanel = [Panel]::new("ProjectActionPanel")
            if ($null -eq $this._actionPanel) {
                throw "Failed to create action panel - Panel constructor returned null"
            }
            
            $this._actionPanel.X = 1
            $this._actionPanel.Y = $this.Height - 4
            $this._actionPanel.Width = $this.Width - 2
            $this._actionPanel.Height = 3
            
            # Safe property setting
            if ($this._actionPanel | Get-Member -Name "BorderStyle" -MemberType Property) {
                $this._actionPanel.BorderStyle = "Single"
            }
            $this._actionPanel.BorderColor = Get-ThemeColor "Panel.Border" "#666666"
            $this._mainPanel.AddChild($this._actionPanel)
            
            # Action buttons and status
            $buttonY = 1
            $buttonSpacing = 15
            
            # View button
            $viewBtn = [LabelComponent]::new("ViewButton")
            $viewBtn.Text = "[Enter] View"
            $viewBtn.X = 2
            $viewBtn.Y = $buttonY
            $viewBtn.ForegroundColor = Get-ThemeColor "Label.Foreground" "#00ff88"
            $this._actionPanel.AddChild($viewBtn)
            
            # New button
            $newBtn = [LabelComponent]::new("NewButton")
            $newBtn.Text = "[N] New"
            $newBtn.X = $viewBtn.X + $buttonSpacing
            $newBtn.Y = $buttonY
            $newBtn.ForegroundColor = Get-ThemeColor "Label.Foreground" "#00d4ff"
            $this._actionPanel.AddChild($newBtn)
            
            # Edit button
            $editBtn = [LabelComponent]::new("EditButton")
            $editBtn.Text = "[E] Edit"
            $editBtn.X = $newBtn.X + $buttonSpacing
            $editBtn.Y = $buttonY
            $editBtn.ForegroundColor = Get-ThemeColor "Label.Foreground" "#ffa500"
            $this._actionPanel.AddChild($editBtn)
            
            # Delete button
            $deleteBtn = [LabelComponent]::new("DeleteButton")
            $deleteBtn.Text = "[D] Delete"
            $deleteBtn.X = $editBtn.X + $buttonSpacing
            $deleteBtn.Y = $buttonY
            $deleteBtn.ForegroundColor = Get-ThemeColor "Label.Foreground" "#ff4444"
            $this._actionPanel.AddChild($deleteBtn)
            
            # Archive button
            $archiveBtn = [LabelComponent]::new("ArchiveButton")
            $archiveBtn.Text = "[A] Archive"
            $archiveBtn.X = $deleteBtn.X + $buttonSpacing
            $archiveBtn.Y = $buttonY
            $archiveBtn.ForegroundColor = Get-ThemeColor "Label.Foreground" "#d4d4d4"
            $this._actionPanel.AddChild($archiveBtn)
            
            # Tab hint
            $tabHint = [LabelComponent]::new("TabHint")
            $tabHint.Text = "[Tab] Focus"
            $tabHint.X = $archiveBtn.X + $buttonSpacing
            $tabHint.Y = $buttonY
            $tabHint.ForegroundColor = Get-ThemeColor "Label.Foreground" "#666666"
            $this._actionPanel.AddChild($tabHint)
            
            # Status label
            $this._statusLabel = [LabelComponent]::new("StatusLabel")
            $this._statusLabel.Text = "0 projects"
            $this._statusLabel.X = $this._actionPanel.Width - 20
            $this._statusLabel.Y = $buttonY
            $this._statusLabel.ForegroundColor = Get-ThemeColor "Label.Foreground" "#666666"
            $this._actionPanel.AddChild($this._statusLabel)
            
            # Exit instructions
            $exitLabel = [LabelComponent]::new("ExitLabel")
            $exitLabel.Text = "[Esc] Back"
            $exitLabel.X = $this._actionPanel.Width - 12
            $exitLabel.Y = $buttonY
            $exitLabel.ForegroundColor = Get-ThemeColor "Label.Foreground" "#666666"
            $this._actionPanel.AddChild($exitLabel)
            
            Write-Log -Level Debug -Message "ProjectsListScreen.Initialize: Completed successfully"
        }
        catch {
            $errorMsg = "ProjectsListScreen.Initialize failed: $($_.Exception.Message)"
            Write-Log -Level Error -Message $errorMsg
            Write-Log -Level Error -Message "Stack trace: $($_.ScriptStackTrace)"
            throw $errorMsg
        }
    }
    
    hidden [void] CreateDetailComponents() {
        try {
            $labelStyle = @{ 
                ForegroundColor = Get-ThemeColor "Label.Foreground" "#d4d4d4"
                Width = 15
                Height = 1 
            }
            $valueStyle = @{ 
                ForegroundColor = Get-ThemeColor "Label.Foreground" "#d4d4d4"
                Width = $this._detailPanel.Width - 20
                Height = 1 
            }
            
            $y = 2
            
            # Project Key
            $keyLabel = [LabelComponent]::new("KeyLabel")
            $keyLabel.Text = "Project Key:"
            $keyLabel.X = 2
            $keyLabel.Y = $y
            $keyLabel.ForegroundColor = $labelStyle.ForegroundColor
            $this._detailPanel.AddChild($keyLabel)
            
            $keyValue = [LabelComponent]::new("KeyValue")
            $keyValue.X = 18
            $keyValue.Y = $y
            $keyValue.ForegroundColor = Get-ThemeColor "Label.Foreground" "#00d4ff"
            $this._detailPanel.AddChild($keyValue)
            $this._detailLabels["Key"] = $keyValue
            $y += 2
            
            # Project Name
            $nameLabel = [LabelComponent]::new("NameLabel")
            $nameLabel.Text = "Name:"
            $nameLabel.X = 2
            $nameLabel.Y = $y
            $nameLabel.ForegroundColor = $labelStyle.ForegroundColor
            $this._detailPanel.AddChild($nameLabel)
            
            $nameValue = [LabelComponent]::new("NameValue")
            $nameValue.X = 18
            $nameValue.Y = $y
            $nameValue.ForegroundColor = $valueStyle.ForegroundColor
            $this._detailPanel.AddChild($nameValue)
            $this._detailLabels["Name"] = $nameValue
            $y += 2
            
            # Owner
            $ownerLabel = [LabelComponent]::new("OwnerLabel")
            $ownerLabel.Text = "Owner:"
            $ownerLabel.X = 2
            $ownerLabel.Y = $y
            $ownerLabel.ForegroundColor = $labelStyle.ForegroundColor
            $this._detailPanel.AddChild($ownerLabel)
            
            $ownerValue = [LabelComponent]::new("OwnerValue")
            $ownerValue.X = 18
            $ownerValue.Y = $y
            $ownerValue.ForegroundColor = $valueStyle.ForegroundColor
            $this._detailPanel.AddChild($ownerValue)
            $this._detailLabels["Owner"] = $ownerValue
            $y += 2
            
            # Status
            $statusLabel = [LabelComponent]::new("StatusLabel")
            $statusLabel.Text = "Status:"
            $statusLabel.X = 2
            $statusLabel.Y = $y
            $statusLabel.ForegroundColor = $labelStyle.ForegroundColor
            $this._detailPanel.AddChild($statusLabel)
            
            $statusValue = [LabelComponent]::new("StatusValue")
            $statusValue.X = 18
            $statusValue.Y = $y
            $statusValue.ForegroundColor = Get-ThemeColor "Label.Foreground" "#00ff88"
            $this._detailPanel.AddChild($statusValue)
            $this._detailLabels["Status"] = $statusValue
            $y += 2
            
            # Client ID
            $clientLabel = [LabelComponent]::new("ClientLabel")
            $clientLabel.Text = "Client ID:"
            $clientLabel.X = 2
            $clientLabel.Y = $y
            $clientLabel.ForegroundColor = $labelStyle.ForegroundColor
            $this._detailPanel.AddChild($clientLabel)
            
            $clientValue = [LabelComponent]::new("ClientValue")
            $clientValue.X = 18
            $clientValue.Y = $y
            $clientValue.ForegroundColor = $valueStyle.ForegroundColor
            $this._detailPanel.AddChild($clientValue)
            $this._detailLabels["ClientID"] = $clientValue
            $y += 2
            
            # Due Date
            $dueDateLabel = [LabelComponent]::new("DueDateLabel")
            $dueDateLabel.Text = "Due Date:"
            $dueDateLabel.X = 2
            $dueDateLabel.Y = $y
            $dueDateLabel.ForegroundColor = $labelStyle.ForegroundColor
            $this._detailPanel.AddChild($dueDateLabel)
            
            $dueDateValue = [LabelComponent]::new("DueDateValue")
            $dueDateValue.X = 18
            $dueDateValue.Y = $y
            $dueDateValue.ForegroundColor = $valueStyle.ForegroundColor
            $this._detailPanel.AddChild($dueDateValue)
            $this._detailLabels["DueDate"] = $dueDateValue
            $y += 3
            
            # Description
            $descLabel = [LabelComponent]::new("DescLabel")
            $descLabel.Text = "Description:"
            $descLabel.X = 2
            $descLabel.Y = $y
            $descLabel.ForegroundColor = $labelStyle.ForegroundColor
            $this._detailPanel.AddChild($descLabel)
            $y += 1
            
            $this._descriptionBox = [MultilineTextBoxComponent]::new("DescriptionBox")
            $this._descriptionBox.X = 2
            $this._descriptionBox.Y = $y
            $this._descriptionBox.Width = $this._detailPanel.Width - 4
            $this._descriptionBox.Height = $this._detailPanel.Height - $y - 2
            $this._descriptionBox.ReadOnly = $true
            
            # Safe property setting for description box
            if ($this._descriptionBox | Get-Member -Name "BorderStyle" -MemberType Property) {
                $this._descriptionBox.BorderStyle = "Single"
            }
            $this._descriptionBox.IsFocusable = $false  # Read-only, no focus needed
            $this._descriptionBox.BackgroundColor = Get-ThemeColor "textbox.bg" "#2A2A2A"
            $this._descriptionBox.ForegroundColor = Get-ThemeColor "textbox.fg" "#FFFFFF"
            $this._detailPanel.AddChild($this._descriptionBox)
        }
        catch {
            Write-Log -Level Error -Message "CreateDetailComponents failed: $($_.Exception.Message)"
            throw
        }
    }
    
    [void] OnEnter() {
        Write-Log -Level Debug -Message "ProjectsListScreen.OnEnter: Loading projects"
        
        try {
            # Load all projects
            $this._allProjects = [List[PmcProject]]::new()
            $projects = $this._dataManager.GetProjects()
            foreach ($project in $projects) {
                $this._allProjects.Add($project)
            }
            
            # Initial display
            $this._searchText = ""
            $this._searchBox.Text = ""
            $this.FilterProjects($this._searchText)
            
            # Call base class to handle focus management
            ([Screen]$this).OnEnter()
            
            $this.RequestRedraw()
        }
        catch {
            Write-Log -Level Error -Message "ProjectsListScreen.OnEnter failed: $($_.Exception.Message)"
            throw
        }
    }
    
    [void] OnExit() {
        Write-Log -Level Debug -Message "ProjectsListScreen.OnExit: Cleaning up"
    }
    
    hidden [void] FilterProjects([string]$searchTerm) {
        try {
            $this._currentFilter = $searchTerm
            $this._filteredProjects = [List[PmcProject]]::new()
            
            foreach ($project in $this._allProjects) {
                if ([string]::IsNullOrWhiteSpace($searchTerm) -or
                    $project.Key -like "*$searchTerm*" -or
                    $project.Name -like "*$searchTerm*" -or
                    $project.Description -like "*$searchTerm*" -or
                    $project.Owner -like "*$searchTerm*") {
                    $this._filteredProjects.Add($project)
                }
            }
            
            # Update list
            $this._projectListBox.ClearItems()
            foreach ($project in $this._filteredProjects) {
                $icon = if ($project.IsActive) { "üìÅ" } else { "üìÇ" }
                $status = if ($project.IsActive) { "" } else { " [Archived]" }
                $itemText = "$icon $($project.Key) - $($project.Name)$status"
                $this._projectListBox.AddItem($itemText)
            }
            
            # Update status
            $count = $this._filteredProjects.Count
            $total = $this._allProjects.Count
            if ([string]::IsNullOrWhiteSpace($searchTerm)) {
                $this._statusLabel.Text = "$count projects"
            } else {
                $this._statusLabel.Text = "$count of $total"
            }
            
            # Select first item if available
            if ($this._filteredProjects.Count -gt 0) {
                $this._projectListBox.SelectedIndex = 0
            } else {
                $this._projectListBox.SelectedIndex = -1
            }
            
            $this.UpdateDetailPanel()
            $this.RequestRedraw()
        }
        catch {
            Write-Log -Level Error -Message "FilterProjects failed: $($_.Exception.Message)"
        }
    }
    
    hidden [void] UpdateDetailPanel() {
        try {
            if ($this._projectListBox.SelectedIndex -lt 0 -or 
                $this._projectListBox.SelectedIndex -ge $this._filteredProjects.Count) {
                # Clear all details
                foreach ($label in $this._detailLabels.Values) {
                    $label.Text = ""
                }
                $this._descriptionBox.Text = ""
                return
            }
            
            $project = $this._filteredProjects[$this._projectListBox.SelectedIndex]
            
            # Update basic fields
            $this._detailLabels["Key"].Text = $project.Key
            $this._detailLabels["Name"].Text = $project.Name
            $this._detailLabels["Owner"].Text = if ($project.Owner) { $project.Owner } else { "Unassigned" }
            
            # Status with color
            $statusText = if ($project.IsActive) { "Active" } else { "Archived" }
            $this._detailLabels["Status"].Text = $statusText
            $this._detailLabels["Status"].ForegroundColor = if ($project.IsActive) { 
                Get-ThemeColor "Label.Foreground" "#00ff88"
            } else { 
                Get-ThemeColor "Label.Foreground" "#666666"
            }
            
            # Client ID from metadata
            $clientId = $project.GetMetadata("ClientID")
            $this._detailLabels["ClientID"].Text = if ($clientId) { $clientId } else { "N/A" }
            
            # Due date
            if ($project.BFDate) {
                $daysUntil = ($project.BFDate - [DateTime]::Now).Days
                $dateText = $project.BFDate.ToString("yyyy-MM-dd")
                if ($daysUntil -lt 0) {
                    $dateText += " (Overdue!)"
                    $this._detailLabels["DueDate"].ForegroundColor = Get-ThemeColor "Label.Foreground" "#ff4444"
                } elseif ($daysUntil -le 7) {
                    $dateText += " ($daysUntil days)"
                    $this._detailLabels["DueDate"].ForegroundColor = Get-ThemeColor "Label.Foreground" "#ffa500"
                } else {
                    $this._detailLabels["DueDate"].ForegroundColor = Get-ThemeColor "Label.Foreground" "#d4d4d4"
                }
                $this._detailLabels["DueDate"].Text = $dateText
            } else {
                $this._detailLabels["DueDate"].Text = "Not set"
                $this._detailLabels["DueDate"].ForegroundColor = Get-ThemeColor "Label.Foreground" "#666666"
            }
            
            # Description
            if ($project.Description) {
                $this._descriptionBox.Text = $project.Description
            } else {
                $this._descriptionBox.Text = "No description available."
            }
            
            $this.RequestRedraw()
        }
        catch {
            Write-Log -Level Error -Message "UpdateDetailPanel failed: $($_.Exception.Message)"
        }
    }
    
    hidden [void] ViewSelectedProject() {
        if ($this._projectListBox.SelectedIndex -ge 0 -and 
            $this._projectListBox.SelectedIndex -lt $this._filteredProjects.Count) {
            $selectedProject = $this._filteredProjects[$this._projectListBox.SelectedIndex]
            
            $navService = $this.ServiceContainer?.GetService("NavigationService")
            if ($navService) {
                $projectInfoScreen = [ProjectInfoScreen]::new($this.ServiceContainer)
                $projectInfoScreen.SetProject($selectedProject)
                $projectInfoScreen.Initialize()
                $navService.NavigateTo($projectInfoScreen)
            }
        }
    }
    
    hidden [void] CreateNewProject() {
        $navService = $this.ServiceContainer?.GetService("NavigationService")
        if ($navService) {
            $editDialog = [ProjectEditDialog]::new($this.ServiceContainer, $null)
            $editDialog.Initialize()
            $navService.NavigateTo($editDialog)
        }
    }
    
    hidden [void] EditSelectedProject() {
        if ($this._projectListBox.SelectedIndex -ge 0 -and 
            $this._projectListBox.SelectedIndex -lt $this._filteredProjects.Count) {
            $selectedProject = $this._filteredProjects[$this._projectListBox.SelectedIndex]
            
            $navService = $this.ServiceContainer?.GetService("NavigationService")
            if ($navService) {
                $editDialog = [ProjectEditDialog]::new($this.ServiceContainer, $selectedProject)
                $editDialog.Initialize()
                $navService.NavigateTo($editDialog)
            }
        }
    }
    
    hidden [void] DeleteSelectedProject() {
        if ($this._projectListBox.SelectedIndex -lt 0 -or 
            $this._projectListBox.SelectedIndex -ge $this._filteredProjects.Count) {
            return
        }
        
        $selectedProject = $this._filteredProjects[$this._projectListBox.SelectedIndex]
        
        Write-Log -Level Warning -Message "Delete not implemented for project: $($selectedProject.Key)"
    }
    
    hidden [void] ArchiveSelectedProject() {
        if ($this._projectListBox.SelectedIndex -lt 0 -or 
            $this._projectListBox.SelectedIndex -ge $this._filteredProjects.Count) {
            return
        }
        
        $selectedProject = $this._filteredProjects[$this._projectListBox.SelectedIndex]
        
        if ($selectedProject.IsActive) {
            $selectedProject.IsActive = $false
            $this._dataManager.UpdateProject($selectedProject)
            Write-Log -Level Info -Message "Archived project: $($selectedProject.Key)"
        } else {
            $selectedProject.IsActive = $true
            $this._dataManager.UpdateProject($selectedProject)
            Write-Log -Level Info -Message "Activated project: $($selectedProject.Key)"
        }
        
        # Refresh display
        $this.FilterProjects($this._searchText)
    }
    
    # === INPUT HANDLING (HYBRID MODEL) ===
    [bool] HandleInput([System.ConsoleKeyInfo]$keyInfo) {
        if ($null -eq $keyInfo) {
            return $false
        }
        
        # FIRST: Let base handle Tab and component routing
        if (([Screen]$this).HandleInput($keyInfo)) {
            return $true
        }
        
        # Handle screen-level shortcuts
        switch ($keyInfo.Key) {
            ([ConsoleKey]::Enter) {
                $this.ViewSelectedProject()
                return $true
            }
            ([ConsoleKey]::Escape) {
                $navService = $this.ServiceContainer?.GetService("NavigationService")
                if ($navService -and $navService.CanGoBack()) {
                    $navService.GoBack()
                } else {
                    $actionService = $this.ServiceContainer?.GetService("ActionService")
                    if ($actionService) {
                        $actionService.ExecuteAction("navigation.dashboard", @{})
                    }
                }
                return $true
            }
        }
        
        # Character shortcuts
        switch ($keyInfo.KeyChar) {
            'n' {
                if ($keyInfo.Modifiers -eq [ConsoleModifiers]::None) {
                    $this.CreateNewProject()
                    return $true
                }
            }
            'N' {
                $this.CreateNewProject()
                return $true
            }
            'e' {
                if ($keyInfo.Modifiers -eq [ConsoleModifiers]::None) {
                    $this.EditSelectedProject()
                    return $true
                }
            }
            'E' {
                $this.EditSelectedProject()
                return $true
            }
            'd' {
                if ($keyInfo.Modifiers -eq [ConsoleModifiers]::None) {
                    $this.DeleteSelectedProject()
                    return $true
                }
            }
            'D' {
                $this.DeleteSelectedProject()
                return $true
            }
            'a' {
                if ($keyInfo.Modifiers -eq [ConsoleModifiers]::None) {
                    $this.ArchiveSelectedProject()
                    return $true
                }
            }
            'A' {
                $this.ArchiveSelectedProject()
                return $true
            }
        }
        
        return $false
    }
}
