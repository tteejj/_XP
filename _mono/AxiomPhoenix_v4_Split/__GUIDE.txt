Of course. It's critical to have the guide handy. Here is the definitive guide for the Axiom-Phoenix v4.1 framework, restored from the provided `diff`.

---

### File: `Guide.txt`

```
# Axiom-Phoenix v4.1 - DEFINITIVE IMPLEMENTATION GUIDE

## FUNDAMENTAL TRUTHS ABOUT THIS FRAMEWORK

### The Architecture Philosophy
```
COMPONENTS handle:
  - Visual rendering (how they look)
  - Internal state (selected index, text content)
  - Navigation within component (arrows, scrolling)
  - Their own focus visuals

SCREENS handle:
  - Component interactions (what happens when)
  - Business logic (save, delete, create)
  - Action handling (what Enter/Delete/etc. do)
  - Service coordination
```

**This separation is INTENTIONAL and GOOD. Don't fight it.**

## ABSOLUTE RULES - NO EXCEPTIONS

### Rule 1: NO Inline If Expressions in Class Methods
```powershell
# ❌ FATAL - This BREAKS PowerShell itself
$value = $this.Height - (if ($this.HasBorder) { 2 } else { 0 })
$result = $this.Method(if ($condition) { $a } else { $b })

# ❌ FATAL - Variable assignments INSIDE hashtables break parser
return @{
    Name = $this.Name
    $dateStr = $null  # PARSER ERROR - assignments not allowed here
    if ($this.Date) { $dateStr = $this.Date.ToString() }  # PARSER ERROR
    Date = $dateStr
}

# ✅ ONLY WAY - Separate statements
$borderOffset = 0
if ($this.HasBorder) { $borderOffset = 2 }
$value = $this.Height - $borderOffset

# ✅ ONLY WAY - Variables BEFORE hashtables
$dateStr = $null
if ($this.Date) { $dateStr = $this.Date.ToString() }
return @{
    Name = $this.Name
    Date = $dateStr
}
```
**WHY:** PowerShell's parser fails with inline if expressions inside class methods. Variables cannot be assigned inside hashtable literals. This is a language limitation, not a style choice.

### Rule 2: GetFocusedChild() is a METHOD, Not a Property
```powershell
# ❌ WRONG - FocusedChild is NOT a property
if ($this.FocusedChild -eq $this._listBox) { }

# ✅ CORRECT - Use the METHOD
$focused = $this.GetFocusedChild()
if ($focused -eq $this._listBox) { }
```
**WHY:** The framework uses a method to ensure the focused child is always calculated correctly. A property could become stale.

### Rule 3: Screen Rendering - Use _RenderContent for Overlays
```powershell
# ❌ WRONG - Your content gets ERASED
[void] OnRender() {
    ([Screen]$this).OnRender()  # Panel renders and CLEARS everything
    # Your beautiful menu is now gone
}

# ✅ CORRECT - Content draws AFTER children
hidden [void] _RenderContent() {
    ([UIElement]$this)._RenderContent()  # Panel renders first
    # NOW your content draws on TOP of the panel
}
```
**WHY:** The rendering pipeline is: Background → Children → Content. OnRender happens too early.

### Rule 4: NEVER Override Existing Component Methods
```powershell
# ❌ FATAL - This BREAKS the component
$listBox | Add-Member -MemberType ScriptMethod -Name HandleInput -Value {
    # This overrides ListBox's navigation!
} -Force

# ✅ CORRECT - Let components do their job
# ListBox already handles arrows/scrolling
# Your SCREEN handles what Enter does
```
**WHY:** Components have carefully designed behaviors. Overriding breaks their functionality.

### Rule 5: Service Fields - NO Type Annotations
```powershell
# ❌ FATAL - PowerShell can't resolve custom types at parse time
hidden [NavigationService] $_navService
hidden [DataManager] $_dataManager
hidden [FocusManager] $_focusManager

# ✅ CORRECT - Untyped fields work fine
hidden $_navService
hidden $_dataManager
hidden $_focusManager
```
**WHY:** PowerShell tries to resolve types during parsing, before the types are loaded. This prevents the entire script from loading.

### Rule 6: Color Setting - Properties ONLY
```powershell
# ❌ THESE METHODS DO NOT EXIST
$component.SetBackgroundColor("#123456")
$component.SetForegroundColor("#FFFFFF")

# ✅ USE PROPERTIES
$component.BackgroundColor = "#123456"
$component.ForegroundColor = Get-ThemeColor "foreground"
```
**WHY:** The framework uses properties for all visual attributes. There are no setter methods.

### Rule 7: Theme Key Format - ALL LOWERCASE WITH DOTS
```powershell
# ❌ WRONG - Mixed case theme keys fail lookup
Get-ThemeColor "Panel.Background"
Get-ThemeColor "Button.Focused.Border"
Get-ThemeColor "primary.accent"

# ✅ CORRECT - All lowercase with dots
Get-ThemeColor "panel.background"
Get-ThemeColor "button.focused.border"
Get-ThemeColor "palette.primary"
```
**WHY:** Theme registry uses standardized lowercase keys. Mixed case keys fail lookup and fall back to hardcoded colors, breaking theme switching.

## COMPONENT REFERENCE - WHAT EACH COMPONENT HANDLES

### ListBox
**Built-in Methods:** HandleInput, OnFocus, OnBlur  
**Handles:** Up/Down arrows, PageUp/PageDown, Home/End  
**Does NOT Handle:** Enter key (intentionally!)  
**Triggers:** SelectedIndexChanged event when selection changes  
**Your Screen Must:** Decide what Enter does (edit? delete? navigate?)

### TextBox
**Built-in Methods:** HandleInput  
**Missing:** OnFocus, OnBlur (you must add these)  
**Handles:** All typing, backspace, cursor movement  
**Your Screen Must:** Add focus handlers if you want visual feedback

### ButtonComponent
**Built-in Methods:** HandleInput  
**Handles:** Space and Enter when focused (triggers OnClick)  
**Your Screen Must:** Set the OnClick handler

### ComboBox
**Built-in Methods:** HandleInput, OnFocus, OnBlur  
**Handles:** Dropdown navigation, selection  
**Your Screen Must:** Handle selection changes

### Panel
**Built-in Methods:** Basic rendering  
**Not Focusable:** By default (container only)  
**Your Screen Must:** Nothing - it's just a container

## THE STANDARD SCREEN PATTERN - USE THIS EVERY TIME

### 1. Constructor - Get ALL Services Here
```powershell
class MyScreen : Screen {
    # Declare ALL services as hidden fields
    hidden [NavigationService] $_navService
    hidden [DialogManager] $_dialogManager
    hidden [DataManager] $_dataManager
    hidden [FocusManager] $_focusManager
    
    MyScreen([object]$serviceContainer) : base("MyScreen", $serviceContainer) {
        # Get ALL services in constructor - NEVER in methods
        $this._navService = $serviceContainer.GetService("NavigationService")
        $this._dialogManager = $serviceContainer.GetService("DialogManager")
        $this._dataManager = $serviceContainer.GetService("DataManager")
        $this._focusManager = $serviceContainer.GetService("FocusManager")
    }
}
```
**WHY:** Services might be null if you get them in methods. Constructor runs once, reliably.

### 2. Initialize - Create Components
```powershell
[void] Initialize() {
    # Create main panel
    $this._panel = [Panel]::new("MainPanel")
    $this._panel.Width = $this.Width - 4
    $this._panel.Height = $this.Height - 4
    $this._panel.X = 2
    $this._panel.Y = 2
    $this.AddChild($this._panel)
    
    # Create list box
    $this._listBox = [ListBox]::new("ItemList")
    $this._listBox.IsFocusable = $true  # REQUIRED for interaction
    $this._listBox.TabIndex = 0         # First in tab order
    
    # Set event handler with closure
    $currentScreenRef = $this  # CRITICAL: Capture reference
    $this._listBox.SelectedIndexChanged = {
        param($sender, $index)
        $currentScreenRef._HandleSelectionChange($index)
    }.GetNewClosure()  # REQUIRED: Fixes context
    
    $this._panel.AddChild($this._listBox)
    
    # Create text box (needs focus handlers)
    $this._textBox = [TextBoxComponent]::new("SearchBox")
    $this._textBox.IsFocusable = $true
    $this._textBox.TabIndex = 1
    
    # Add missing focus handlers
    $this._textBox | Add-Member -MemberType ScriptMethod -Name OnFocus -Value {
        $this.BorderColor = Get-ThemeColor "primary.accent"
        $this.ShowCursor = $true
        $this.RequestRedraw()
    } -Force
    
    $this._textBox | Add-Member -MemberType ScriptMethod -Name OnBlur -Value {
        $this.BorderColor = Get-ThemeColor "border"
        $this.ShowCursor = $false
        $this.RequestRedraw()
    } -Force
    
    $this._panel.AddChild($this._textBox)
}
```

### 3. HandleInput - The EXACT Pattern
```powershell
[bool] HandleInput([System.ConsoleKeyInfo]$keyInfo) {
    if ($null -eq $keyInfo) { return $false }
    
    # Step 1: Get focused component CORRECTLY
    $focused = $this.GetFocusedChild()  # METHOD not property!
    
    # Step 2: Handle screen-level actions based on focused component
    switch ($keyInfo.Key) {
        ([ConsoleKey]::Enter) {
            # Different behavior based on what's focused
            if ($focused -eq $this._listBox -and $this._listBox.SelectedIndex -ge 0) {
                $this._EditSelectedItem()  # Screen decides action
                return $true
            }
            # Don't handle Enter for other components - they handle themselves
        }
        ([ConsoleKey]::Delete) {
            if ($focused -eq $this._listBox -and $this._listBox.SelectedIndex -ge 0) {
                $this._DeleteSelectedItem()
                return $true
            }
        }
        ([ConsoleKey]::Escape) {
            # Screen-level: go back
            if ($this._navService.CanGoBack()) {
                $this._navService.GoBack()
                return $true
            }
        }
        ([ConsoleKey]::F5) {
            # Screen-level: refresh
            $this._RefreshData()
            return $true
        }
    }
    
    # Step 3: Check for letter shortcuts
    switch ($keyInfo.KeyChar) {
        'n' { $this._ShowNewItemDialog(); return $true }
        'N' { $this._ShowNewItemDialog(); return $true }
    }
    
    # Step 4: Let base handle Tab and route to components
    # DO NOT handle Tab yourself!
    return ([Screen]$this).HandleInput($keyInfo)
}
```

### 4. OnEnter/OnExit - Lifecycle
```powershell
[void] OnEnter() {
    # Subscribe to events with captured reference
    $currentRef = $this
    $this.SubscribeToEvent("Data.Changed", {
        param($sender, $data)
        $currentRef._RefreshData()
    }.GetNewClosure())
    
    # Load initial data
    $this._RefreshData()
    
    # MUST call base to set initial focus
    ([Screen]$this).OnEnter()
}

[void] OnExit() {
    # Clear expensive resources if needed
    $this._listBox.ClearItems()
    
    # Base class handles event unsubscription automatically
    ([Screen]$this).OnExit()
}
```

### 5. Component Interaction Helpers
```powershell
hidden [void] _RefreshData() {
    $items = $this._dataManager.GetItems()
    $this._listBox.ClearItems()
    foreach ($item in $items) {
        $this._listBox.AddItem($item)
    }
}

hidden [void] _EditSelectedItem() {
    $selectedIndex = $this._listBox.SelectedIndex
    if ($selectedIndex -lt 0) { return }
    
    $item = $this._listBox.Items[$selectedIndex]
    $dialog = [EditDialog]::new($this.ServiceContainer, $item)
    $dialog.Initialize()
    $this._navService.NavigateTo($dialog)
}
```

## FOCUS MANAGEMENT - HOW IT REALLY WORKS

### The Truth About Focus
1.  **Screen** tracks ONE focused child component
2.  **Tab/Shift+Tab** cycles through focusable components automatically
3.  **Components** handle their own visual focus feedback
4.  **You** handle what actions do (Enter, Delete, etc.)

### What You DON'T Do
- Don't track focus manually
- Don't handle Tab (base Screen does this)
- Don't create focus loops
- Don't override component focus behavior

### What You DO
```powershell
# Check what has focus
$focused = $this.GetFocusedChild()

# Manually set focus when needed
$this._focusManager.SetFocus($this._textBox)

# Ensure components are focusable
$component.IsFocusable = $true
$component.TabIndex = 0  # 0, 1, 2... for tab order
```

## COMMON PATTERNS AND SOLUTIONS

### Pattern: Dialog for Input
```powershell
hidden [void] _ShowNewItemDialog() {
    $dialog = [NewItemDialog]::new($this.ServiceContainer)
    $dialog.Initialize()  # REQUIRED before navigation
    $this._navService.NavigateTo($dialog)
    # Dialog calls Complete($result) to return
}
```

### Pattern: Confirmation
```powershell
hidden [void] _DeleteSelectedItem() {
    $item = $this._GetSelectedItem()
    if ($null -eq $item) { return }
    
    $result = $this._dialogManager.ShowConfirmation(
        "Delete Item",
        "Are you sure you want to delete '$($item.Name)'?"
    )
    
    if ($result) {
        $this._dataManager.DeleteItem($item.Id)
        $this._RefreshData()
    }
}
```

### Pattern: Status Updates
```powershell
hidden [void] _UpdateStatus([string]$message, [string]$level = "Info") {
    if ($this._statusLabel) {
        $this._statusLabel.Text = $message
        $this._statusLabel.ForegroundColor = Get-ThemeColor $level
        $this.RequestRedraw()
    }
}
```

## DEBUGGING CHECKLIST

### Component Not Responding
```powershell
# Check these IN ORDER:
1. Is it focusable?
   $component.IsFocusable  # Must be $true

2. Is it in the screen?
   $this.Children  # Must contain component

3. Does it have focus?
   $focused = $this.GetFocusedChild()
   $focused -eq $component  # Should be $true

4. Is HandleInput returning true?
   # Add logging to component's HandleInput
```

### Focus Not Moving
```powershell
1. Are ALL interactive components focusable?
   $_.IsFocusable = $true

2. Do they have TabIndex set?
   $_.TabIndex = 0  # or 1, 2, 3...

3. Is screen calling base.OnEnter()?
   ([Screen]$this).OnEnter()  # Sets initial focus

4. Is screen NOT handling Tab key?
   # Should NOT have Tab case in HandleInput
```

### Enter Key Not Working
```powershell
1. ListBox does NOT handle Enter - this is correct!
2. Your screen MUST handle Enter:
   if ($focused -eq $this._listBox) {
       $this._DoSomething()
       return $true
   }
```

## THE GOLDEN RULES

1.  **One Way Only**: GetFocusedChild() is a method. Period.
2.  **Don't Override**: Never use Add-Member on existing methods.
3.  **Components Navigate, Screens Act**: Enter key is an action.
4.  **Capture References**: Use $currentRef = $this for closures.
5.  **Services in Constructor**: Never get services in methods.
6.  **No Inline If**: Always use separate statements in classes.
7.  **Tab is Automatic**: Never handle Tab yourself.
8.  **Theme Keys Lowercase**: All theme keys use lowercase.dots format.

## WHY THESE RULES EXIST

- **GetFocusedChild() as method**: Ensures fresh calculation every time
- **No component overrides**: Preserves designed behavior
- **Screen handles Enter**: Different screens need different actions
- **Captured references**: PowerShell closures have context issues
- **Services in constructor**: Prevents null reference errors
- **No inline if**: PowerShell parser limitation in classes
- **Automatic Tab**: Consistent navigation across all screens
- **Theme keys lowercase**: Registry lookup requires exact case match

Follow this guide EXACTLY. Every deviation breaks something.

## SCREEN INITIALIZATION - CRITICAL COMPONENT RECREATION BUG

### The Problem: Component Creation Happens Twice
**SYMPTOM**: Focus appears to be set but component doesn't respond to input
**ROOT CAUSE**: Backup files with same class name being loaded causes duplicate class definitions

### Real-World Case Study: SimpleTaskDialog Focus Issue
In July 2025, SimpleTaskDialog had a focus issue where:
- Initial focus was not set on TitleBox
- Multiple Tab presses were needed to move focus  
- Components appeared to have focus but didn't respond to input

### How the Bug Was Diagnosed
```powershell
# 1. Added component creation logging
if ($name -eq "TitleBox") {
    $timestamp = Get-Date -Format "HH:mm:ss.fff"
    "[$timestamp] TextBoxComponent CREATED: $name" | Out-File "/tmp/debug.log" -Append
}

# 2. Found the smoking gun - component created TWICE
[11:50:14.880] TextBoxComponent CREATED: TitleBox
[11:50:15.048] TextBoxComponent CREATED: TitleBox

# 3. Discovered the root cause
# Both files were being loaded by the framework:
# - Components/ACO.025_SimpleTaskDialog.ps1 (main)
# - Components/ACO.025_SimpleTaskDialog_BACKUP.ps1 (backup)
```

### Why This Breaks Focus
When PowerShell loads two files with the same class name:
1. **First instance** gets created and receives focus correctly
2. **Second instance** gets created with default `IsFocused = false`
3. **Focus system** points to first instance
4. **UI displays** second instance (last one created)
5. **Result**: Focus appears set but component doesn't respond

### The Fix
```powershell
# Remove ALL backup files from active directories
# Check for:
rm Components/*_BACKUP.ps1
rm Components/*.backup  
rm Screens/*.backup
rm **/*.old

# Verify no duplicates being loaded
Get-Content startup.log | Select-String "Dot-sourcing.*BACKUP"
```

### What NOT to Do
```powershell
# ❌ NEVER create backup files in active directories
MyClass.ps1.backup     # Framework may load both
MyClass_BACKUP.ps1     # Framework may load both
MyClass.old.ps1        # Framework may load both

# ❌ NEVER try to fix focus by adding more focus calls
$component.IsFocused = $true  # Won't fix recreation issue
$component.OnFocus()          # Won't fix recreation issue
```

### What TO Do
```powershell
# ✅ Create backups OUTSIDE the framework directories
mkdir ../backups
cp Components/MyClass.ps1 ../backups/MyClass_$(Get-Date -Format "yyyyMMdd").ps1

# ✅ Use proper initialization guards
[void] Initialize() {
    # Guard against multiple initialization calls
    if ($this._isInitialized) {
        Write-Log -Level Debug -Message "Already initialized, skipping"
        return
    }
    
    # Create components here
    $this._component = [ComponentType]::new("Name")
    
    # Set flag at END of initialization
    $this._isInitialized = $true
}
```

### Screen Creation Checklist
```powershell
class MyScreen : Screen {
    # 1. Hidden fields for components
    hidden [Panel] $_panel
    hidden [TextBoxComponent] $_textBox
    hidden [ButtonComponent] $_button
    hidden [bool] $_isInitialized = $false  # Inherited but good practice
    
    # 2. Services in constructor
    hidden $_navService
    MyScreen([object]$serviceContainer) : base("MyScreen", $serviceContainer) {
        $this._navService = $serviceContainer.GetService("NavigationService")
    }
    
    # 3. Initialization with guard
    [void] Initialize() {
        if ($this._isInitialized) { return }
        
        # Create components
        $this._panel = [Panel]::new("MainPanel")
        $this._textBox = [TextBoxComponent]::new("Input")
        $this._button = [ButtonComponent]::new("Submit")
        
        # Set focus properties
        $this._textBox.IsFocusable = $true
        $this._textBox.TabIndex = 0
        $this._button.IsFocusable = $true
        $this._button.TabIndex = 1
        
        # Add focus handlers to TextBox (required)
        $this._textBox | Add-Member -MemberType ScriptMethod -Name OnFocus -Value {
            $this.BorderColor = Get-ThemeColor "input.focused.border"
            $this.ShowCursor = $true
        } -Force
        
        $this._textBox | Add-Member -MemberType ScriptMethod -Name OnBlur -Value {
            $this.BorderColor = Get-ThemeColor "input.border"
            $this.ShowCursor = $false
        } -Force
        
        # Add children
        $this._panel.AddChild($this._textBox)
        $this._panel.AddChild($this._button)
        $this.AddChild($this._panel)
        
        # Set flag at END
        $this._isInitialized = $true
    }
    
    # 4. OnEnter calls base for focus
    [void] OnEnter() {
        ([Screen]$this).OnEnter()  # Sets initial focus
    }
}
```

### Directory Structure Rules
```
Framework/
├── Components/           # ACTIVE - no .backup files
│   ├── *.ps1            # Only current versions
│   └── NO_BACKUPS_HERE
├── Screens/             # ACTIVE - no .backup files  
│   ├── *.ps1            # Only current versions
│   └── NO_BACKUPS_HERE
└── ../backups/          # OUTSIDE framework
    ├── Component_20250715.ps1
    └── Screen_20250715.ps1
```

### Prevention Commands
```powershell
# Check for dangerous backup files
Get-ChildItem -Recurse -Filter "*.backup" | Remove-Item
Get-ChildItem -Recurse -Filter "*_BACKUP.ps1" | Remove-Item
Get-ChildItem -Recurse -Filter "*.old.ps1" | Remove-Item

# Verify no duplicates at startup
Get-Content startup.log | Select-String "Dot-sourcing" | Group-Object | Where-Object Count -gt 1
```

**REMEMBER**: Component recreation is a silent killer. Always check for backup files when focus mysteriously stops working.

```