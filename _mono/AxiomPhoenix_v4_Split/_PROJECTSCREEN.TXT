You are absolutely correct. My apologies once again for the misinterpretation. "Master-Detail" means a list of items on one side (the "Master"), and the details of the *currently selected* item on the *same screen* (the "Preview/Summary Detail"). Then, an explicit action (like hitting Enter) takes you to a *separate, full detail screen*.

This is a common and excellent UI pattern, and my previous attempts merged the "Master" and "Full Detail" aspects onto a single screen, which was not your intention for the primary `ProjectInfoScreen`.

Let's restructure this properly to implement a true Master-Detail flow:

1.  **New Screen: `ProjectListScreen` (The "Master" view with Summary Detail)**
    *   This will be the screen you land on from the Dashboard.
    *   It will have a left `ListBox` to display high-level project names/keys.
    *   It will have a right panel that displays *summary information* (Name, ID1, ID2, Status, Owner, Assigned Date, BF Date) of the *currently selected project* from the left list. This is the "preview" or "summary detail" part of the master screen.
    *   This screen will also show the quick actions/keybindings relevant to this master list (e.g., "Enter to view details", "N to New Project").

2.  **Refined Screen: `ProjectDetailScreen` (The "Full Detail" view)**
    *   This will be a **separate screen** that `ProjectListScreen` navigates to.
    *   It will take a `PmcProject` object in its constructor.
    *   It will contain *all* the extensive details: full description, associated tasks list, client documents list, periods, auditor info, and explicit file-opening actions (F3, F4, F5, F6).
    *   This is essentially the `ProjectInfoScreen` I built in the last iteration, but it's now called `ProjectDetailScreen` and is reached by a navigation action, not directly from the dashboard.

**Here's the full plan and complete code blocks:**

---

### **FULL AND COMPLETE DOCUMENT: Axiom-Phoenix Project Management UI**

---

### 1. **`Models\AMO.003_CoreModelClasses.ps1`**

*(This file remains **unchanged** from the last correct version. The additions of `ID1`, `ID2`, `AssignedDate`, `BFDate`, `ProjectFolderPath`, `CaaFileName`, `RequestFileName`, and `T2020FileName` were correct and are foundational for both Project screens.)*

```powershell
# ==============================================================================
# Axiom-Phoenix v4.0 - All Models (No UI Dependencies) - UPDATED
# Data models, enums, and validation classes
# ==============================================================================
#
# TABLE OF CONTENTS DIRECTIVE:
# When modifying this file, ensure page markers remain accurate and update
# TableOfContents.md to reflect any structural changes.
#
# Search for "PAGE: AMO.###" to find specific sections.
# Each section ends with "END_PAGE: AMO.###"
# ==============================================================================

#region Core Model Classes

# ===== CLASS: PmcTask =====
# Module: models (from axiom)
# Dependencies: ValidationBase, TaskStatus, TaskPriority enums
# Purpose: Represents a single task with lifecycle methods
class PmcTask : ValidationBase {
    [string]$Id = [Guid]::NewGuid().ToString() # Unique identifier for the task
    [string]$Title                            # Short descriptive title
    [string]$Description                      # Detailed description
    [TaskStatus]$Status = [TaskStatus]::Pending # Current status of the task
    [TaskPriority]$Priority = [TaskPriority]::Medium # Importance level
    [string]$ProjectKey = "General"           # Associated project (key)
    [string]$Category                         # Alias for ProjectKey, for broader use
    [datetime]$CreatedAt = [datetime]::Now   # Timestamp of creation
    [datetime]$UpdatedAt = [datetime]::Now   # Last update timestamp
    [Nullable[datetime]]$DueDate             # Optional due date
    [string[]]$Tags = @()                     # Array of tags
    [int]$Progress = 0                        # Progress percentage (0-100)
    [bool]$Completed = $false                 # Convenience flag for completed status

    # Default constructor: Initializes a new task with default values.
    PmcTask() {}
    
    # Constructor: Initializes a new task with a title.
    PmcTask([string]$title) {
        [ValidationBase]::ValidateNotEmpty($title, "Title")
        $this.Title = $title
    }
    
    # Constructor: Initializes a new task with common detailed properties.
    PmcTask(
        [string]$title,
        [string]$description,
        [TaskPriority]$priority,
        [string]$projectKey
    ) {
        [ValidationBase]::ValidateNotEmpty($title, "Title")
        [ValidationBase]::ValidateNotEmpty($projectKey, "ProjectKey")

        $this.Title = $title
        $this.Description = $description
        $this.Priority = $priority
        $this.ProjectKey = $projectKey
        $this.Category = $projectKey # Category is often an alias for ProjectKey
    }

    # Complete: Marks the task as completed, setting progress to 100% and updating timestamp.
    [void] Complete() {
        $this.Status = [TaskStatus]::Completed
        $this.Progress = 100
        $this.Completed = $true
        $this.UpdatedAt = [datetime]::Now
    }
    
    # Cancel: Marks the task as cancelled and updates timestamp.
    [void] Cancel() {
        $this.Status = [TaskStatus]::Cancelled
        $this.UpdatedAt = [datetime]::Now
    }
    
    # SetProgress: Updates the progress percentage and adjusts status accordingly.
    [void] SetProgress([int]$progress) {
        if ($progress -lt 0 -or $progress -gt 100) {
            throw [System.ArgumentOutOfRangeException]::new("progress", "Progress must be between 0 and 100.")
        }
        
        $this.Progress = $progress
        
        # Auto-update status based on progress
        if ($progress -eq 0 -and $this.Status -eq [TaskStatus]::InProgress) {
            $this.Status = [TaskStatus]::Pending
        }
        elseif ($progress -gt 0 -and $progress -lt 100) {
            $this.Status = [TaskStatus]::InProgress
        }
        elseif ($progress -eq 100) {
            $this.Complete()
        }
        
        $this.UpdatedAt = [datetime]::Now
    }
    
    # AddTag: Adds a tag to the task if not already present.
    [void] AddTag([string]$tag) {
        [ValidationBase]::ValidateNotEmpty($tag, "Tag")
        if ($this.Tags -notcontains $tag) {
            $this.Tags += $tag
            $this.UpdatedAt = [datetime]::Now
        }
    }
    
    # RemoveTag: Removes a tag from the task.
    [void] RemoveTag([string]$tag) {
        $this.Tags = $this.Tags | Where-Object { $_ -ne $tag }
        $this.UpdatedAt = [datetime]::Now
    }
    
    # GetAge: Returns the age of the task as a TimeSpan.
    [TimeSpan] GetAge() {
        return [datetime]::Now - $this.CreatedAt
    }
    
    # IsOverdue: Checks if the task is overdue based on DueDate.
    [bool] IsOverdue() {
        if ($null -eq $this.DueDate) { return $false }
        if ($this.Status -in @([TaskStatus]::Completed, [TaskStatus]::Cancelled)) { return $false }
        return [datetime]::Now -gt $this.DueDate
    }
    
    # Clone: Creates a deep copy of the task with a new ID.
    [PmcTask] Clone() {
        $clone = [PmcTask]::new()
        $clone.Title = $this.Title
        $clone.Description = $this.Description
        $clone.Status = $this.Status
        $clone.Priority = $this.Priority
        $clone.ProjectKey = $this.ProjectKey
        $clone.Category = $this.Category
        $clone.DueDate = $this.DueDate
        $clone.Tags = $this.Tags.Clone()
        $clone.Progress = $this.Progress
        $clone.Completed = $this.Completed
        # New task gets new timestamps and ID
        $clone.CreatedAt = [datetime]::Now
        $clone.UpdatedAt = [datetime]::Now
        return $clone
    }
    
    # ToLegacyFormat: Converts task to hashtable for JSON serialization
    [hashtable] ToLegacyFormat() {
        return @{
            Id = $this.Id
            Title = $this.Title
            Description = $this.Description
            Status = $this.Status.ToString()
            Priority = $this.Priority.ToString()
            ProjectKey = $this.ProjectKey
            Category = $this.Category
            CreatedAt = $this.CreatedAt.ToString("yyyy-MM-ddTHH:mm:ss")
            UpdatedAt = $this.UpdatedAt.ToString("yyyy-MM-ddTHH:mm:ss")
            DueDate = if ($this.DueDate) { $this.DueDate.ToString("yyyy-MM-ddTHH:mm:ss") } else { $null }
            Tags = $this.Tags
            Progress = $this.Progress
            Completed = $this.Completed
        }
    }
    
    # FromLegacyFormat: Creates task from hashtable (JSON deserialization)
    static [PmcTask] FromLegacyFormat([hashtable]$data) {
        $task = [PmcTask]::new()
        
        if ($data.ContainsKey('Id')) { $task.Id = $data.Id }
        if ($data.ContainsKey('Title')) { $task.Title = $data.Title }
        if ($data.ContainsKey('Description')) { $task.Description = $data.Description }
        if ($data.ContainsKey('Status')) { 
            $task.Status = [System.Enum]::Parse([TaskStatus], $data.Status, $true)
        }
        if ($data.ContainsKey('Priority')) { 
            $task.Priority = [System.Enum]::Parse([TaskPriority], $data.Priority, $true)
        }
        if ($data.ContainsKey('ProjectKey')) { $task.ProjectKey = $data.ProjectKey }
        if ($data.ContainsKey('Category')) { $task.Category = $data.Category }
        if ($data.ContainsKey('CreatedAt')) { 
            $task.CreatedAt = [DateTime]::Parse($data.CreatedAt)
        }
        if ($data.ContainsKey('UpdatedAt')) { 
            $task.UpdatedAt = [DateTime]::Parse($data.UpdatedAt)
        }
        if ($data.ContainsKey('DueDate') -and $data.DueDate) { 
            $task.DueDate = [DateTime]::Parse($data.DueDate)
        }
        if ($data.ContainsKey('Tags')) { $task.Tags = @($data.Tags) }
        if ($data.ContainsKey('Progress')) { $task.Progress = [int]$data.Progress }
        if ($data.ContainsKey('Completed')) { $task.Completed = [bool]$data.Completed }
        
        return $task
    }
    
    # ToString: Returns a string representation of the task.
    [string] ToString() {
        $statusSymbol = switch ($this.Status) {
            ([TaskStatus]::Pending) { "○" }
            ([TaskStatus]::InProgress) { "◐" }
            ([TaskStatus]::Completed) { "●" }
            ([TaskStatus]::Cancelled) { "✕" }
            default { "?" }
        }
        
        $prioritySymbol = switch ($this.Priority) {
            ([TaskPriority]::Low) { "↓" }
            ([TaskPriority]::Medium) { "→" }
            ([TaskPriority]::High) { "↑" }
            default { "-" }
        }
        
        $overdueFlag = if ($this.IsOverdue()) { " [OVERDUE]" } else { "" }
        
        return "$statusSymbol $prioritySymbol $($this.Title) ($($this.Progress)%)$overdueFlag"
    }
}

# ===== CLASS: PmcProject =====
# Module: models (from axiom)
# Dependencies: ValidationBase
# Purpose: Represents a project that contains multiple tasks
class PmcProject : ValidationBase {
    [string]$Key                              # Unique project key (e.g., "PROJ-001")
    [string]$Name                             # Project name
    [string]$Description                      # Project description
    [DateTime]$CreatedAt = [DateTime]::Now  # Creation timestamp
    [DateTime]$UpdatedAt = [DateTime]::Now  # Last update timestamp
    [string]$Owner                           # Project owner
    [string[]]$Tags = @()                    # Project tags
    [hashtable]$Metadata = @{}               # Additional project metadata
    [bool]$IsActive = $true                  # Whether project is active
    
    # Enhanced properties from reference implementation
    [string]$ID1                             # Optional secondary identifier (matches 101 - non-unique)
    [string]$ID2                             # NEW: Main Case ID (matches 102 - Main case ID)
    [Nullable[datetime]]$AssignedDate        # NEW: Assigned Date
    [Nullable[datetime]]$BFDate              # Bring-Forward date for follow-ups (matches Due Date in image)
    [string]$ProjectFolderPath               # Full path to the project's root folder on disk
    [string]$CaaFileName                     # Relative name of the associated CAA file
    [string]$RequestFileName                 # Relative name of the associated Request file
    [string]$T2020FileName                   # Relative name of the associated T2020 file

    # Default constructor
    PmcProject() {}

    # Constructor with key and name
    PmcProject([string]$key, [string]$name) {
        [ValidationBase]::ValidateNotEmpty($key, "Key")
        [ValidationBase]::ValidateNotEmpty($name, "Name")
        $this.Key = $key
        $this.Name = $name
    }

    # Constructor with full details
    PmcProject([string]$key, [string]$name, [string]$description, [string]$owner) {
        [ValidationBase]::ValidateNotEmpty($key, "Key")
        [ValidationBase]::ValidateNotEmpty($name, "Name")
        [ValidationBase]::ValidateNotEmpty($owner, "Owner")
        
        $this.Key = $key
        $this.Name = $name
        $this.Description = $description
        $this.Owner = $owner
    }

    # Archive: Marks the project as inactive
    [void] Archive() {
        $this.IsActive = $false
        $this.UpdatedAt = [DateTime]::Now
    }

    # Activate: Marks the project as active
    [void] Activate() {
        $this.IsActive = $true
        $this.UpdatedAt = [DateTime]::Now
    }

    # AddTag: Adds a tag to the project if not already present
    [void] AddTag([string]$tag) {
        [ValidationBase]::ValidateNotEmpty($tag, "Tag")
        if ($this.Tags -notcontains $tag) {
            $this.Tags += $tag
            $this.UpdatedAt = [DateTime]::Now
        }
    }

    # RemoveTag: Removes a tag from the project.
    [void] RemoveTag([string]$tag) {
        $this.Tags = $this.Tags | Where-Object { $_ -ne $tag }
        $this.UpdatedAt = [DateTime]::Now
    }

    # SetMetadata: Sets a metadata key-value pair
    [void] SetMetadata([string]$key, $value) {
        [ValidationBase]::ValidateNotEmpty($key, "Key")
        $this.Metadata[$key] = $value
        $this.UpdatedAt = [DateTime]::Now
    }

    # GetMetadata: Gets a metadata value by key
    [object] GetMetadata([string]$key) {
        return $this.Metadata[$key]
    }
    
    # ToLegacyFormat: Converts project to hashtable for JSON serialization
    [hashtable] ToLegacyFormat() {
        return @{
            Key = $this.Key
            Name = $this.Name
            Description = $this.Description
            CreatedAt = $this.CreatedAt.ToString("yyyy-MM-ddTHH:mm:ss")
            UpdatedAt = $this.UpdatedAt.ToString("yyyy-MM-ddTHH:mm:ss")
            Owner = $this.Owner
            Tags = $this.Tags
            Metadata = $this.Metadata.Clone()
            IsActive = $this.IsActive
            # NEW Properties
            ID1 = $this.ID1
            ID2 = $this.ID2
            AssignedDate = if ($this.AssignedDate) { $this.AssignedDate.ToString("yyyy-MM-ddTHH:mm:ss") } else { $null }
            BFDate = if ($this.BFDate) { $this.BFDate.ToString("yyyy-MM-ddTHH:mm:ss") } else { $null }
            ProjectFolderPath = $this.ProjectFolderPath
            CaaFileName = $this.CaaFileName
            RequestFileName = $this.RequestFileName
            T2020FileName = $this.T2020FileName
        }
    }
    
    # FromLegacyFormat: Creates project from hashtable (JSON deserialization)
    static [PmcProject] FromLegacyFormat([hashtable]$data) {
        $project = [PmcProject]::new()
        
        if ($data.ContainsKey('Key')) { $project.Key = $data.Key }
        if ($data.ContainsKey('Name')) { $project.Name = $data.Name }
        if ($data.ContainsKey('Description')) { $project.Description = $data.Description }
        if ($data.ContainsKey('CreatedAt')) { 
            $project.CreatedAt = [DateTime]::Parse($data.CreatedAt)
        }
        if ($data.ContainsKey('UpdatedAt')) { 
            $project.UpdatedAt = [DateTime]::Parse($data.UpdatedAt)
        }
        if ($data.ContainsKey('Owner')) { $project.Owner = $data.Owner }
        if ($data.ContainsKey('Tags')) { $project.Tags = @($data.Tags) }
        if ($data.ContainsKey('Metadata')) { $project.Metadata = $data.Metadata.Clone() }
        if ($data.ContainsKey('IsActive')) { $project.IsActive = [bool]$data.IsActive }
        # NEW Properties
        if ($data.ContainsKey('ID1')) { $project.ID1 = $data.ID1 }
        if ($data.ContainsKey('ID2')) { $project.ID2 = $data.ID2 }
        if ($data.ContainsKey('AssignedDate') -and $data.AssignedDate) { 
            $project.AssignedDate = [DateTime]::Parse($data.AssignedDate)
        }
        if ($data.ContainsKey('BFDate') -and $data.BFDate) { 
            $project.BFDate = [DateTime]::Parse($data.BFDate)
        }
        if ($data.ContainsKey('ProjectFolderPath')) { $project.ProjectFolderPath = $data.ProjectFolderPath }
        if ($data.ContainsKey('CaaFileName')) { $project.CaaFileName = $data.CaaFileName }
        if ($data.ContainsKey('RequestFileName')) { $project.RequestFileName = $data.RequestFileName }
        if ($data.ContainsKey('T2020FileName')) { $project.T2020FileName = $data.T2020FileName }
        
        return $project
    }

    # ToString: Returns a string representation of the project
    [string] ToString() {
        $status = if ($this.IsActive) { "Active" } else { "Archived" }
        return "[$($this.Key)] $($this.Name) - $status"
    }
}

# ===== CLASS: TimeEntry =====
# Module: models (from axiom)
# Dependencies: ValidationBase, BillingType enum
# Purpose: Represents a time entry for a task
class TimeEntry : ValidationBase {
    [string]$Id = [Guid]::NewGuid().ToString()  # Unique identifier
    [string]$TaskId                              # Associated task ID
    [string]$ProjectKey                          # Associated project key
    [DateTime]$StartTime                         # When work started
    [Nullable[DateTime]]$EndTime                 # When work ended (null if ongoing)
    [string]$Description                         # What was done
    [BillingType]$BillingType = [BillingType]::Billable # Billing classification
    [string]$UserId                              # Who logged the time
    [decimal]$HourlyRate = 0                    # Rate per hour (if applicable)
    [hashtable]$Metadata = @{}                   # Additional metadata

    # Default constructor
    TimeEntry() {}

    # Constructor with basic details
    TimeEntry([string]$taskId, [string]$projectKey, [DateTime]$startTime) {
        [ValidationBase]::ValidateNotEmpty($taskId, "TaskId")
        [ValidationBase]::ValidateNotEmpty($projectKey, "ProjectKey")
        
        $this.TaskId = $taskId
        $this.ProjectKey = $projectKey
        $this.StartTime = $startTime
    }

    # GetDuration: Returns the duration of the time entry
    [TimeSpan] GetDuration() {
        if ($null -eq $this.EndTime) {
            return [DateTime]::Now - $this.StartTime
        }
        return $this.EndTime - $this.StartTime
    }

    # GetHours: Returns the duration in decimal hours
    [decimal] GetHours() {
        return [decimal]($this.GetDuration().TotalHours)
    }

    # GetTotalValue: Returns the monetary value of the time entry
    [decimal] GetTotalValue() {
        if ($this.BillingType -eq [BillingType]::NonBillable) {
            return 0
        }
        return $this.GetHours() * $this.HourlyRate
    }

    # Stop: Stops the timer on this entry
    [void] Stop() {
        if ($null -eq $this.EndTime) {
            $this.EndTime = [DateTime]::Now
        }
    }

    # IsRunning: Checks if the time entry is still running
    [bool] IsRunning() {
        return $null -eq $this.EndTime
    }

    # ToString: Returns a string representation of the time entry
    [string] ToString() {
        $duration = $this.GetDuration()
        $status = if ($this.IsRunning()) { "Running" } else { "Completed" }
        return "$($this.ProjectKey) - $($duration.ToString('hh\:mm\:ss')) [$status]"
    }
}

#endregion
#<!-- END_PAGE: AMO.003 -->
```

---

### 2. **`Screens\ASC.007_ProjectListScreen.ps1` (NEW FILE - The Master View)**

Create this new file.

```powershell
# ==============================================================================
# Axiom-Phoenix v4.0 - Project List Screen (Master-Detail Summary View)
# Displays a list of projects (master) and summary details of the selected project (detail preview).
# Allows navigation to a full detail screen.
# ==============================================================================

using namespace System.Collections.Generic

class ProjectListScreen : Screen {
    hidden [Panel] $_mainPanel
    hidden [Panel] $_projectListPanel      # Left panel for project list
    hidden [Panel] $_summaryDetailsPanel   # Right panel for selected project's summary details
    hidden [ListBox] $_projectListBox
    
    # Labels for summary details
    hidden [LabelComponent] $_summaryNameLabel
    hidden [LabelComponent] $_summaryID1Label
    hidden [LabelComponent] $_summaryID2Label
    hidden [LabelComponent] $_summaryBNLabel
    hidden [LabelComponent] $_summaryAssignedDateLabel
    hidden [LabelComponent] $_summaryBFDateLabel
    hidden [LabelComponent] $_summaryOwnerLabel
    hidden [LabelComponent] $_summaryStatusLabel
    hidden [LabelComponent] $_summaryTaskCountLabel # NEW: show task count in summary
    
    hidden [System.Collections.Generic.List[PmcProject]] $_allProjects # Cached list of all projects
    hidden [PmcProject] $_selectedProjectSummary # The project whose summary is currently shown
    
    hidden [DataManager] $_dataManager   # Injected service
    hidden [NavigationService] $_navService # Injected service
    hidden [FocusManager] $_focusManager # Injected service

    ProjectListScreen([object]$serviceContainer) : base("ProjectListScreen", $serviceContainer) {
        $this._dataManager = $serviceContainer.GetService("DataManager")
        $this._navService = $serviceContainer.GetService("NavigationService")
        $this._focusManager = $serviceContainer.GetService("FocusManager")
        $this.Title = " Project Overview " # Screen title
    }

    [void] Initialize() {
        # Ensure minimum size
        if ($this.Width -lt 120) { $this.Width = 120 }
        if ($this.Height -lt 30) { $this.Height = 30 }

        # Main panel covering the whole screen
        $this._mainPanel = [Panel]::new("ProjectMasterMainPanel")
        $this._mainPanel.X = 0
        $this._mainPanel.Y = 0
        $this._mainPanel.Width = $this.Width
        $this._mainPanel.Height = $this.Height
        $this._mainPanel.Title = " Project Overview "
        $this._mainPanel.BorderStyle = "Double"
        $this._mainPanel.BorderColor = Get-ThemeColor "Primary"
        $this._mainPanel.BackgroundColor = Get-ThemeColor "Background"
        $this.AddChild($this._mainPanel)

        # Calculate panel dimensions
        $leftPanelWidth = [Math]::Floor($this.Width * 0.4) # 40% for project list (master)
        $rightPanelWidth = $this.Width - $leftPanelWidth - 3 # Remaining for summary details

        # --- LEFT PANEL: Project List (Master View) ---
        $this._projectListPanel = [Panel]::new("ProjectListPanel")
        $this._projectListPanel.X = 1
        $this._projectListPanel.Y = 1
        $this._projectListPanel.Width = $leftPanelWidth
        $this._projectListPanel.Height = $this.Height - 4 # Leave space for bottom instructions
        $this._projectListPanel.Title = " Active Projects "
        $this._projectListPanel.BorderStyle = "Single"
        $this._projectListPanel.BorderColor = Get-ThemeColor "component.border"
        $this._mainPanel.AddChild($this._projectListPanel)

        $this._projectListBox = [ListBox]::new("ProjectListBox")
        $this._projectListBox.X = 1
        $this._projectListBox.Y = 1
        $this._projectListBox.Width = $this._projectListPanel.ContentWidth - 2
        $this._projectListBox.Height = $this._projectListPanel.ContentHeight - 2
        $this._projectListBox.HasBorder = $false
        $this._projectListBox.SelectedBackgroundColor = Get-ThemeColor "list.selected.bg"
        $this._projectListBox.SelectedForegroundColor = Get-ThemeColor "list.selected.fg"
        $this._projectListBox.ItemForegroundColor = Get-ThemeColor "list.item.fg"
        $this._projectListBox.IsFocusable = $true # This is the primary focusable component
        
        $currentScreenRef = $this # Capture $this for scriptblock closure
        $this._projectListBox.SelectedIndexChanged = {
            param($sender, $index)
            if ($index -ge 0 -and $index -lt $currentScreenRef._allProjects.Count) {
                $currentScreenRef._selectedProjectSummary = $currentScreenRef._allProjects[$index]
                $currentScreenRef._UpdateSummaryDetailsPanel()
            } else {
                $currentScreenRef._selectedProjectSummary = $null
                $currentScreenRef._ClearSummaryDetailsPanel()
            }
            $currentScreenRef.RequestRedraw()
        }.GetNewClosure()
        $this._projectListPanel.AddChild($this._projectListBox)

        # --- RIGHT PANEL: Summary Details (Detail Preview View) ---
        $this._summaryDetailsPanel = [Panel]::new("ProjectSummaryDetailsPanel")
        $this._summaryDetailsPanel.X = $leftPanelWidth + 2
        $this._summaryDetailsPanel.Y = 1
        $this._summaryDetailsPanel.Width = $rightPanelWidth
        $this._summaryDetailsPanel.Height = $this.Height - 4 # Same height as left panel
        $this._summaryDetailsPanel.Title = " Selected Project Summary "
        $this._summaryDetailsPanel.BorderStyle = "Single"
        $this._summaryDetailsPanel.BorderColor = Get-ThemeColor "component.border"
        $this._summaryDetailsPanel.BackgroundColor = Get-ThemeColor "panel.bg"
        $this._mainPanel.AddChild($this._summaryDetailsPanel)

        # Add labels for summary details - these will be updated dynamically
        $labelX = 2 # Label column start X
        $valueX = 18 # Value column start X relative to panel content
        $lblWidth = 15 # Fixed width for label text
        $valWidth = $this._summaryDetailsPanel.ContentWidth - $valueX - 1 # Max width for value text

        $currentY = 1
        $lblStyle = @{ ForegroundColor = (Get-ThemeColor "label"); Width = $lblWidth; Height = 1 }
        $valStyle = @{ ForegroundColor = (Get-ThemeColor "Foreground"); Width = $valWidth; Height = 1 }

        # Name
        $this._summaryDetailsPanel.AddChild((New-TuiLabel "lblSummaryName" "Name:" $labelX $currentY -Style $lblStyle))
        $this._summaryNameLabel = (New-TuiLabel "valSummaryName" "N/A" $valueX $currentY -Style $valStyle)
        $this._summaryDetailsPanel.AddChild($this._summaryNameLabel)
        $currentY += 1

        # ID 1 (Non-Unique)
        $this._summaryDetailsPanel.AddChild((New-TuiLabel "lblSummaryID1" "ID 1:" $labelX $currentY -Style $lblStyle))
        $this._summaryID1Label = (New-TuiLabel "valSummaryID1" "N/A" $valueX $currentY -Style $valStyle)
        $this._summaryDetailsPanel.AddChild($this._summaryID1Label)
        $currentY += 1

        # ID 2 (Main Case ID)
        $this._summaryDetailsPanel.AddChild((New-TuiLabel "lblSummaryID2" "ID 2:" $labelX $currentY -Style $lblStyle))
        $this._summaryID2Label = (New-TuiLabel "valSummaryID2" "N/A" $valueX $currentY -Style $valStyle)
        $this._summaryDetailsPanel.AddChild($this._summaryID2Label)
        $currentY += 1

        # Client ID (BN) - from metadata
        $this._summaryDetailsPanel.AddChild((New-TuiLabel "lblSummaryBN" "Client ID (BN):" $labelX $currentY -Style $lblStyle))
        $this._summaryBNLabel = (New-TuiLabel "valSummaryBN" "N/A" $valueX $currentY -Style $valStyle)
        $this._summaryDetailsPanel.AddChild($this._summaryBNLabel)
        $currentY += 1

        # Assigned Date
        $this._summaryDetailsPanel.AddChild((New-TuiLabel "lblSummaryAssignedDate" "Assigned Date:" $labelX $currentY -Style $lblStyle))
        $this._summaryAssignedDateLabel = (New-TuiLabel "valSummaryAssignedDate" "N/A" $valueX $currentY -Style $valStyle)
        $this._summaryDetailsPanel.AddChild($this._summaryAssignedDateLabel)
        $currentY += 1

        # Due Date (BF Date)
        $this._summaryDetailsPanel.AddChild((New-TuiLabel "lblSummaryBFDate" "Due Date (BF):" $labelX $currentY -Style $lblStyle))
        $this._summaryBFDateLabel = (New-TuiLabel "valSummaryBFDate" "N/A" $valueX $currentY -Style $valStyle)
        $this._summaryDetailsPanel.AddChild($this._summaryBFDateLabel)
        $currentY += 1

        # Owner
        $this._summaryDetailsPanel.AddChild((New-TuiLabel "lblSummaryOwner" "Owner:" $labelX $currentY -Style $lblStyle))
        $this._summaryOwnerLabel = (New-TuiLabel "valSummaryOwner" "N/A" $valueX $currentY -Style $valStyle)
        $this._summaryDetailsPanel.AddChild($this._summaryOwnerLabel)
        $currentY += 1
        
        # Status
        $this._summaryDetailsPanel.AddChild((New-TuiLabel "lblSummaryStatus" "Status:" $labelX $currentY -Style $lblStyle))
        $this._summaryStatusLabel = (New-TuiLabel "valSummaryStatus" "N/A" $valueX $currentY -Style $valStyle)
        $this._summaryDetailsPanel.AddChild($this._summaryStatusLabel)
        $currentY += 1

        # Task Count
        $this._summaryDetailsPanel.AddChild((New-TuiLabel "lblSummaryTaskCount" "Associated Tasks:" $labelX $currentY -Style $lblStyle))
        $this._summaryTaskCountLabel = (New-TuiLabel "valSummaryTaskCount" "N/A" $valueX $currentY -Style $valStyle)
        $this._summaryDetailsPanel.AddChild($this._summaryTaskCountLabel)
        $currentY += 1

        # Instructions for the screen
        $instructions = [LabelComponent]::new("Instructions")
        $instructions.Text = "↑↓: Select | Enter: View Details | Tab: Switch Pane | F3: Open Folder | ESC: Back"
        $instructions.X = 1
        $instructions.Y = $this.Height - 2
        $instructions.ForegroundColor = Get-ThemeColor "Subtle"
        $this._mainPanel.AddChild($instructions)
    }

    [void] OnEnter() {
        Write-Log -Level Debug -Message "ProjectListScreen.OnEnter: Activating screen."
        
        # Load all projects
        $this._allProjects = [System.Collections.Generic.List[PmcProject]]::new($this._dataManager.GetProjects())
        $this._projectListBox.ClearItems()
        
        if ($this._allProjects.Count -gt 0) {
            foreach ($project in $this._allProjects) {
                # Display only Key and Name in the master list
                $this._projectListBox.AddItem("$($project.Key) - $($project.Name)")
            }
            $this._projectListBox.SelectedIndex = 0 # Select first project by default
            # Trigger summary update for the initially selected project
            $this._selectedProjectSummary = $this._allProjects[0]
            $this._UpdateSummaryDetailsPanel()
        } else {
            $this._projectListBox.AddItem("No projects found. Press 'N' for New Project.") # TODO: add hotkey for new project
            $this._projectListBox.SelectedIndex = -1
            $this._ClearSummaryDetailsPanel()
        }

        # Set initial focus to the project list
        if ($this._focusManager) {
            Write-Log -Level Debug -Message "ProjectListScreen.OnEnter: Setting initial focus to ProjectListBox."
            $this._focusManager.SetFocus($this._projectListBox)
        }

        $this.RequestRedraw()
        ([Screen]$this).OnEnter() # Call base OnEnter
    }

    [void] OnExit() {
        Write-Log -Level Debug -Message "ProjectListScreen.OnExit: Deactivating screen."
        $this._selectedProjectSummary = $null
        $this._allProjects.Clear()
        $this._projectListBox.ClearItems()
        $this._ClearSummaryDetailsPanel() # Clear content visually
        ([Screen]$this).OnExit() # Call base OnExit
    }

    hidden [void] _ClearSummaryDetailsPanel() {
        $this._summaryNameLabel.Text = "N/A"
        $this._summaryID1Label.Text = "N/A"
        $this._summaryID2Label.Text = "N/A"
        $this._summaryBNLabel.Text = "N/A"
        $this._summaryAssignedDateLabel.Text = "N/A"
        $this._summaryBFDateLabel.Text = "N/A"
        $this._summaryOwnerLabel.Text = "N/A"
        $this._summaryStatusLabel.Text = "N/A"
        $this._summaryTaskCountLabel.Text = "N/A"
        $this.RequestRedraw()
    }

    hidden [void] _UpdateSummaryDetailsPanel() {
        if ($null -eq $this._selectedProjectSummary) {
            $this._ClearSummaryDetailsPanel()
            Write-Log -Level Debug -Message "ProjectListScreen: No project selected to update summary panel."
            return
        }

        Write-Log -Level Debug -Message "ProjectListScreen: Updating summary for project: $($this._selectedProjectSummary.Name)"
        
        $proj = $this._selectedProjectSummary
        $this._summaryNameLabel.Text = $proj.Name
        $this._summaryID1Label.Text = if ($proj.ID1) { $proj.ID1 } else { "N/A" }
        $this._summaryID2Label.Text = if ($proj.ID2) { $proj.ID2 } else { "N/A" }
        $this._summaryBNLabel.Text = if ($proj.Metadata['ClientID']) { $proj.Metadata['ClientID'] } else { "N/A" }
        $this._summaryAssignedDateLabel.Text = if ($proj.AssignedDate) { $proj.AssignedDate.ToString("yyyy-MM-dd") } else { "N/A" }
        $this._summaryBFDateLabel.Text = if ($proj.BFDate) { $proj.BFDate.ToString("yyyy-MM-dd") } else { "N/A" }
        $this._summaryOwnerLabel.Text = if ($proj.Owner) { $proj.Owner } else { "N/A" }
        $this._summaryStatusLabel.Text = if ($proj.IsActive) { "Active" } else { "Archived" }
        
        # Count associated tasks
        $tasks = $this._dataManager.GetTasksByProject($proj.Key)
        $this._summaryTaskCountLabel.Text = "$($tasks.Count) tasks"
        
        $this.RequestRedraw()
    }

    hidden [void] _NavigateToProjectDetail() {
        if ($null -ne $this._selectedProjectSummary) {
            Write-Log -Level Debug -Message "ProjectListScreen: Navigating to ProjectDetailScreen for $($this._selectedProjectSummary.Name)."
            # Create and navigate to the full detail screen, passing the selected project
            $projectDetailScreen = [ProjectDetailScreen]::new($this.ServiceContainer, $this._selectedProjectSummary)
            $projectDetailScreen.Initialize() # Initialize the new screen
            $this._navService.NavigateTo($projectDetailScreen)
        } else {
            # Optionally show an alert if no project is selected
            # $this._dialogManager.ShowAlert("Selection Error", "Please select a project to view details.")
            Write-Log -Level Warning -Message "ProjectListScreen: Attempted to view details without a selected project."
        }
    }

    hidden [void] _OpenProjectFolder() {
        if ($this._selectedProjectSummary -and $this._selectedProjectSummary.ProjectFolderPath) {
            try {
                Invoke-Item -Path $this._selectedProjectSummary.ProjectFolderPath -ErrorAction Stop
                # Show a temporary status message
                $statusLabel = [LabelComponent]::new("TempStatus")
                $statusLabel.Text = "Opened folder: $($this._selectedProjectSummary.ProjectFolderPath)"
                $statusLabel.X = 1
                $statusLabel.Y = $this.Height - 3 # Place above instructions
                $statusLabel.Width = $this.Width - 2 # Span full width
                $statusLabel.ForegroundColor = Get-ThemeColor "Success"
                $this._mainPanel.AddChild($statusLabel)
                $this.RequestRedraw()
                Start-Sleep -Milliseconds 2000
                $this._mainPanel.RemoveChild($statusLabel)
                $this.RequestRedraw()
            } catch {
                $this._dialogManager.ShowAlert("Error", "Failed to open folder:`n$($_.Exception.Message)")
            }
        } else {
            $this._dialogManager.ShowAlert("Info", "No project selected or folder path is missing.")
        }
    }

    [bool] HandleInput([System.ConsoleKeyInfo]$keyInfo) {
        if ($null -eq $keyInfo) { return $false }

        $handled = $false
        $focusedComponent = $this._focusManager.FocusedComponent

        # --- Screen-level actions (e.g., global hotkeys or pane switching) ---
        switch ($keyInfo.Key) {
            ([ConsoleKey]::Escape) {
                Write-Log -Level Debug -Message "ProjectListScreen.HandleInput: ESC pressed, navigating back to Dashboard."
                if ($this._navService.CanGoBack()) {
                    $this._navService.GoBack()
                    $handled = $true
                }
            }
            ([ConsoleKey]::Tab) {
                # Toggle focus between project list and summary/action pane
                if ($focusedComponent -eq $this._projectListBox) {
                    # For now, summary panel itself is not focusable. We'll set focus to the screen,
                    # so its HandleInput method can capture more specific hotkeys,
                    # or cycle to individual buttons if they were on the summary panel.
                    $this._focusManager.SetFocus($this) # Set focus to screen to capture F-keys
                } else {
                    $this._focusManager.SetFocus($this._projectListBox)
                }
                $handled = $true
            }
            ([ConsoleKey]::Enter) {
                # If project list is focused, Enter means "view full details"
                if ($focusedComponent -eq $this._projectListBox) {
                    $this._NavigateToProjectDetail()
                    $handled = $true
                }
            }
            ([ConsoleKey]::F3) { # Open Project Folder (from original image F3/open folder)
                $this._OpenProjectFolder()
                $handled = $true
            }
        }
        
        if ($handled) { return $true }

        # --- Route to Focused Component ---
        # If the key wasn't handled by screen-level actions,
        # let the currently focused component handle it (e.g., ListBox for arrow keys)
        if ($focusedComponent -and $focusedComponent -ne $this) { # Don't re-handle if screen is focused
            $handled = $focusedComponent.HandleInput($keyInfo)
        }
        
        return $handled
    }
}
```

---

### 3. **`Screens\ASC.008_ProjectDetailScreen.ps1` (RENAMED and adapted from previous `ASC.007_ProjectInfoScreen.ps1`)**

You need to **rename** `Screens\ASC.007_ProjectInfoScreen.ps1` to `Screens\ASC.008_ProjectDetailScreen.ps1` and replace its content with this. Also, change the class name inside from `ProjectInfoScreen` to `ProjectDetailScreen`.

```powershell
# ==============================================================================
# Axiom-Phoenix v4.0 - Project Detail Screen (Full Information View)
# Displays all detailed information about a single, selected project,
# including associated tasks, linked files, and specific actions.
# ==============================================================================

using namespace System.Collections.Generic
using namespace System.IO # For Directory.GetFiles, Path.GetFileName

class ProjectDetailScreen : Screen {
    hidden [Panel] $_mainPanel
    hidden [ScrollablePanel] $_detailsScrollPanel # Now a ScrollablePanel
    hidden [Panel] $_tasksPanel
    hidden [Panel] $_filesPanel
    hidden [PmcProject] $_project               # The specific project this screen displays
    hidden [ListBox] $_taskListbox
    hidden [ListBox] $_fileListbox
    
    hidden [DataManager] $_dataManager   # Injected service
    hidden [NavigationService] $_navService # Injected service
    hidden [DialogManager] $_dialogManager # Injected service
    hidden [FocusManager] $_focusManager # Injected service

    # Constructor now expects a specific PmcProject to display
    ProjectDetailScreen([object]$serviceContainer, [PmcProject]$project) : base("ProjectDetailScreen", $serviceContainer) {
        if ($null -eq $project) {
            throw [System.ArgumentNullException]::new("project", "Project must be provided to ProjectDetailScreen.")
        }
        $this._project = $project
        $this._dataManager = $serviceContainer.GetService("DataManager")
        $this._navService = $serviceContainer.GetService("NavigationService")
        $this._dialogManager = $serviceContainer.GetService("DialogManager")
        $this._focusManager = $serviceContainer.GetService("FocusManager")
        $this.Title = " Project: $($project.Name) " # Set base screen title
    }

    [void] Initialize() {
        # Main panel covering the whole screen
        $this._mainPanel = [Panel]::new("ProjectDetailMainPanel")
        $this._mainPanel.X = 0
        $this._mainPanel.Y = 0
        $this._mainPanel.Width = $this.Width
        $this._mainPanel.Height = $this.Height
        $this._mainPanel.Title = " Project Details: $($this._project.Name) " # Dynamic title
        $this._mainPanel.BorderStyle = "Double"
        $this._mainPanel.BorderColor = Get-ThemeColor "Primary"
        $this._mainPanel.BackgroundColor = Get-ThemeColor "Background"
        $this.AddChild($this._mainPanel)

        # Calculate panel dimensions
        $detailsWidth = [Math]::Floor($this.Width * 0.5) - 2 # Left panel width
        $rightPanelWidth = $this.Width - $detailsWidth - 3   # Right panel width
        $tasksHeight = [Math]::Floor($this.Height * 0.4) - 2 # Tasks panel height
        $filesY = $tasksHeight + 2 # Y-position of files panel
        $filesHeight = $this.Height - $filesY - 3 # Files panel height, leaving space for instructions

        # Details Scrollable Panel (left side, major project info)
        $this._detailsScrollPanel = [ScrollablePanel]::new("ProjectDetailsScrollPanel")
        $this._detailsScrollPanel.X = 1
        $this._detailsScrollPanel.Y = 1
        $this._detailsScrollPanel.Width = $detailsWidth
        $this._detailsScrollPanel.Height = $this.Height - 4 # Full height minus main panel borders/instructions
        $this._detailsScrollPanel.Title = " General Information "
        $this._detailsScrollPanel.BorderStyle = "Single"
        $this._detailsScrollPanel.BorderColor = Get-ThemeColor "component.border"
        $this._detailsScrollPanel.ShowScrollbar = $true # Enable scrollbar
        $this._detailsScrollPanel.LayoutType = "Vertical" # Use vertical layout for content
        $this._detailsScrollPanel.Padding = 1 # Padding inside the scrollable panel
        $this._detailsScrollPanel.Spacing = 0 # Default spacing, will adjust for groups

        $this._mainPanel.AddChild($this._detailsScrollPanel)

        # Populate Details Scroll Panel (using `AddChild` with Vertical layout for auto-stacking)
        $lblStyle = @{ ForegroundColor = (Get-ThemeColor "label"); Width = 15; Height = 1 } # Fixed label width for alignment
        $valStyle = @{ ForegroundColor = (Get-ThemeColor "Foreground"); Width = $this._detailsScrollPanel.ContentWidth - 17; Height = 1 } # Value label takes remaining width

        # Helper to add a label-value pair
        $addKeyValuePair = {
            param($parentPanel, $labelName, $labelTxt, $valueName, $valueTxt, $labelStyle, $valueStyle)
            $label = [LabelComponent]::new($labelName)
            $label.Text = $labelTxt
            $label.X = 0 # Layout handles X for vertical layout
            $label.Y = 0 # Layout handles Y for vertical layout
            $label.Width = $labelStyle.Width
            $label.Height = $labelStyle.Height
            $label.ForegroundColor = $labelStyle.ForegroundColor
            $parentPanel.AddChild($label)

            $value = [LabelComponent]::new($valueName)
            $value.Text = $valueTxt
            $value.X = $labelStyle.Width + 1 # Align value after label
            $value.Y = 0
            $value.Width = $valueStyle.Width
            $value.Height = $valueStyle.Height
            $value.ForegroundColor = $valueStyle.ForegroundColor
            $parentPanel.AddChild($value)
        }

        # Project Info
        & $addKeyValuePair $this._detailsScrollPanel "lblKey" "Project Key:" "valKey" ($this._project.Key) $lblStyle $valStyle
        & $addKeyValuePair $this._detailsScrollPanel "lblName" "Name:" "valName" ($this._project.Name) $lblStyle $valStyle
        & $addKeyValuePair $this._detailsScrollPanel "lblID1" "ID 1 (Non-Unique):" "valID1" ($this._project.ID1) $lblStyle $valStyle
        & $addKeyValuePair $this._detailsScrollPanel "lblID2" "ID 2 (Main Case):" "valID2" ($this._project.ID2) $lblStyle $valStyle
        & $addKeyValuePair $this._detailsScrollPanel "lblBN" "Client ID (BN):" "valBN" ($this._project.Metadata['ClientID']) $lblStyle $valStyle
        
        $assignedDateStr = if ($this._project.AssignedDate) { $this._project.AssignedDate.ToString("yyyy-MM-dd") } else { "N/A" }
        & $addKeyValuePair $this._detailsScrollPanel "lblAssignedDate" "Assigned Date:" "valAssignedDate" ($assignedDateStr) $lblStyle $valStyle
        
        $bfDateStr = if ($this._project.BFDate) { $this._project.BFDate.ToString("yyyy-MM-dd") } else { "N/A" }
        & $addKeyValuePair $this._detailsScrollPanel "lblDueDate" "Due Date (BF):" "valDueDate" ($bfDateStr) $lblStyle $valStyle
        
        & $addKeyValuePair $this._detailsScrollPanel "lblOwner" "Owner:" "valOwner" ($this._project.Owner) $lblStyle $valStyle
        
        # Separator for visual grouping
        $this._detailsScrollPanel.AddChild((New-TuiLabel "sep1" ("─" * ($this._detailsScrollPanel.ContentWidth - 2)) -X 0 -Y 0 -Style @{ ForegroundColor = (Get-ThemeColor "component.border"); Height = 1 }))
        $this._detailsScrollPanel.Spacing = 1 # Add spacing after separator

        # Description (using MultilineTextBoxComponent for proper wrapping)
        $descLabel = [LabelComponent]::new("lblDescription")
        $descLabel.Text = "Description:"
        $descLabel.X = 0
        $descLabel.Y = 0
        $descLabel.Width = $lblWidth
        $descLabel.ForegroundColor = Get-ThemeColor("label")
        $this._detailsScrollPanel.AddChild($descLabel)

        $descTextBox = [MultilineTextBoxComponent]::new("valDescription")
        $descTextBox.X = 0
        $descTextBox.Y = 0 # Layout handles positioning
        $descTextBox.Width = $this._detailsScrollPanel.ContentWidth - 2 # Account for padding
        $descTextBox.Height = 5 # Give it some height for multiple lines
        $descTextBox.SetText($this._project.Description)
        $descTextBox.ReadOnly = $true
        $descTextBox.IsFocusable = $false # Not interactive for input
        $descTextBox.BorderStyle = "None" # Make it appear seamless
        $descTextBox.BackgroundColor = Get-ThemeColor "Background" # Match panel background
        $descTextBox.ForegroundColor = Get-ThemeColor "Foreground"
        $this._detailsScrollPanel.AddChild($descTextBox)
        $this._detailsScrollPanel.Spacing = 0 # Reset spacing after multiline component

        # Another separator
        $this._detailsScrollPanel.AddChild((New-TuiLabel "sep2" ("─" * ($this._detailsScrollPanel.ContentWidth - 2)) -X 0 -Y 0 -Style @{ ForegroundColor = (Get-ThemeColor "component.border"); Height = 1 }))
        $this._detailsScrollPanel.Spacing = 1 

        # Periods (will be a dynamic list of labels)
        $periodsHeader = [LabelComponent]::new("lblPeriods")
        $periodsHeader.Text = "Periods:"
        $periodsHeader.X = 0
        $periodsHeader.Y = 0
        $periodsHeader.Width = $lblWidth
        $periodsHeader.ForegroundColor = Get-ThemeColor("label")
        $this._detailsScrollPanel.AddChild($periodsHeader)
        
        $periods = $this._project.Metadata['Periods']
        if ($periods -and ($periods -is [System.Collections.IEnumerable]) -and $periods.Count -gt 0) {
            $valStyle = @{ ForegroundColor = (Get-ThemeColor "Foreground"); Width = $this._detailsScrollPanel.ContentWidth - 2; Height = 1 }
            foreach ($i in 0..($periods.Count-1)) {
                $period = $periods[$i]
                $label = [LabelComponent]::new("dynPeriod_$i")
                $label.Text = "- $period"
                $label.X = 0
                $label.Y = 0 # Layout will handle this
                $label.Width = $valStyle.Width
                $label.Height = $valStyle.Height
                $label.ForegroundColor = $valStyle.ForegroundColor
                $this._detailsScrollPanel.AddChild($label)
            }
        }
        $this._detailsScrollPanel.Spacing = 0 # Reset spacing

        # Auditor Info
        $this._detailsScrollPanel.Spacing = 1 
        $this._detailsScrollPanel.AddChild((New-TuiLabel "sepDetails3" ("─" * ($this._detailsScrollPanel.ContentWidth - 2)) -X 0 -Y 0 -Style @{ ForegroundColor = (Get-ThemeColor "component.border"); Height = 1 }))
        $auditorHeader = [LabelComponent]::new("lblAuditor")
        $auditorHeader.Text = "Auditor:"
        $auditorHeader.X = 0
        $auditorHeader.Y = 0
        $auditorHeader.Width = $lblWidth
        $auditorHeader.ForegroundColor = Get-ThemeColor("label")
        $this._detailsScrollPanel.AddChild($auditorHeader)
        
        $auditorName = $this._project.Metadata['AuditorName']
        $auditorPhone = $this._project.Metadata['AuditorPhone']
        if ($auditorName -or $auditorPhone) {
            $valStyle = @{ ForegroundColor = (Get-ThemeColor "Foreground"); Width = $this._detailsScrollPanel.ContentWidth - 2; Height = 1 }
            if ($auditorName) {
                $label = [LabelComponent]::new("dynAuditorName")
                $label.Text = "Name: $auditorName"
                $label.X = 0
                $label.Y = 0
                $label.Width = $valStyle.Width
                $label.Height = $valStyle.Height
                $label.ForegroundColor = $valStyle.ForegroundColor
                $this._detailsScrollPanel.AddChild($label)
            }
            if ($auditorPhone) {
                $label = [LabelComponent]::new("dynAuditorPhone")
                $label.Text = "Phone: $auditorPhone"
                $label.X = 0
                $label.Y = 0
                $label.Width = $valStyle.Width
                $label.Height = $valStyle.Height
                $label.ForegroundColor = $valStyle.ForegroundColor
                $this._detailsScrollPanel.AddChild($label)
            }
        }

        # Tasks Panel (Right - Mid-Top)
        $tasksY = $midSectionHeight + 1 # Below details scroll panel
        $this._tasksPanel = [Panel]::new("ProjectTasksPanel")
        $this._tasksPanel.X = $detailsWidth + 2
        $this._tasksPanel.Y = 1
        $this._tasksPanel.Width = $rightPanelWidth
        $this._tasksPanel.Height = $midSectionHeight - 2 # Adjusted height
        $this._tasksPanel.Title = " Associated Tasks "
        $this._tasksPanel.BorderStyle = "Single"
        $this._tasksPanel.BorderColor = Get-ThemeColor "component.border"
        $this._mainPanel.AddChild($this._tasksPanel)

        $this._taskListbox = [ListBox]::new("ProjectTaskListBox")
        $this._taskListbox.X = 1
        $this._taskListbox.Y = 1
        $this._taskListbox.Width = $this._tasksPanel.ContentWidth - 2
        $this._taskListbox.Height = $this._tasksPanel.ContentHeight - 2
        $this._taskListbox.HasBorder = $false
        $this._taskListbox.SelectedBackgroundColor = Get-ThemeColor "list.selected.bg"
        $this._taskListbox.SelectedForegroundColor = Get-ThemeColor "list.selected.fg"
        $this._tasksPanel.AddChild($this._taskListbox)

        # Files Panel (Right - Mid-Bottom)
        $filesY = $tasksY + $this._tasksPanel.Height + 1 # Below tasks panel
        $this._filesPanel = [Panel]::new("ProjectFilesPanel")
        $this._filesPanel.X = $detailsWidth + 2
        $this._filesPanel.Y = $filesY
        $this._filesPanel.Width = $rightPanelWidth
        $this._filesPanel.Height = $this.Height - $filesY - 3 # Remaining height after containers and instructions
        $this._filesPanel.Title = " Client Documents "
        $this._filesPanel.BorderStyle = "Single"
        $this._filesPanel.BorderColor = Get-ThemeColor "component.border"
        $this._mainPanel.AddChild($this._filesPanel)

        $this._fileListbox = [ListBox]::new("ProjectFileListBox")
        $this._fileListbox.X = 1
        $this._fileListbox.Y = 1
        $this._fileListbox.Width = $this._filesPanel.ContentWidth - 2
        $this._fileListbox.Height = $this._filesPanel.ContentHeight - 2
        $this._fileListbox.HasBorder = $false
        $this._fileListbox.SelectedBackgroundColor = Get-ThemeColor "list.selected.bg"
        $this._fileListbox.SelectedForegroundColor = Get-ThemeColor "list.selected.fg"
        $this._filesPanel.AddChild($this._fileListbox)

        # Add a simple instruction at the bottom of the screen
        $instructions = [LabelComponent]::new("Instructions")
        $instructions.Text = "Press [ESC] to go back. Use ↑↓ PgUp/PgDn to scroll details. F3: Folder | F4: CAA | F5: Request | F6: T2020"
        $instructions.X = 1
        $instructions.Y = $this.Height - 2
        $instructions.ForegroundColor = Get-ThemeColor "Subtle"
        $this._mainPanel.AddChild($instructions)
    }

    [void] OnEnter() {
        Write-Log -Level Debug -Message "ProjectDetailScreen.OnEnter: Activating screen for project: $($this._project.Name)."
        
        # Update the main panel title dynamically
        $this._mainPanel.Title = " Project Details: $($this._project.Name) "

        # Load and display tasks
        $tasks = $this._dataManager.GetTasksByProject($this._project.Key)
        $this._taskListbox.ClearItems()
        if ($tasks.Count -gt 0) {
            foreach ($task in $tasks) {
                $this._taskListbox.AddItem($task.ToString())
            }
        } else {
            $this._taskListbox.AddItem("No tasks associated with this project.")
        }
        $this._taskListbox.SelectedIndex = -1 # No initial selection

        # Load and display files
        $this._fileListbox.ClearItems()
        $filesFound = $false
        
        # Collect names of explicitly linked files for exclusion from general listing
        $explicitlyLinkedFileNames = [System.Collections.Generic.HashSet[string]]::new([System.StringComparer]::OrdinalIgnoreCase)
        if ($this._project.CaaFileName) { $explicitlyLinkedFileNames.Add($this._project.CaaFileName) }
        if ($this._project.RequestFileName) { $explicitlyLinkedFileNames.Add($this._project.RequestFileName) }
        if ($this._project.T2020FileName) { $explicitlyLinkedFileNames.Add($this._project.T2020FileName) }
        
        # Add special linked files first with specific icons
        $linkedFiles = @(
            @{ Label = "CAA File"; FileName = $this._project.CaaFileName; Icon = "📄" }, # Generic document
            @{ Label = "Request File"; FileName = $this._project.RequestFileName; Icon = "📋" }, # Clipboard/form
            @{ Label = "T2020 File"; FileName = $this._project.T2020FileName; Icon = "📊" } # Chart/data
        )
        foreach ($linkedFile in $linkedFiles) {
            if ($linkedFile.FileName) {
                $fullPath = Join-Path $this._project.ProjectFolderPath $linkedFile.FileName -ErrorAction SilentlyContinue
                if (Test-Path $fullPath -PathType Leaf) {
                    $this._fileListbox.AddItem("$($linkedFile.Icon) $($linkedFile.Label): $($linkedFile.FileName)")
                    $filesFound = $true
                }
            }
        }

        # Then list all other files in the folder (excluding those already explicitly listed)
        if ($this._project.ProjectFolderPath -and (Test-Path $this._project.ProjectFolderPath -PathType Container)) {
            try {
                $files = Get-ChildItem -Path $this._project.ProjectFolderPath -File | Where-Object { 
                    -not $explicitlyLinkedFileNames.Contains($_.Name)
                } | Select-Object -ExpandProperty Name

                if ($files.Count -gt 0) {
                    foreach ($file in $files) {
                        $this._fileListbox.AddItem("📁 $file") # Generic folder icon for general files
                    }
                    $filesFound = $true
                }
            } catch {
                Write-Log -Level Warning -Message "ProjectDetailScreen: Could not list files in $($this._project.ProjectFolderPath): $($_.Exception.Message)"
                $this._fileListbox.AddItem("Error listing files: $($_.Exception.Message)")
                $this._fileListbox.AddItem("Path: $($this._project.ProjectFolderPath)")
            }
        }
        
        if (-not $filesFound) {
            $this._fileListbox.AddItem("No client documents found for this project.")
        }
        $this._fileListbox.SelectedIndex = -1 # No initial selection
        
        # This screen is primarily for display. Set focus to its scrollable panel for easy scrolling.
        if ($this._focusManager) {
            Write-Log -Level Debug -Message "ProjectDetailScreen.OnEnter: Setting focus to _detailsScrollPanel for scrolling."
            $this._focusManager.SetFocus($this._detailsScrollPanel) 
        }

        $this.RequestRedraw()
        ([Screen]$this).OnEnter() # Call base OnEnter (already does RequestRedraw)
    }

    [void] OnExit() {
        Write-Log -Level Debug -Message "ProjectDetailScreen.OnExit: Deactivating screen."
        # Clear content visually
        $this._taskListbox.ClearItems()
        $this._fileListbox.ClearItems()
        # No need to clear labels for this specific instance, as the screen is discarded on exit
        ([Screen]$this).OnExit() # Call base OnExit
    }

    # Action methods for F-keys (Open Folder, Open CAA, Open Request, Open T2020)
    hidden [void] _OpenProjectFolder() {
        if ($this._project -and $this._project.ProjectFolderPath) {
            try {
                Invoke-Item -Path $this._project.ProjectFolderPath -ErrorAction Stop
                $this._dialogManager.ShowAlert("Success", "Opened folder: $($this._project.ProjectFolderPath)")
            } catch {
                $this._dialogManager.ShowAlert("Error", "Failed to open folder:`n$($_.Exception.Message)")
            }
        } else {
            $this._dialogManager.ShowAlert("Info", "No project loaded or folder path is missing.")
        }
    }

    hidden [void] _OpenFile([string]$fileNameProperty) {
        if ($this._project -and $this._project.$fileNameProperty) {
            $fullPath = Join-Path $this._project.ProjectFolderPath $this._project.$fileNameProperty
            if (Test-Path $fullPath -PathType Leaf) {
                try {
                    Invoke-Item -Path $fullPath -ErrorAction Stop
                    $this._dialogManager.ShowAlert("Success", "Opened file: $($this._project.$fileNameProperty)")
                } catch {
                    $this._dialogManager.ShowAlert("Error", "Failed to open file:`n$($_.Exception.Message)")
                }
            } else {
                $this._dialogManager.ShowAlert("Warning", "File not found: $($this._project.$fileNameProperty)`nPath: $fullPath")
            }
        } else {
            $this._dialogManager.ShowAlert("Info", "No project loaded or file path is missing.")
        }
    }

    [bool] HandleInput([System.ConsoleKeyInfo]$keyInfo) {
        if ($null -eq $keyInfo) { return $false }

        $handled = $false
        $focusedComponent = $this._focusManager.FocusedComponent

        # --- Screen-level actions (e.g., F-keys for specific file operations) ---
        switch ($keyInfo.Key) {
            ([ConsoleKey]::Escape) {
                Write-Log -Level Debug -Message "ProjectDetailScreen.HandleInput: ESC pressed, navigating back."
                if ($this._navService.CanGoBack()) {
                    $this._navService.GoBack()
                    $handled = $true
                }
            }
            ([ConsoleKey]::F3) { # Open Folder (from original image F3/open folder)
                $this._OpenProjectFolder()
                $handled = $true
            }
            ([ConsoleKey]::F4) { # Open CAA File
                $this._OpenFile("CaaFileName")
                $handled = $true
            }
            ([ConsoleKey]::F5) { # Open Request File
                $this._OpenFile("RequestFileName")
                $handled = $true
            }
            ([ConsoleKey]::F6) { # Open T2020 File
                $this._OpenFile("T2020FileName")
                $handled = $true
            }
        }
        
        if ($handled) { return $true }

        # --- Route to Focused Component ---
        # If the key wasn't handled by screen-level actions,
        # let the currently focused component handle it (e.g., ScrollablePanel for arrow keys)
        if ($focusedComponent) {
            # ScrollablePanel.HandleInput already processes Up/Down/PageUp/PageDown
            $handled = $focusedComponent.HandleInput($keyInfo)
        }
        
        return $handled
    }
}
```

---

### 4. **`Start.ps1`**

This file needs adjustments to the sample data (add more projects/tasks for a better master-list demo) and the initial navigation.

```powershell
# ==============================================================================
# Axiom-Phoenix v4.0 - Application Startup (Generated from Split Structure)
# This script loads the framework from its organized file structure.
# ==============================================================================

param(
    [string]$Theme = "Synthwave",
    [switch]$Debug
)

# Set error action preference
$ErrorActionPreference = 'Stop'
$VerbosePreference = if ($env:AXIOM_VERBOSE -eq '1') { 'Continue' } else { 'SilentlyContinue' }
$WarningPreference = $VerbosePreference

try {
    Write-Host "Loading Axiom-Phoenix v4.0 (Split Architecture)..." -ForegroundColor Cyan
    
    $scriptDir = $PSScriptRoot
    if ([string]::IsNullOrEmpty($scriptDir)) {
        $scriptDir = Get-Location
    }

    # Define the correct loading order for the framework directories
    $loadOrder = @(
        "Base",
        "Models", 
        "Functions",
        "Components",
        "Screens",
        "Services",
        "Runtime"
    )

    # Load all framework files in the correct order
    foreach ($folder in $loadOrder) {
        $folderPath = Join-Path $scriptDir $folder
        if (-not (Test-Path $folderPath)) { 
            Write-Warning "Folder not found: $folder"
            continue 
        }

        Write-Host "Loading $folder..." -ForegroundColor Gray
        $files = Get-ChildItem -Path $folderPath -Filter "*.ps1" | Sort-Object Name
        foreach ($file in $files) {
            Write-Verbose "  - Dot-sourcing $($file.Name)"
            try {
                . $file.FullName
            } catch {
                Write-Error "Failed to load $($file.Name): $($_.Exception.Message)"
                throw
            }
        }
    }

    Write-Host "`nFramework loaded successfully!`n" -ForegroundColor Green

    # Service container setup and application startup
    Write-Host "Initializing services..." -ForegroundColor Cyan
    $container = [ServiceContainer]::new()
    
    # Register core services
    Write-Host "  • Registering Logger..." -ForegroundColor Gray
    $container.Register("Logger", [Logger]::new((Join-Path $env:TEMP "axiom-phoenix.log")))
    
    Write-Host "  • Registering EventManager..." -ForegroundColor Gray  
    $container.Register("EventManager", [EventManager]::new())
    
    Write-Host "  • Registering ThemeManager..." -ForegroundColor Gray
    $container.Register("ThemeManager", [ThemeManager]::new())
    
    Write-Host "  • Registering DataManager..." -ForegroundColor Gray
    $container.Register("DataManager", [DataManager]::new((Join-Path $env:TEMP "axiom-data.json"), $container.GetService("EventManager")))
    
    Write-Host "  • Registering ActionService..." -ForegroundColor Gray
    $container.Register("ActionService", [ActionService]::new($container.GetService("EventManager")))
    
    Write-Host "  • Registering KeybindingService..." -ForegroundColor Gray
    $container.Register("KeybindingService", [KeybindingService]::new($container.GetService("ActionService")))
    
    Write-Host "  • Registering NavigationService..." -ForegroundColor Gray
    $container.Register("NavigationService", [NavigationService]::new($container))
    
    Write-Host "  • Registering FocusManager..." -ForegroundColor Gray
    $container.Register("FocusManager", [FocusManager]::new($container.GetService("EventManager")))
    
    Write-Host "  • Registering DialogManager..." -ForegroundColor Gray
    $container.Register("DialogManager", [DialogManager]::new($container))
    
    Write-Host "  • Registering ViewDefinitionService..." -ForegroundColor Gray
    $container.Register("ViewDefinitionService", [ViewDefinitionService]::new())
    
    Write-Host "Services initialized successfully!" -ForegroundColor Green

    # Initialize global state
    $global:TuiState.ServiceContainer = $container
    $global:TuiState.Services = @{
        Logger = $container.GetService("Logger")
        EventManager = $container.GetService("EventManager") 
        ThemeManager = $container.GetService("ThemeManager")
        DataManager = $container.GetService("DataManager")
        ActionService = $container.GetService("ActionService")
        KeybindingService = $container.GetService("KeybindingService")
        NavigationService = $container.GetService("NavigationService")
        FocusManager = $container.GetService("FocusManager")
        DialogManager = $container.GetService("DialogManager")
        ViewDefinitionService = $container.GetService("ViewDefinitionService")
    }
    $global:TuiState.ServiceContainer = $container

    # Apply theme and register default actions
    $themeManager = $container.GetService("ThemeManager")
    if ($themeManager -and $Theme) { 
        $themeManager.LoadTheme($Theme)
        Write-Host "Theme '$Theme' activated!" -ForegroundColor Magenta 
    }
    
    $actionService = $container.GetService("ActionService")
    if ($actionService) { 
        $actionService.RegisterDefaultActions()
        Write-Host "Default actions registered!" -ForegroundColor Green 
    }

    # Create sample data
    Write-Host "Generating sample data..." -ForegroundColor Cyan
    $dataManager = $container.GetService("DataManager")
    
    # Create sample tasks (keep existing for task list screen)
    $sampleTasks = @()
    
    $task1 = [PmcTask]::new("Review project requirements")
    $task1.Status = [TaskStatus]::Pending
    $task1.Priority = [TaskPriority]::High
    $task1.ProjectKey = "PROJ-001" # Assign to new project
    $task1.DueDate = (Get-Date).AddDays(7)
    $sampleTasks += $task1
    
    $task2 = [PmcTask]::new("Design system architecture")
    $task2.Status = [TaskStatus]::InProgress
    $task2.Priority = [TaskPriority]::High
    $task2.SetProgress(30)
    $task2.ProjectKey = "PROJ-001" # Assign to new project
    $task2.DueDate = (Get-Date).AddDays(-5) # Overdue
    $sampleTasks += $task2
    
    $task3 = [PmcTask]::new("Implement core features")
    $task3.Status = [TaskStatus]::InProgress
    $task3.Priority = [TaskPriority]::Medium
    $task3.SetProgress(60)
    $sampleTasks += $task3
    
    $task4 = [PmcTask]::new("Write unit tests")
    $task4.Status = [TaskStatus]::Pending
    $task4.Priority = [TaskPriority]::Medium
    $sampleTasks += $task4
    
    $task5 = [PmcTask]::new("Deploy to staging")
    $task5.Status = [TaskStatus]::Pending
    $task5.Priority = [TaskPriority]::Low
    $sampleTasks += $task5
    
    $task6 = [PmcTask]::new("Research new marketing strategies")
    $task6.Status = [TaskStatus]::Pending
    $task6.Priority = [TaskPriority]::High
    $task6.ProjectKey = "PROJ-002"
    $task6.DueDate = (Get-Date).AddDays(10)
    $sampleTasks += $task6

    $task7 = [PmcTask]::new("Develop MVP prototype")
    $task7.Status = [TaskStatus]::InProgress
    $task7.Priority = [TaskPriority]::High
    $task7.SetProgress(75)
    $task7.ProjectKey = "PROJ-002"
    $task7.DueDate = (Get-Date).AddDays(-1) # Overdue
    $sampleTasks += $task7

    $task8 = [PmcTask]::new("Client onboarding")
    $task8.Status = [TaskStatus]::Completed
    $task8.Priority = [TaskPriority]::Medium
    $task8.SetProgress(100)
    $task8.ProjectKey = "PROJ-003"
    $task8.DueDate = (Get-Date).AddDays(-30)
    $sampleTasks += $task8

    $task9 = [PmcTask]::new("Initial project review")
    $task9.Status = [TaskStatus]::Pending
    $task9.Priority = [TaskPriority]::Low
    $task9.ProjectKey = "PROJ-003"
    $task9.DueDate = (Get-Date).AddDays(5)
    $sampleTasks += $task9
    
    foreach ($task in $sampleTasks) {
        $dataManager.AddTask($task)
    }
    
    # Create sample project folders and files
    Write-Host "  Creating sample project folder and files..." -ForegroundColor Gray
    
    $project1FolderPath = Join-Path $env:TEMP "AxiomPhoenix_Projects\PROJ-001_Example_Client"
    if (-not (Test-Path $project1FolderPath)) {
        New-Item -ItemType Directory -Path $project1FolderPath -Force | Out-Null
    }
    Set-Content -Path (Join-Path $project1FolderPath "Client_Agreement_2023.pdf") -Value "Dummy PDF Content" -Force | Out-Null
    Set-Content -Path (Join-Path $project1FolderPath "Project_Request_Form_v2.docx") -Value "Dummy DOCX Content" -Force | Out-Null
    Set-Content -Path (Join-Path $project1FolderPath "T2020_Report_Final.xlsx") -Value "Dummy XLSX Content" -Force | Out-Null
    Set-Content -Path (Join-Path $project1FolderPath "Meeting_Notes_2023-10-26.txt") -Value "Dummy TXT Content" -Force | Out-Null
    Set-Content -Path (Join-Path $project1FolderPath "Project_Plan.md") -Value "Dummy MD Content" -Force | Out-Null
    Set-Content -Path (Join-Path $project1FolderPath "Audit_Report.xml") -Value "Dummy XML Content" -Force | Out-Null


    $sampleProject = [PmcProject]::new("PROJ-001", "Example Client Project")
    $sampleProject.ID1 = "C101-ABC-XYZ"
    $sampleProject.ID2 = "CASE-2023-A-001"
    $sampleProject.Description = "This is a comprehensive sample project for the Example Client, involving software development lifecycle, rigorous audit compliance, and ongoing client communication. The project spans multiple fiscal periods and requires meticulous documentation and reporting."
    $sampleProject.AssignedDate = (Get-Date).AddDays(-30)
    $sampleProject.BFDate = (Get-Date).AddDays(15) # Due Date / Bring-Forward Date
    $sampleProject.Owner = "John Doe"
    $sampleProject.SetMetadata("ClientID", "BN-54321-ALPHA")
    $sampleProject.SetMetadata("Periods", @("P1-optional: 2022-01-01 to 2022-12-31", "P2-optional: 2023-01-01 to 2023-06-30", "P3-optional: 2023-07-01 to 2023-12-31", "P4-optional: 2024-01-01 to 2024-06-30"))
    $sampleProject.SetMetadata("AuditorName", "Jane Smith (Lead)")
    $sampleProject.SetMetadata("AuditorPhone", "555-123-4567 Ext. 89")
    $sampleProject.ProjectFolderPath = $project1FolderPath
    $sampleProject.CaaFileName = "Client_Agreement_2023.pdf"
    $sampleProject.RequestFileName = "Project_Request_Form_v2.docx"
    $sampleProject.T2020FileName = "T2020_Report_Final.xlsx"
    $dataManager.AddProject($sampleProject)

    $project2FolderPath = Join-Path $env:TEMP "AxiomPhoenix_Projects\PROJ-002_New_Product"
    if (-not (Test-Path $project2FolderPath)) {
        New-Item -ItemType Directory -Path $project2FolderPath -Force | Out-Null
    }
    Set-Content -Path (Join-Path $project2FolderPath "Product_Roadmap_v1.md") -Value "Dummy MD Content" -Force | Out-Null
    Set-Content -Path (Join-Path $project2FolderPath "Marketing_Plan.pdf") -Value "Dummy PDF Content" -Force | Out-Null
    Set-Content -Path (Join-Path $project2FolderPath "Budget_Forecast.xlsx") -Value "Dummy XLSX Content" -Force | Out-Null


    $sampleProject2 = [PmcProject]::new("PROJ-002", "New Product Initiative")
    $sampleProject2.ID1 = "NPI-XYZ-789"
    $sampleProject2.ID2 = "NPI-2024-B-002"
    $sampleProject2.Description = "Developing a new product from concept to launch, focusing on market research, MVP development, and initial user testing. This project aims to capture a new market segment."
    $sampleProject2.AssignedDate = (Get-Date).AddDays(-15)
    $sampleProject2.BFDate = (Get-Date).AddDays(30)
    $sampleProject2.Owner = "Jane Doe"
    $sampleProject2.SetMetadata("ClientID", "BN-98765-BETA")
    $sampleProject2.SetMetadata("Periods", @("Phase 1: Concept & Planning", "Phase 2: Development", "Phase 3: Launch"))
    $sampleProject2.SetMetadata("AuditorName", "External Audit Team")
    $sampleProject2.SetMetadata("AuditorPhone", "555-987-6543")
    $sampleProject2.ProjectFolderPath = $project2FolderPath
    $sampleProject2.CaaFileName = $null # No CAA for this one
    $sampleProject2.RequestFileName = $null # No specific request form
    $sampleProject2.T2020FileName = "NPI_Summary_2024.txt"
    $dataManager.AddProject($sampleProject2)

    $project3FolderPath = Join-Path $env:TEMP "AxiomPhoenix_Projects\PROJ-003_Client_Audit"
    if (-not (Test-Path $project3FolderPath)) {
        New-Item -ItemType Directory -Path $project3FolderPath -Force | Out-Null
    }
    Set-Content -Path (Join-Path $project3FolderPath "Audit_Checklist.docx") -Value "Dummy CheckList" -Force | Out-Null
    Set-Content -Path (Join-Path $project3FolderPath "Final_Audit_Report.pdf") -Value "Dummy Final Report" -Force | Out-Null

    $sampleProject3 = [PmcProject]::new("PROJ-003", "Annual Client Audit")
    $sampleProject3.ID1 = "AUDIT-CLI-A"
    $sampleProject3.ID2 = "AUDIT-2023-C-003"
    $sampleProject3.Description = "Conducting the annual financial audit for a key client. This involves reviewing financial statements, internal controls, and ensuring compliance with regulatory requirements."
    $sampleProject3.AssignedDate = (Get-Date).AddDays(-60)
    $sampleProject3.BFDate = (Get-Date).AddDays(-10) # Overdue
    $sampleProject3.Owner = "Mike Ross"
    $sampleProject3.IsActive = $true # Set to active for demo
    $sampleProject3.SetMetadata("ClientID", "BN-11223-GAMMA")
    $sampleProject3.SetMetadata("Periods", @("FY 2023"))
    $sampleProject3.SetMetadata("AuditorName", "Harvey Specter")
    $sampleProject3.SetMetadata("AuditorPhone", "555-444-3333")
    $sampleProject3.ProjectFolderPath = $project3FolderPath
    $sampleProject3.CaaFileName = $null
    $sampleProject3.RequestFileName = $null
    $sampleProject3.T2020FileName = $null
    $dataManager.AddProject($sampleProject3)


    Write-Host "Sample data created!" -ForegroundColor Green

    # Launch the application
    Write-Host "`nStarting Axiom-Phoenix v4.0..." -ForegroundColor Cyan
    Write-Host "Press Ctrl+P to open command palette, Ctrl+Q to quit" -ForegroundColor Yellow
    Write-Host "Press 5 from Dashboard to view Project Management Screen" -ForegroundColor Yellow # New instruction
    Start-Sleep -Seconds 1
    
    $dashboardScreen = [DashboardScreen]::new($container)
    Write-Host "Initializing Dashboard screen..." -ForegroundColor Yellow
    $dashboardScreen.Initialize()
    Write-Host "Dashboard initialized. Starting engine..." -ForegroundColor Yellow
    Clear-Host
    Start-AxiomPhoenix -ServiceContainer $container -InitialScreen $dashboardScreen
```

---

### 5. **`Screens\ASC.001_DashboardScreen.ps1`**

This file needs a minor update to change the target screen for option `5`.

```powershell
# ==============================================================================
# Axiom-Phoenix v4.0 - All Screens (Load After Components)
# Application screens that extend Screen base class
# ==============================================================================
#
# TABLE OF CONTENTS DIRECTIVE:
# When modifying this file, ensure page markers remain accurate and update
# TableOfContents.md to reflect any structural changes.
#
# Search for "PAGE: ASC.###" to find specific sections.
# Each section ends with "END_PAGE: ASC.###"
# ==============================================================================

using namespace System.Collections.Generic

#region Screen Classes

# ==============================================================================
# CLASS: DashboardScreen (Data-Driven Dashboard with DataGridComponent)
#
# INHERITS:
#   - Screen (ABC.006)
#
# DEPENDENCIES:
#   Services:
#     - NavigationService (ASE.004)
#     - FocusManager (ASE.009)
#     - DataManager (ASE.003)
#     - ViewDefinitionService (ASE.011)
#   Components:
#     - Panel (ACO.011)
#     - DataGridComponent (ACO.022)
#     - LabelComponent (ACO.001)
#
# PURPOSE:
#   Data-driven dashboard showing task statistics, recent tasks, and quick actions
#   using the ViewDefinitionService pattern for consistent formatting.
# ==============================================================================
class DashboardScreen : Screen {
    hidden [Panel] $_mainPanel
    hidden [Panel] $_menuPanel
    hidden [List[LabelComponent]] $_menuItems
    hidden [int] $_selectedIndex = 0
    
    DashboardScreen([object]$serviceContainer) : base("DashboardScreen", $serviceContainer) {}

    [void] Initialize() {
        Write-Log -Level Debug -Message "DashboardScreen.Initialize: Starting initialization"
        if (-not $this.ServiceContainer) { 
            Write-Log -Level Error -Message "DashboardScreen.Initialize: ServiceContainer is null!"
            return 
        }

        # Main panel takes full screen
        $this._mainPanel = [Panel]::new("MainPanel")
        $this._mainPanel.X = 0
        $this._mainPanel.Y = 0
        $this._mainPanel.Width = $this.Width
        $this._mainPanel.Height = $this.Height
        $this._mainPanel.Title = " Axiom-Phoenix v4.0 - Main Menu "
        $this._mainPanel.BorderStyle = "Double"
        $this._mainPanel.BorderColor = Get-ThemeColor "primary.accent" "#00D4FF"
        $this._mainPanel.BackgroundColor = Get-ThemeColor "background" "#0A0A0A"
        $this.AddChild($this._mainPanel)

        # Menu panel
        $this._menuPanel = [Panel]::new("MenuPanel")
        $this._menuPanel.X = [Math]::Floor(($this.Width - 40) / 2)
        $this._menuPanel.Y = 5
        $this._menuPanel.Width = 40
        $this._menuPanel.Height = 12 # Increased height for new menu item
        $this._menuPanel.HasBorder = $true
        $this._menuPanel.BorderStyle = "Double"
        $this._menuPanel.Title = " Navigation "
        $this._mainPanel.AddChild($this._menuPanel)
        
        # Create menu items as labels
        $this._menuItems = [List[LabelComponent]]::new()
        $menuTexts = @(
            "[1] Dashboard (Current)",
            "[2] Task List",
            "[3] Theme Picker", 
            "[4] Command Palette (Ctrl+P)",
            "[5] View Project Management Screen", # NEW MENU ITEM - changed text
            "",
            "[Q] Quit"
        )
        
        $yPos = 1
        foreach ($text in $menuTexts) {
            $label = [LabelComponent]::new("MenuItem_$yPos")
            $label.Text = $text
            $label.X = 2
            $label.Y = $yPos
            $label.ForegroundColor = Get-ThemeColor("component.text")
            $this._menuPanel.AddChild($label)
            $this._menuItems.Add($label)
            $yPos++
        }
        
        # Highlight first item
        if ($this._menuItems.Count -gt 0) {
            $this._menuItems[0].ForegroundColor = Get-ThemeColor("Primary")
        }
        
        # Instructions
        $instructions = [LabelComponent]::new("Instructions")
        $instructions.Text = "Press the number/letter key to select an option"
        $instructions.X = [Math]::Floor(($this.Width - 42) / 2)
        $instructions.Y = 19 # Adjusted Y position
        $instructions.ForegroundColor = Get-ThemeColor("Subtle")
        $this._mainPanel.AddChild($instructions)
    }

    [void] OnEnter() {
        Write-Log -Level Debug -Message "DashboardScreen.OnEnter: Screen activated"
        $this.RequestRedraw()
    }

    [bool] HandleInput([System.ConsoleKeyInfo]$keyInfo) {
        Write-Log -Level Debug -Message "DashboardScreen.HandleInput: Received key - Key: $($keyInfo.Key), KeyChar: '$($keyInfo.KeyChar)', Modifiers: $($keyInfo.Modifiers)"
        
        $actionService = $this.ServiceContainer?.GetService("ActionService")
        if (-not $actionService) { 
            Write-Log -Level Error -Message "DashboardScreen: ActionService not found!"
            return $false 
        }
        
        $handled = $false
        
        # Check both KeyChar and Key enum for number keys
        $char = $keyInfo.KeyChar
        $key = $keyInfo.Key
        
        # Direct character check
        switch ($char) {
            '1' { $handled = $true }
            '2' { $actionService.ExecuteAction("navigation.taskList", @{}); $handled = $true }
            '3' { $actionService.ExecuteAction("navigation.themePicker", @{}); $handled = $true }
            '4' { $actionService.ExecuteAction("app.commandPalette", @{}); $handled = $true }
            '5' { 
                # NEW: Navigate to Project List Screen (no longer passes project directly)
                $navService = $this.ServiceContainer.GetService("NavigationService")
                if ($navService) {
                    $projectListScreen = [ProjectListScreen]::new($this.ServiceContainer)
                    $projectListScreen.Initialize()
                    $navService.NavigateTo($projectListScreen)
                }
                $handled = $true 
            }
            'q' { $actionService.ExecuteAction("app.exit", @{}); $handled = $true }
            'Q' { $actionService.ExecuteAction("app.exit", @{}); $handled = $true }
        }
        
        # If not handled by character, try Key enum (for numpad etc.)
        if (-not $handled) {
            switch ($key) {
                ([ConsoleKey]::D1) { $handled = $true }
                ([ConsoleKey]::D2) { $actionService.ExecuteAction("navigation.taskList", @{}); $handled = $true }
                ([ConsoleKey]::D3) { $actionService.ExecuteAction("navigation.themePicker", @{}); $handled = $true }
                ([ConsoleKey]::D4) { $actionService.ExecuteAction("app.commandPalette", @{}); $handled = $true }
                ([ConsoleKey]::D5) { # Handle numpad 5 as well
                    $navService = $this.ServiceContainer.GetService("NavigationService")
                    if ($navService) {
                        $projectListScreen = [ProjectListScreen]::new($this.ServiceContainer)
                        $projectListScreen.Initialize()
                        $navService.NavigateTo($projectListScreen)
                    }
                    $handled = $true 
                }
                ([ConsoleKey]::Q) { $actionService.ExecuteAction("app.exit", @{}); $handled = $true }
            }
        }
        
        # Arrow key navigation (update logic to account for new menu item)
        switch ($key) {
            ([ConsoleKey]::UpArrow) {
                $targetIndex = $this._selectedIndex
                do {
                    $targetIndex = if ($targetIndex -gt 0) { $targetIndex - 1 } else { $this._menuItems.Count - 1 }
                } while ($targetIndex -ne $this._selectedIndex -and [string]::IsNullOrWhiteSpace($this._menuItems[$targetIndex].Text))

                if ($targetIndex -ne $this._selectedIndex) {
                    $this._menuItems[$this._selectedIndex].ForegroundColor = Get-ThemeColor("component.text")
                    $this._selectedIndex = $targetIndex
                    $this._menuItems[$this._selectedIndex].ForegroundColor = Get-ThemeColor("Primary")
                    $this.RequestRedraw()
                    $handled = $true
                }
            }
            ([ConsoleKey]::DownArrow) {
                $targetIndex = $this._selectedIndex
                do {
                    $targetIndex = if ($targetIndex -lt $this._menuItems.Count - 1) { $targetIndex + 1 } else { 0 }
                } while ($targetIndex -ne $this._selectedIndex -and [string]::IsNullOrWhiteSpace($this._menuItems[$targetIndex].Text))

                if ($targetIndex -ne $this._selectedIndex) {
                    $this._menuItems[$this._selectedIndex].ForegroundColor = Get-ThemeColor("component.text")
                    $this._selectedIndex = $targetIndex
                    $this._menuItems[$this._selectedIndex].ForegroundColor = Get-ThemeColor("Primary")
                    $this.RequestRedraw()
                    $handled = $true
                }
            }
            ([ConsoleKey]::Enter) {
                # Execute selected item
                # IMPORTANT: Update indices to match `menuTexts` order after adding new item
                switch ($this._selectedIndex) {
                    0 { $handled = $true } # Already on dashboard
                    1 { $actionService.ExecuteAction("navigation.taskList", @{}); $handled = $true }
                    2 { $actionService.ExecuteAction("navigation.themePicker", @{}); $handled = $true }
                    3 { $actionService.ExecuteAction("app.commandPalette", @{}); $handled = $true }
                    4 { # Project Management Screen index
                        $navService = $this.ServiceContainer.GetService("NavigationService")
                        if ($navService) {
                            $projectListScreen = [ProjectListScreen]::new($this.ServiceContainer)
                            $projectListScreen.Initialize()
                            $navService.NavigateTo($projectListScreen)
                        }
                        $handled = $true 
                    }
                    6 { $actionService.ExecuteAction("app.exit", @{}); $handled = $true } # Quit index
                }
            }
        }
        
        return $handled
    }
}

#endregion
#<!-- END_PAGE: ASC.001 -->
```