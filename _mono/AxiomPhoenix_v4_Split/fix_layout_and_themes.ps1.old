# Fix script for Axiom-Phoenix v4.0 layout and theme issues

Write-Host "Fixing layout occlusion, text visibility, and theme application issues..." -ForegroundColor Cyan

# Fix 1: Update TaskListScreen to prevent filter box occlusion
$taskListFixPath = "C:\Users\jhnhe\Documents\GitHub\_XP\_mono\AxiomPhoenix_v4_Split\Screens\ASC.002_TaskListScreen.ps1"
$taskListContent = Get-Content $taskListFixPath -Raw

# Find and replace the filter box positioning
$taskListContent = $taskListContent -replace '(\$this\._filterBox\.Y\s*=\s*)\d+', '$this._filterBox.Y = 3'
$taskListContent = $taskListContent -replace '(\$this\._filterBox\.Height\s*=\s*)\d+', '$this._filterBox.Height = 3'

# Ensure list panel starts below the filter
$taskListContent = $taskListContent -replace '(\$this\._listPanel\.Y\s*=\s*)\d+', '$this._listPanel.Y = 7'
$taskListContent = $taskListContent -replace '(\$this\._listPanel\.Height\s*=\s*[^;]+)', '$this._listPanel.Height = $this.Height - 9'

Set-Content -Path $taskListFixPath -Value $taskListContent -Encoding UTF8


# Fix 2: Fix NewTaskScreen text box positioning
$newTaskPath = "C:\Users\jhnhe\Documents\GitHub\_XP\_mono\AxiomPhoenix_v4_Split\Screens\ASC.004_NewTaskScreen.ps1"

$newTaskContent = @'
# ===== CLASS: NewTaskScreen =====
# Purpose: Full screen for creating new tasks - FIXED LAYOUT
class NewTaskScreen : Screen {
    hidden [Panel]$_formPanel
    hidden [TextBoxComponent]$_titleBox
    hidden [TextBoxComponent]$_descriptionBox
    hidden [ListBox]$_priorityList
    hidden [ListBox]$_projectList
    hidden [LabelComponent]$_statusLabel
    
    NewTaskScreen([object]$serviceContainer) : base("NewTaskScreen", $serviceContainer) {}
    
    [void] Initialize() {
        # Main form panel - full screen
        $this._formPanel = [Panel]::new("NewTaskForm")
        $this._formPanel.X = 0
        $this._formPanel.Y = 0
        $this._formPanel.Width = $this.Width
        $this._formPanel.Height = $this.Height
        $this._formPanel.Title = " New Task "
        $this._formPanel.BorderStyle = "Double"
        $this._formPanel.BorderColor = Get-ThemeColor "Primary"
        $this._formPanel.BackgroundColor = Get-ThemeColor "Background"
        $this.AddChild($this._formPanel)
        
        # Calculate content area
        $contentX = 2
        $contentWidth = [Math]::Min(80, $this._formPanel.Width - 4)
        
        # Title Section
        $y = 2
        $titleLabel = [LabelComponent]::new("TitleLabel")
        $titleLabel.Text = "Task Title:"
        $titleLabel.X = $contentX
        $titleLabel.Y = $y
        $titleLabel.ForegroundColor = Get-ThemeColor "Foreground"
        $this._formPanel.AddChild($titleLabel)
        
        $y += 1
        $this._titleBox = [TextBoxComponent]::new("TitleInput")
        $this._titleBox.X = $contentX
        $this._titleBox.Y = $y
        $this._titleBox.Width = $contentWidth
        $this._titleBox.Height = 3
        $this._titleBox.Placeholder = "Enter task title..."
        $this._titleBox.IsFocusable = $true
        $this._formPanel.AddChild($this._titleBox)
        
        # Description Section - properly spaced
        $y += 4
        $descLabel = [LabelComponent]::new("DescLabel")
        $descLabel.Text = "Description:"
        $descLabel.X = $contentX
        $descLabel.Y = $y
        $descLabel.ForegroundColor = Get-ThemeColor "Foreground"
        $this._formPanel.AddChild($descLabel)
        
        $y += 1
        $this._descriptionBox = [TextBoxComponent]::new("DescInput")
        $this._descriptionBox.X = $contentX
        $this._descriptionBox.Y = $y
        $this._descriptionBox.Width = $contentWidth
        $this._descriptionBox.Height = 3
        $this._descriptionBox.Placeholder = "Enter description..."
        $this._descriptionBox.IsFocusable = $true
        $this._formPanel.AddChild($this._descriptionBox)
        
        # Priority and Project side by side
        $y += 4
        $halfWidth = [Math]::Floor($contentWidth / 2) - 2
        
        # Priority
        $priorityLabel = [LabelComponent]::new("PriorityLabel")
        $priorityLabel.Text = "Priority:"
        $priorityLabel.X = $contentX
        $priorityLabel.Y = $y
        $priorityLabel.ForegroundColor = Get-ThemeColor "Foreground"
        $this._formPanel.AddChild($priorityLabel)
        
        $this._priorityList = [ListBox]::new("PriorityList")
        $this._priorityList.X = $contentX
        $this._priorityList.Y = $y + 1
        $this._priorityList.Width = $halfWidth
        $this._priorityList.Height = 5
        $this._priorityList.HasBorder = $true
        $this._priorityList.BorderStyle = "Single"
        $this._priorityList.AddItem("Low")
        $this._priorityList.AddItem("Medium")
        $this._priorityList.AddItem("High")
        $this._priorityList.SelectedIndex = 1
        $this._priorityList.IsFocusable = $true
        $this._formPanel.AddChild($this._priorityList)
        
        # Project
        $projectX = $contentX + $halfWidth + 4
        $projectLabel = [LabelComponent]::new("ProjectLabel")
        $projectLabel.Text = "Project:"
        $projectLabel.X = $projectX
        $projectLabel.Y = $y
        $projectLabel.ForegroundColor = Get-ThemeColor "Foreground"
        $this._formPanel.AddChild($projectLabel)
        
        $this._projectList = [ListBox]::new("ProjectList")
        $this._projectList.X = $projectX
        $this._projectList.Y = $y + 1
        $this._projectList.Width = $halfWidth
        $this._projectList.Height = 5
        $this._projectList.HasBorder = $true
        $this._projectList.BorderStyle = "Single"
        $this._projectList.AddItem("General")
        $this._projectList.SelectedIndex = 0
        $this._projectList.IsFocusable = $true
        $this._formPanel.AddChild($this._projectList)
        
        # Status and instructions at bottom
        $y = $this._formPanel.Height - 5
        
        $this._statusLabel = [LabelComponent]::new("StatusLabel")
        $this._statusLabel.X = $contentX
        $this._statusLabel.Y = $y
        $this._statusLabel.Text = "Ready to create task"
        $this._statusLabel.ForegroundColor = Get-ThemeColor "Info"
        $this._formPanel.AddChild($this._statusLabel)
        
        $instructLabel = [LabelComponent]::new("InstructLabel")
        $instructLabel.X = $contentX
        $instructLabel.Y = $y + 1
        $instructLabel.Text = "↑↓ Navigate | Enter Edit | Spa"
        $instructLabel.ForegroundColor = Get-ThemeColor "Subtle"
        $this._formPanel.AddChild($instructLabel)
    }
    
    [void] OnEnter() {
        # Load projects
        $dataManager = $this.Services.DataManager
        $projects = $dataManager.GetProjects()
        
        $this._projectList.ClearItems()
        $this._projectList.AddItem("General")
        foreach ($project in $projects) {
            $this._projectList.AddItem($project.Name)
        }
        $this._projectList.SelectedIndex = 0
        
        # Set initial focus
        $focusManager = $this.Services.FocusManager
        $focusManager.SetFocus($this._titleBox)
    }
    
    [void] SaveTask() {
        # Validate input
        if ([string]::IsNullOrWhiteSpace($this._titleBox.Text)) {
            $this._statusLabel.Text = "Error: Title is required"
            $this._statusLabel.ForegroundColor = Get-ThemeColor "Error"
            return
        }
        
        # Create new task
        $task = [PmcTask]::new()
        $task.Title = $this._titleBox.Text
        $task.Description = $this._descriptionBox.Text
        
        # Set priority
        $priorityMap = @{
            0 = [TaskPriority]::Low
            1 = [TaskPriority]::Medium  
            2 = [TaskPriority]::High
        }
        $task.Priority = $priorityMap[$this._priorityList.SelectedIndex]
        
        # Set project
        if ($this._projectList.SelectedIndex -gt 0) {
            $dataManager = $this.Services.DataManager
            $projects = $dataManager.GetProjects()
            if (($this._projectList.SelectedIndex - 1) -lt $projects.Count) {
                $task.ProjectKey = $projects[$this._projectList.SelectedIndex - 1].Key
            }
        }
        
        # Save task
        try {
            $dataManager = $this.Services.DataManager
            $dataManager.AddTask($task)
            $dataManager.SaveData()  # Force save
            
            $this._statusLabel.Text = "Task created successfully!"
            $this._statusLabel.ForegroundColor = Get-ThemeColor "Success"
            
            # Navigate back after short delay
            Start-Sleep -Milliseconds 500
            $navService = $this.Services.NavigationService
            $navService.GoBack()
        }
        catch {
            $this._statusLabel.Text = "Error: $($_.Exception.Message)"
            $this._statusLabel.ForegroundColor = Get-ThemeColor "Error"
        }
    }
    
    [bool] HandleInput([System.ConsoleKeyInfo]$keyInfo) {
        if ($null -eq $keyInfo) { return $false }
        
        # ESC to cancel
        if ($keyInfo.Key -eq [ConsoleKey]::Escape) {
            $navService = $this.Services.NavigationService
            $navService.GoBack()
            return $true
        }
        
        # Ctrl+S to save
        if ($keyInfo.Key -eq [ConsoleKey]::S -and ($keyInfo.Modifiers -band [ConsoleModifiers]::Control)) {
            $this.SaveTask()
            return $true
        }
        
        # Let base handle focus navigation
        return ([Screen]$this).HandleInput($keyInfo)
    }
}
'@

Set-Content -Path $newTaskPath -Value $newTaskContent -Encoding UTF8


# Fix 3: Fix ThemeScreen to actually apply themes
$themeScreenPath = "C:\Users\jhnhe\Documents\GitHub\_XP\_mono\AxiomPhoenix_v4_Split\Screens\ASC.003_ThemeScreen.ps1"

# Read current content and fix the ApplySelectedTheme method
$themeContent = Get-Content $themeScreenPath -Raw

# Replace the ApplySelectedTheme method to force a full redraw
$fixedApplyMethod = @'
    hidden [void] ApplySelectedTheme() {
        if ($this._themeList.SelectedIndex -ge 0 -and $this._themeList.SelectedIndex -lt $this._themes.Count) {
            $selectedTheme = $this._themes[$this._themeList.SelectedIndex]
            $themeManager = $this.ServiceContainer.GetService("ThemeManager")
            
            if ($themeManager) {
                # Apply all theme colors
                foreach ($colorKey in $selectedTheme.Colors.Keys) {
                    $themeManager.SetColor($colorKey, $selectedTheme.Colors[$colorKey])
                }
                
                # Update theme name
                $themeManager.ThemeName = $selectedTheme.Name
                
                # Force full application redraw
                $global:TuiState.IsDirty = $true
                
                # Publish theme change event
                $eventManager = $this.ServiceContainer.GetService("EventManager")
                if ($eventManager) {
                    $eventManager.Publish("Theme.Changed", @{
                        ThemeName = $selectedTheme.Name
                    })
                }
                
                Write-Log -Level Info -Message "Applied theme: $($selectedTheme.Name)"
                
                # Show confirmation
                $this._statusLabel.Text = "Theme '$($selectedTheme.Name)' applied! Returning to previous screen..."
                $this._statusLabel.ForegroundColor = Get-ThemeColor "success"
                $this.RequestRedraw()
                
                # Go back after short delay
                Start-Sleep -Milliseconds 1000
                $navService = $this.ServiceContainer.GetService("NavigationService")
                if ($navService -and $navService.CanGoBack()) {
                    $navService.GoBack()
                }
            }
        }
    }
'@

# Replace the method
$themeContent = $themeContent -replace '(hidden\s+\[void\]\s+ApplySelectedTheme\(\)\s*\{[^}]+\})', $fixedApplyMethod

# Also fix the preview panel width to prevent truncation
$themeContent = $themeContent -replace '(\$this\._previewPanel\.Width\s*=\s*[^;]+)', '$this._previewPanel.Width = [Math]::Max(50, $this._mainPanel.Width - $previewX - 2)'

Set-Content -Path $themeScreenPath -Value $themeContent -Encoding UTF8


# Fix 4: Update ThemeManager to trigger redraws on color changes
$themeManagerPath = "C:\Users\jhnhe\Documents\GitHub\_XP\_mono\AxiomPhoenix_v4_Split\Services\ASE.003_ThemeManager.ps1"
$themeManagerContent = Get-Content $themeManagerPath -Raw

# Add redraw trigger to SetColor method
$themeManagerContent = $themeManagerContent -replace '(\[void\]\s+SetColor\([^\)]+\)\s*\{[^}]+)(\})', @'
$1
        # Force redraw when colors change
        if ($global:TuiState) {
            $global:TuiState.IsDirty = $true
        }
$2
'@

Set-Content -Path $themeManagerPath -Value $themeManagerContent -Encoding UTF8

Write-Host "`nFixed issues:" -ForegroundColor Green
Write-Host "1. NewTaskScreen: Text boxes now properly positioned without occlusion" -ForegroundColor Yellow
Write-Host "2. TaskListScreen: Filter box moved to prevent occlusion of list items" -ForegroundColor Yellow  
Write-Host "3. ThemeScreen: Themes now apply immediately with forced redraw" -ForegroundColor Yellow
Write-Host "4. ThemeScreen: Preview panel width fixed to prevent truncation" -ForegroundColor Yellow
Write-Host "5. Added ESC key support to cancel new task entry" -ForegroundColor Yellow
Write-Host "6. Data persistence: Tasks now save immediately to disk" -ForegroundColor Yellow

Write-Host "`nRestart the application to see the fixes in action." -ForegroundColor Cyan
