name: Axiom-Phoenix Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  # Disable PowerShell telemetry
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        test-type: [Unit, Integration, Performance]
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup PowerShell
      shell: pwsh
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
        Write-Host "OS: $($PSVersionTable.OS)"
    
    - name: Install Pester
      shell: pwsh
      run: |
        Install-Module -Name Pester -Force -Scope CurrentUser -MinimumVersion 5.0 -AllowClobber
        Import-Module Pester
        Get-Module Pester
    
    - name: Run ${{ matrix.test-type }} Tests
      shell: pwsh
      run: |
        ./Run-Tests.ps1 -TestType ${{ matrix.test-type }} -OutputFormat JUnitXml -OutputFile "TestResults-${{ matrix.test-type }}-${{ matrix.os }}.xml" -Verbosity Normal
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}-${{ matrix.os }}
        path: TestResults-*.xml
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: ${{ matrix.test-type }} Tests (${{ matrix.os }})
        path: TestResults-*.xml
        reporter: java-junit
        fail-on-error: true

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup PowerShell
      shell: pwsh
      run: |
        Install-Module -Name Pester -Force -Scope CurrentUser -MinimumVersion 5.0 -AllowClobber
        Import-Module Pester
    
    - name: Run tests with coverage
      shell: pwsh
      run: |
        $config = [PesterConfiguration]::Default
        $config.Run.Path = "./Tests"
        $config.TestResult.Enabled = $true
        $config.TestResult.OutputFormat = "JUnitXml"
        $config.TestResult.OutputPath = "coverage-results.xml"
        $config.CodeCoverage.Enabled = $true
        $config.CodeCoverage.Path = @("./Base/*.ps1", "./Components/*.ps1", "./Services/*.ps1", "./Runtime/*.ps1")
        $config.CodeCoverage.OutputFormat = "JaCoCo"
        $config.CodeCoverage.OutputPath = "coverage.xml"
        
        $result = Invoke-Pester -Configuration $config
        
        if ($result.FailedCount -gt 0) {
          exit 1
        }
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: axiom-phoenix-coverage

  performance-benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup PowerShell
      shell: pwsh
      run: |
        Install-Module -Name Pester -Force -Scope CurrentUser -MinimumVersion 5.0 -AllowClobber
        Import-Module Pester
    
    - name: Run performance benchmarks
      shell: pwsh
      run: |
        ./Run-Tests.ps1 -TestType Performance -GenerateReport -Verbosity Detailed
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-benchmarks
        path: TestReport-*.html
    
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      if: github.ref == 'refs/heads/main'
      with:
        tool: 'customSmallerIsBetter'
        output-file-path: performance-data.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        
        $analysisResults = @()
        $scriptFiles = Get-ChildItem -Path . -Recurse -Include "*.ps1" -Exclude "Tests/*"
        
        foreach ($file in $scriptFiles) {
          $results = Invoke-ScriptAnalyzer -Path $file.FullName -Severity @('Error', 'Warning', 'Information')
          $analysisResults += $results
        }
        
        if ($analysisResults.Count -gt 0) {
          Write-Host "PSScriptAnalyzer found $($analysisResults.Count) issues:" -ForegroundColor Yellow
          $analysisResults | Format-Table -AutoSize
          
          $errorCount = ($analysisResults | Where-Object Severity -eq 'Error').Count
          if ($errorCount -gt 0) {
            Write-Host "Found $errorCount errors - failing build" -ForegroundColor Red
            exit 1
          }
        } else {
          Write-Host "No issues found by PSScriptAnalyzer" -ForegroundColor Green
        }

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup PowerShell
      shell: pwsh
      run: |
        Install-Module -Name Pester -Force -Scope CurrentUser -MinimumVersion 5.0 -AllowClobber
        Import-Module Pester
    
    - name: Run full integration test suite
      shell: pwsh
      run: |
        # Start the application in test mode
        $process = Start-Process -FilePath "pwsh" -ArgumentList "-File ./Start.ps1 -Debug" -PassThru -NoNewWindow
        
        try {
          # Wait for application to start
          Start-Sleep -Seconds 5
          
          # Run integration tests
          ./Run-Tests.ps1 -TestType Integration -Verbosity Normal
        } finally {
          # Clean up
          if ($process -and !$process.HasExited) {
            $process.Kill()
          }
        }

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, coverage, performance-benchmark, security-scan, integration-test]
    if: always() && (github.event_name == 'push' || github.event_name == 'pull_request')
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.coverage.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=All tests passed successfully! ✅" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=Some tests failed! ❌" >> $GITHUB_OUTPUT
        fi
    
    - name: Create status comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const message = `
          ## Test Results 🧪
          
          **Status:** ${{ steps.status.outputs.message }}
          
          **Test Results:**
          - Unit Tests: ${{ needs.test.result }}
          - Integration Tests: ${{ needs.integration-test.result }}
          - Performance Tests: ${{ needs.performance-benchmark.result }}
          - Security Scan: ${{ needs.security-scan.result }}
          - Code Coverage: ${{ needs.coverage.result }}
          
          **Artifacts:**
          - [Test Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          *Automated test results for commit ${{ github.sha }}*
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });