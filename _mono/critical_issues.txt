Excellent. This analysis provides a high-level, conceptual overview of what's needed to make the framework "live." It correctly identifies the missing "orchestration logic" and outlines the four pillars required for an interactive TUI.

Now, I will integrate this conceptual analysis with the specific, actionable fixes we've already discussed. This will create a single, comprehensive guide that bridges the gap between the high-level concepts (what's missing) and the low-level code changes (how to fix it).

The result is a unified document that explains *why* a change is needed (the concept) and *how* to implement it (the code), which is exactly what's required for a final stabilization plan.

---

### **Axiom-Phoenix Framework: Final Stabilization & Integration Plan**

This document consolidates all required fixes and architectural improvements for the Axiom-Phoenix framework. It combines high-level concepts with specific, actionable code changes to transform the static components into a stable, live, and interactive TUI application.

### **The Missing Orchestration Logic: Bringing the Framework to Life**

The provided code defines the *static components* of the framework (the "what") but lacks the dynamic engine (the "how") that makes them interactive. To become a real TUI, the framework requires the implementation of four fundamental pillars, which are driven by the main application loop.

1.  **The Core Engine Loop:** A persistent `while` loop that keeps the application running and coordinates all other activities.
2.  **Input Processing & Dispatch:** A system to read keyboard input and deliver it to the correct, focused component.
3.  **State Management & The Render Cycle:** A mechanism to redraw the screen efficiently and only when something has changed (the "dirty" flag).
4.  **Focus Management:** A system to track which component is "active" and should receive keyboard input.

The following fixes are designed to correctly implement these pillars and resolve the inconsistencies and bugs preventing them from working together.

---

### **Category 1: Critical Blocking Issues (Must Be Fixed to Run)**

These issues will cause the application to crash on startup or become permanently stuck.

#### 1.1. Uncallable Function Reference in `TuiBuffer`
*   **Concept:** PowerShell class methods exist in a different scope from global script functions. A class method cannot directly call a global function.
*   **Problem:** The `TuiBuffer.DrawBox` method violates this rule by trying to call the global function `Write-TuiBox`, which will cause a "Command not found" error and crash any component with a border.
*   **Location:** `allbaseclasses.txt` -> `PAGE: ABC.003 - TuiBuffer Class`.
*   **Fix:** **Remove the `DrawBox` method from the `TuiBuffer` class.** Components that need to draw a box must call the global `Write-TuiBox` function from their own `OnRender` method, passing their private buffer (`$this._private_buffer`) as the `-Buffer` parameter.

#### 1.2. Dialogs Cannot Be Closed
*   **Concept:** A decoupled event system requires both a publisher and a subscriber. Dialogs publish a `Dialog.Completed` event, but the service responsible for managing them (`DialogManager`) is not listening.
*   **Problem:** When a dialog button is clicked, its event is fired into the void. The `DialogManager` never receives it and therefore never hides the dialog, leaving the UI permanently blocked.
*   **Location:** `AllServices.txt` -> `PAGE: ASE.009` -> `DialogManager` class constructor.
*   **Fix:** The `DialogManager` must subscribe to the `Dialog.Completed` event in its constructor and call its own `HideDialog` method in the event handler.

    **Add the following code inside the `DialogManager` constructor:**
    ```powershell
    DialogManager([EventManager]$eventManager, [FocusManager]$focusManager) {
        $this.EventManager = $eventManager
        $this.FocusManager = $focusManager
        
        # ADD THIS SUBSCRIPTION
        if ($this.EventManager) {
            $handler = {
                param($eventData)
                $dialogToHide = $eventData.Dialog
                if ($dialogToHide) {
                    $this.HideDialog($dialogToHide)
                }
            }.GetNewClosure()
            $this.EventManager.Subscribe("Dialog.Completed", $handler)
        }
    }
    ```

---

### **Category 2: Major Architectural & Functional Flaws**

These issues violate the framework's own design principles, leading to incorrect behavior, rendering artifacts, and an unstable UI.

#### 2.1. Inconsistent Screen Rendering in `DashboardScreen`
*   **Concept:** In a component-based TUI, all visual elements should be components. This allows the framework to manage their layout, rendering, and focus consistently. Drawing directly to a parent's buffer bypasses this entire system.
*   **Problem:** The `DashboardScreen` draws its content using `Write-TuiText` directly on its panels' buffers instead of creating `LabelComponent` children. This breaks the component model and will cause major redraw and focus bugs.
*   **Location:** `AllScreens.txt` -> `PAGE: ASC.001 - DashboardScreen Class`.
*   **Fix:** Refactor all `_Update...` methods in `DashboardScreen` to create and add `LabelComponent` instances to the panels.

#### 2.2. Flawed Component Logic in `TaskListScreen`
*   **Concept:** A parent container (like `ScrollablePanel`) should not need to know the implementation details of its children. It should simply be responsible for laying them out and telling them to render. The children handle their own appearance.
*   **Problem:** The `TaskListScreen._UpdateTaskList` method tries to manually draw the list items. The correct approach is to create a `UIElement` (like a `Panel` with a `Label` inside) for each task and add it as a child to the `ScrollablePanel`. This lets the `ScrollablePanel` handle the complex virtualization and scrolling logic generically.
*   **Location:** `AllScreens.txt` -> `PAGE: ASC.002` -> `_UpdateTaskList` method.
*   **Fix:** Replace the direct drawing logic with component creation.

    **Replace the existing `_UpdateTaskList` with this logic:**
    ```powershell
    hidden [void] _UpdateTaskList() {
        $panel = $this._taskListPanel
        if (-not $panel) { return }

        # Clear the panel's CHILDREN, not its buffer directly.
        $panel.Children.Clear()

        # Create a UIElement (Panel + Label) for each task
        for ($i = 0; $i -lt $this._tasks.Count; $i++) {
            $task = $this._tasks[$i]
            $is_selected = ($i -eq $this._selectedIndex)

            # Create a Panel for each item to allow background highlighting
            $taskPanel = [Panel]::new("TaskItem_$($task.Id)")
            $taskPanel.X = 0; $taskPanel.Y = $i # Y position is its index
            $taskPanel.Width = $panel.ContentWidth; $taskPanel.Height = 1
            $taskPanel.HasBorder = $false
            $taskPanel.BackgroundColor = if ($is_selected) { Get-ThemeColor "list.item.selected.background" } # ...

            # Create a label for the text
            $taskLabel = [LabelComponent]::new("TaskLabel_$($task.Id)")
            $taskLabel.Text = # ... your formatted task line ...
            $taskPanel.AddChild($taskLabel)

            # Add the item's Panel as a CHILD of the scrollable panel
            $panel.AddChild($taskPanel)
        }
        # The ScrollablePanel's Render method will now handle everything else.
        $panel.RequestRedraw()
    }
    ```

#### 2.3. Dialogs Using Manual/Buggy Focus System
*   **Concept:** The **Focus Management** pillar requires a single, centralized service (`FocusManager`) to be the source of truth for which component is active.
*   **Problem:** `ConfirmDialog` and `InputDialog` implement their own `_focusIndex`, creating a competing and incompatible focus system that will not work with global `Tab` navigation.
*   **Location:** `AllComponents.txt` -> `PAGE: ACO.019` (`ConfirmDialog`) and `ACO.020` (`InputDialog`).
*   **Fix:** Remove all `_focusIndex` and `UpdateFocus()` logic. Use the `FocusManager` to set initial focus in the dialog's `OnEnter` method, and use it again in `HandleInput` to manage custom navigation (like arrow keys).

#### 2.4. Lack of UI Updates on Background Data Changes
*   **Concept:** The **Render Cycle** pillar depends on a "dirty" flag to know when to redraw the screen. If an action occurs that doesn't involve direct user input (like a background data update), this flag must be set manually.
*   **Problem:** The event handlers in `DashboardScreen` and `TaskListScreen` update their state but fail to notify the main loop that a render is needed. The UI will appear frozen until the user presses a key.
*   **Location:** `AllScreens.txt` (`DashboardScreen`, `TaskListScreen` event handlers).
*   **Fix:** Add `$global:TuiState.IsDirty = $true` at the end of the event handler scriptblocks in both screens to force a render on the next frame.

---

### **Category 3: Hardening, Stability, and Future-Proofing**

These changes make the framework more resilient, align with best practices, and prepare for future features.

#### 3.1. Resilient Data Loading
*   **Concept:** A robust application should gracefully handle corrupted or malformed configuration and data files without crashing.
*   **Problem:** `DataManager.LoadData()` will fail entirely if a single record in the JSON file is invalid.
*   **Location:** `AllServices.txt` -> `PAGE: ASE.003` -> `DataManager.LoadData`.
*   **Fix:** Refactor the `foreach` loops in `LoadData` to wrap the processing of each individual task and project in its own `try/catch` block. This allows the application to load all valid data while logging and skipping any corrupted entries.

#### 3.2. Cascading Resource Cleanup
*   **Concept:** To prevent memory leaks, components that subscribe to system-wide events must have a reliable way to unsubscribe when they are destroyed. A cascading `Cleanup()` method is the standard pattern for this.
*   **Problem:** Screens subscribe to events but never unsubscribe, creating memory leaks.
*   **Location:** `allbaseclasses.txt` (`UIElement`), `AllServices.txt` (`NavigationService`), `AllScreens.txt`.
*   **Fix:**
    1.  In `UIElement.Cleanup`, ensure it calls a virtual `OnCleanup()` method before cascading to its children.
    2.  In screens like `DashboardScreen`, override `OnCleanup()` to perform the `Unsubscribe` logic.
    3.  In `NavigationService.GoBack`, add a call to `$this.CurrentScreen.Cleanup()` on the screen being closed.

#### 3.3. Window Resize Handling
*   **Concept:** A modern TUI must adapt its layout when the terminal window is resized by the user.
*   **Problem:** The main engine loop never checks for window size changes after initialization.
*   **Location:** `AllRuntime.txt` -> `PAGE: ART.002` -> `Start-TuiEngine`.
*   **Fix:** Add a check at the beginning of the `while ($global:TuiState.Running)` loop to compare `[Console]::WindowWidth`/`Height` with the stored values in `$global:TuiState`. If they differ, call the existing `Update-TuiEngineSize` function.

#### 3.4. Contextual Keybinding Remapping
*   **Concept:** Advanced UIs need to change available keyboard shortcuts based on the current context (e.g., a dialog is open, text editor is active).
*   **Problem:** The `KeybindingService` has a `ContextStack` for this purpose, but it is never used.
*   **Location:** `AllServices.txt` -> `PAGE: ASE.002` -> `KeybindingService`.
*   **Fix:** **[To Be Implemented Later]** This feature is correctly marked for retention. The plan is to have services like `DialogManager` call `PushContext` and `PopContext` to dynamically change the active keymap when modals are shown and hidden. No immediate code change is needed.


####AND ALSO IMPLEMENT NOW:
1. Sophisticated Layout Panels (Immediate Stability Win)
This is the single most impactful improvement you can make right now. Manually setting X/Y coordinates is brittle and a primary source of UI bugs. Implementing a VerticalStackPanel is a low-difficulty, high-reward task that will immediately make your UI code more robust and maintainable.
Concept: Declarative vs. Imperative UI
Problem (Current - Imperative): You are manually calculating the position of every control. If you add a button, you must manually shift every control below it down. This is error-prone.
Solution (New - Declarative): You tell a parent panel, "Arrange these children vertically," and it does the math for you.
How to Implement This Now:
Step 1: Create the VerticalStackPanel Class
This class doesn't need much logic itself; it's mostly a marker class that inherits from Panel and sets a default LayoutType.
File: AllComponents.txt (or allbaseclasses.txt if you consolidate panel classes there)
Action: Add this new class definition.
Generated powershell
# Add this class definition
class VerticalStackPanel : Panel {
    [int]$Spacing = 1 # The vertical space between children

    VerticalStackPanel([string]$name) : base($name) {
        # The key change: tell the base Panel class what kind of layout to perform.
        $this.LayoutType = "Vertical"
    }
}
Use code with caution.
Powershell
Step 2: Implement the Layout Logic in the Base Panel Class
The base Panel class will contain the logic. This makes it reusable for other layout types later.
File: allbaseclasses.txt -> PAGE: ABC.011 - Panel Class (or wherever your Panel class is).
Action: Add an ApplyLayout method to the Panel class and call it from OnRender.
Generated powershell
# In the Panel class definition

# Add this property to the Panel class
[string]$LayoutType = "Manual"  # Can be "Manual", "Vertical", "Horizontal"

# Add this new method to the Panel class
[void] ApplyLayout() {
    if ($this.LayoutType -eq "Manual") { return }

    # Define the area available for children inside the border and padding
    $contentX = $this.ContentX
    $currentY = $this.ContentY

    # Get only the children that should be part of the layout
    $visibleChildren = @($this.Children | Where-Object { $_.Visible })
    if ($visibleChildren.Count -eq 0) { return }

    switch ($this.LayoutType) {
        "Vertical" {
            # This is the core logic
            foreach ($child in $visibleChildren) {
                # Set the child's position based on the previous child
                $child.X = $contentX
                $child.Y = $currentY
                
                # Advance the Y position for the next child
                $currentY += $child.Height
                
                # Add spacing if the panel has a Spacing property (like VerticalStackPanel)
                if ($this.PSObject.Properties['Spacing']) {
                    $currentY += $this.Spacing
                }
            }
        }
        "Horizontal" {
            # Implement similar logic for the X axis later
        }
    }
}

# Modify the OnRender method in the Panel class to call ApplyLayout
[void] OnRender() {
    # ... existing logic to clear buffer and draw border ...

    # ADD THIS CALL:
    # This automatically positions children before they are rendered and blended.
    $this.ApplyLayout()

    # The rest of the OnRender method (the loop that blends children) remains the same.
}
Use code with caution.
Powershell
Impact: This immediately stabilizes UI construction. Instead of dozens of lines setting X/Y coordinates in your screens, you will have a few lines adding children to a VerticalStackPanel. This dramatically reduces the chance of positioning errors and makes future UI changes trivial.


#####FUTURE IMPROVEMENTS
A. Sophisticated Layout Panels
Manually setting X and Y for every control is brittle and tedious. If you add a new control in the middle of a screen, you have to manually recalculate the position of every subsequent control. Layout panels solve this by making UI design declarative.
1. VerticalStackPanel and HorizontalStackPanel
These are the fundamental building blocks of automated layout.
Concept: A container that arranges its children in a single line (either down or across), handling spacing and padding automatically.
How to Implement (VerticalStackPanel):
Create the Class:
Generated powershell
class VerticalStackPanel : Panel {
    [int]$Padding = 0
    [int]$Spacing = 1 # Space between children
}
Use code with caution.
Powershell
Override the Layout Logic: The best place for this logic is within the Panel's ApplyLayout method, which is called during its OnRender cycle. The Panel class already has a stub for this; we just need to implement the "Vertical" case.
Generated powershell
# In the Panel class
[void] ApplyLayout() {
    if ($this.LayoutType -eq "Manual") { return }

    # Define the area available for children
    $contentArea = $this.GetContentArea() # Your helper to get area inside border/padding
    $currentY = $contentArea.Y

    # Get only the children that should be part of the layout
    $visibleChildren = @($this.Children | Where-Object { $_.Visible })
    if ($visibleChildren.Count -eq 0) { return }

    switch ($this.LayoutType) {
        "Vertical" {
            foreach ($child in $visibleChildren) {
                $child.X = $contentArea.X
                $child.Y = $currentY
                # Optionally, make child fill the width of the panel
                # $child.Width = $contentArea.Width
                
                # This is the core logic: advance the Y position for the next child
                $currentY += $child.Height + $this.Spacing
            }
        }
        "Horizontal" {
            # ... similar logic for the X axis ...
        }
    }
}
Use code with caution.
Powershell
Note: HorizontalStackPanel would be identical, just manipulating currentX and child.X instead of currentY and child.Y.
Difficulty: Low to Medium. The logic is self-contained and primarily involves arithmetic. The main challenge is ensuring the GetContentArea helper correctly accounts for borders and padding.
DX Impact: Massive. This is a night-and-day difference.
Before (Manual Layout):
Generated powershell
# In a screen's Initialize method
$this._label1.X = 2; $this._label1.Y = 2
$this._textbox1.X = 2; $this._textbox1.Y = 3 # Manual Y = 2 + 1
$this._label2.X = 2; $this._label2.Y = 6 # Manual Y = 3 + 3
$this._textbox2.X = 2; $this._textbox2.Y = 7 # Manual Y = 6 + 1
$this.AddChild($this._label1)
$this.AddChild($this._textbox1)
# ... etc ...
Use code with caution.
Powershell
After (Declarative Layout):
Generated powershell
# In a screen's Initialize method
$stackPanel = [VerticalStackPanel]::new("MyForm")
$stackPanel.LayoutType = "Vertical" # Set the layout mode
$stackPanel.AddChild($this._label1)
$stackPanel.AddChild($this._textbox1)
$stackPanel.AddChild($this._label2)
$stackPanel.AddChild($this._textbox2)
$this.AddChild($stackPanel) # Add the single panel to the screen
Use code with caution.
Powershell
Now, if you want to add a checkbox between _textbox1 and _label2, you just insert one line: $stackPanel.AddChild($this._myCheckbox). The panel handles repositioning everything else automatically.
2. GridPanel
Concept: A powerful container that arranges children in a grid of rows and columns, allowing for complex, aligned UIs.
How to Implement:
This is significantly more complex.
Class Definition:
Generated powershell
class GridPanel : Panel {
    [object[]]$RowDefinitions # Array of objects like @{ Type='Fixed'; Value=3 } or @{ Type='Star'; Value=1 }
    [object[]]$ColumnDefinitions
}
Use code with caution.
Powershell
Layout Logic: The ApplyLayout method would need to:
a. Calculate the final pixel height of each "Star" row (*) by subtracting the fixed-size rows from the total available height and dividing the remainder.
b. Do the same for column widths.
c. Children of a GridPanel would need new metadata properties, like $child.Metadata.GridRow = 0, $child.Metadata.GridColumn = 1.
d. The layout logic would iterate through children, read their GridRow and GridColumn metadata, and place them in the calculated coordinate space of that cell.
Difficulty: High. This requires robust parsing of row/column definitions and a two-pass layout algorithm (measure, then arrange). It's a significant undertaking.

Excellent choices. Let's tackle these one by one.

---

### Part 1: Improved Line Drawing (Option 1 - Smarter PowerShell)

This refactoring of `Write-TuiBox` improves readability and maintainability by separating the logic for *generating* the box from the logic for *drawing* it to the buffer. It also slightly improves performance by reducing the number of individual calls to `WriteString`.

Here is the new, improved `Write-TuiBox` function for `AllFunctions.txt`.

```powershell
# In AllFunctions.txt, replacing the old Write-TuiBox

function Write-TuiBox {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)][TuiBuffer]$Buffer,
        [Parameter(Mandatory)][int]$X,
        [Parameter(Mandatory)][int]$Y,
        [Parameter(Mandatory)][int]$Width,
        [Parameter(Mandatory)][int]$Height,
        [string]$Title = "",
        [hashtable]$Style = @{} # All visual aspects now passed via Style hashtable
    )

    if ($null -eq $Buffer -or $Width -le 0 -or $Height -le 0) {
        # Write-Log -Level Warning -Message "Write-TuiBox: Invalid dimensions ($($Width)x$($Height)). Dimensions must be positive."
        return
    }

    # 1. Extract style properties with safe fallbacks
    $borderStyleName = $Style.BorderStyle ?? "Single"
    $borderColor = $Style.BorderFG ?? "#808080"
    $bgColor = $Style.BG ?? "#000000"
    $titleColor = $Style.TitleFG ?? $borderColor
    $fillChar = [char]($Style.FillChar ?? ' ')

    $borders = Get-TuiBorderChars -Style $borderStyleName

    # Define style objects for child calls to WriteString
    $borderStyle = @{ FG = $borderColor; BG = $bgColor }
    $fillStyle = @{ FG = $borderColor; BG = $bgColor } # Fill char uses border color for visibility
    $titleTextStyle = @{ FG = $titleColor; BG = $bgColor }

    # 2. Build the box lines in memory as an array of strings
    $lines = [System.Collections.Generic.List[string]]::new()
    $horizontalBorder = $borders.Horizontal * [Math]::Max(0, $Width - 2)

    # Top Border
    if ($Height -ge 1) {
        $topLine = "$($borders.TopLeft)$($horizontalBorder)$($borders.TopRight)"
        # Handle small widths
        if ($Width -eq 1) { $topLine = $borders.Vertical }
        elseif ($Width -eq 0) { $topLine = "" }
        $lines.Add($topLine)
    }

    # Middle Content Area (Filled)
    $middleFill = "$($borders.Vertical)$($fillChar * [Math]::Max(0, $Width - 2))$($borders.Vertical)"
    for ($i = 1; $i -lt ($Height - 1); $i++) {
        # Handle small widths
        if ($Width -eq 1) { $lines.Add($borders.Vertical) }
        elseif ($Width -gt 1) { $lines.Add($middleFill) }
    }

    # Bottom Border
    if ($Height -ge 2) {
        $bottomLine = "$($borders.BottomLeft)$($horizontalBorder)$($borders.BottomRight)"
        # Handle small widths
        if ($Width -eq 1) { $bottomLine = $borders.Vertical }
        elseif ($Width -eq 0) { $bottomLine = "" }
        $lines.Add($bottomLine)
    }

    # 3. Draw the generated lines and the fill to the buffer
    # Fill the entire area first. This is important for the background color.
    $Buffer.FillRect($X, $Y, $Width, $Height, $fillChar, $fillStyle)

    # Draw the border lines over the fill
    for ($i = 0; $i -lt $lines.Count; $i++) {
        if ($lines[$i]) {
            $Buffer.WriteString($X, $Y + $i, $lines[$i], $borderStyle)
        }
    }

    # 4. Draw title (unchanged logic)
    if (-not [string]::IsNullOrEmpty($Title) -and $Y -ge 0 -and $Y -lt $Buffer.Height -and $Width > 2) {
        $titleText = " $Title "
        if ($titleText.Length -le ($Width - 2)) {
            $titleX = $X + [Math]::Floor(($Width - $titleText.Length) / 2)
            $Buffer.WriteString($titleX, $Y, $titleText, $titleTextStyle)
        }
    }
    
    $Buffer.IsDirty = $true
}
```

This version is more robust, easier to debug, and prepares the groundwork for even more advanced drawing techniques later.

---

### Part 2: Improving `CommandPalette` with a C# Fuzzy Search

Your current `CommandPalette` uses `.Contains()`, which is a basic substring search. Users expect a more intelligent, "fuzzy" search like those in VS Code or Spotlight. Typing `nav dash` should match "**Nav**igation: Go to **Dash**board".

We can achieve this by implementing a well-known fuzzy matching algorithm, **FuzzySharp**, in C# and calling it from PowerShell. Since we can't use external DLLs, we'll include a simplified, dependency-free version of a similar algorithm directly in our `Add-Type` string.

#### Step 1: Define the C# Fuzzy Searcher

We will create a C# static class with a single method that calculates a "match score" between a query and a target string. We will then use this score to rank results.

Place this at the top of your `Start.ps1` file, right after the configuration section and before framework loading. This ensures the type is available to all subsequent scripts.

```powershell
# In Start.ps1, PAGE: STA.001 - Script Configuration (or a new section)

#region Add Custom C# Types
Write-Host "Compiling C# helper types..." -ForegroundColor Cyan

$csharpFuzzySearchSource = @"
using System;
using System.Collections.Generic;

public static class FuzzySearcher
{
    // This method returns a score from 0-100, where 100 is a perfect match.
    // It's a simplified fuzzy matching algorithm.
    public static int GetFuzzyMatchScore(string query, string target)
    {
        if (string.IsNullOrEmpty(query) || string.IsNullOrEmpty(target))
            return 0;

        string lowerQuery = query.ToLowerInvariant();
        string lowerTarget = target.ToLowerInvariant();

        if (lowerTarget.Contains(lowerQuery))
            return 100 - (lowerTarget.Length - lowerQuery.Length); // High score for direct contains

        int score = 0;
        int queryIndex = 0;
        int targetIndex = 0;
        int consecutiveMatches = 0;

        while (queryIndex < lowerQuery.Length && targetIndex < lowerTarget.Length)
        {
            if (lowerQuery[queryIndex] == lowerTarget[targetIndex])
            {
                score += 10; // Base score for a match
                score += consecutiveMatches * 5; // Bonus for consecutive characters
                consecutiveMatches++;
                queryIndex++;
            }
            else
            {
                consecutiveMatches = 0;
            }
            targetIndex++;
        }

        // If we found all characters from the query, it's a potential match
        if (queryIndex == lowerQuery.Length)
        {
            // Normalize score based on length difference
            int lengthPenalty = Math.Abs(lowerTarget.Length - lowerQuery.Length);
            return Math.Max(0, score - lengthPenalty);
        }

        return 0; // Not all characters were found
    }
    
    // A class to hold the result for easy sorting in PowerShell
    public class FuzzySearchResult
    {
        public object Item { get; set; }
        public int Score { get; set; }
    }
}
"@

try {
    Add-Type -TypeDefinition $csharpFuzzySearchSource -Language CSharp
    Write-Host "C# helper types compiled successfully!" -ForegroundColor Green
} catch {
    Write-Error "Failed to compile C# helper types: $_"
    throw
}
#endregion
```

#### Step 2: Modify `CommandPalette.FilterActions`

Now, we replace the simple `.Contains()` logic in your `CommandPalette` with a call to our new C# static method. This will score and rank the results.

This change happens in `AllComponents.txt`.

```powershell
# In AllComponents.txt, PAGE: ACO.016 - CommandPalette Class

# ... inside the CommandPalette class ...

[void] FilterActions([string]$searchText) {
    $this._filteredActions.Clear()
    $this._listBox.ClearItems()
    
    if ([string]::IsNullOrWhiteSpace($searchText)) {
        # No search text, so show all actions, sorted alphabetically
        $sortedActions = $this._allActions | Sort-Object Category, Name
        foreach ($action in $sortedActions) {
            $this._filteredActions.Add($action)
            $displayText = if ($action.Category) { 
                "[$($action.Category)] $($action.Name) - $($action.Description)" 
            } else { 
                "$($action.Name) - $($action.Description)" 
            }
            $this._listBox.AddItem($displayText)
        }
    }
    else {
        # Fuzzy search using the C# helper
        $results = [System.Collections.Generic.List[object]]::new()
        
        foreach ($action in $this._allActions) {
            # Create a combined string to search against for better results
            $searchableText = "$($action.Category) $($action.Name) $($action.Description)"
            
            # Call our C# static method
            $score = [FuzzySearcher]::GetFuzzyMatchScore($searchText, $searchableText)
            
            if ($score -gt 20) { # Use a threshold to filter out very poor matches
                # Create a result object to hold the item and its score
                $result = [FuzzySearcher+FuzzySearchResult]::new()
                $result.Item = $action
                $result.Score = $score
                $results.Add($result)
            }
        }
        
        # Sort the results by score (highest first)
        $sortedResults = $results | Sort-Object Score -Descending
        
        # Add the sorted, filtered actions to the listbox
        foreach ($result in $sortedResults) {
            $action = $result.Item
            $this._filteredActions.Add($action)
            $displayText = if ($action.Category) { 
                "[$($action.Category)] $($action.Name) - $($action.Description)"
            } else { 
                "$($action.Name) - $($action.Description)"
            }
            $this._listBox.AddItem($displayText)
        }
    }

    # Select the first item by default
    if ($this._listBox.Items.Count > 0) {
        $this._listBox.SelectedIndex = 0
    }
}
```

### Why This is a "Shining" Improvement

1.  **Superior User Experience:** The search "just works" the way users expect. It's forgiving of typos and rewards partial matches, making navigation much faster.
2.  **Leverages the Right Tool for the Job:** String manipulation and iterative algorithms are slow in PowerShell. By offloading the `GetFuzzyMatchScore` calculation to compiled C#, the search remains instantaneous even with hundreds or thousands of available actions. This respects your "no external DLLs" constraint while still getting the performance benefits.
3.  **Better Ranking:** The previous method was a binary "match/no-match". This new method provides a score, allowing us to present the *best* matches first, which is critical for usability.
4.  **Clean Architecture:** The C# code is self-contained and exposes a simple, static method. The PowerShell `CommandPalette` class doesn't need to know *how* the scoring works, only that it can call `[FuzzySearcher]::GetFuzzyMatchScore()` to get a number. This is excellent separation of concerns.

By implementing these two changes, you've made the framework's drawing more maintainable and its most prominent interactive element, the `CommandPalette`, significantly smarter and more professional.





Windows and Pads: ncurses has a concept of "windows" (like your Panels) and "pads" (scrollable content larger than the screen).
What to Crib: The explicit separation of a Pad's content from what's visible. A Pad is a buffer of arbitrary size (e.g., 1000 lines tall). You have a prefresh() function that takes the Pad buffer, a source (row, col) in the pad, and a destination (row, col) on the screen to draw to.
How to Apply to Axiom-Phoenix: Refine your ScrollablePanel to think this way. It should own a _virtual_buffer (the "pad") that is completely independent of the panel's on-screen Width and Height. The OnRender logic would then become a direct implementation of prefresh(): "copy the rectangle from _virtual_buffer starting at ScrollOffsetY to my own _private_buffer at (0,0)." This is a powerful mental model for virtualization.




2. From gui.cs / Terminal.Gui (The "True" Application Framework)
This is the most direct inspiration for what you are building—a complete, event-driven, component-based TUI application framework in .NET.
What to Crib: Sophisticated Architecture and Layout
The Application and Toplevel Classes: gui.cs has a static Application class that runs the main loop (Application.Run()) and manages the "toplevel" views (like your Screens).
How to Apply to Axiom-Phoenix: Solidify this pattern. Your Start-TuiEngine is Application.Run(). Your Screen class is a Toplevel view. This confirms your architecture is on the right track. You could even create a static [Application] class in PowerShell or C# to manage global state instead of using $global:TuiState, which would be a cleaner architectural choice.
The Layout System (Dim and Pos): This is their crown jewel. Instead of setting X = 5, you can set X = Pos.Center(), X = Pos.Right(myOtherView) - 1, or X = Pos.Percent(50). You can set Width = Dim.Fill(), Width = Dim.Percent(25).
How to Crib this (High Difficulty, High Reward):
Create [Pos] and [Dim] classes in PowerShell.
These classes don't hold a value; they hold a rule. For example, [Pos]::Center() creates an object with a Rule = 'Center' property.
The parent Panel's layout logic (ApplyLayout) becomes much more complex. Before arranging children, it must perform a "layout pass."
For each child, it looks at its X, Y, Width, and Height. If the value is an integer, it's used directly. If it's a [Pos] or [Dim] object, the panel calculates the final integer value based on its own dimensions and the state of other views.
This makes responsive design possible. A panel set to Width = Dim.Percent(50) will automatically resize when the terminal resizes.
DX Impact: This is a massive leap forward, allowing for fluid, responsive UIs that are almost impossible to create with fixed coordinates.
The Responder/Focus Chain: gui.cs has a very clear concept of how input is handled. The focused view gets the key first. If it doesn't handle it, its parent view gets a chance, and so on, up to the Toplevel.
How to Apply to Axiom-Phoenix: Your Process-TuiInput function already does something similar, but you could formalize it. When a key is pressed, you could have the FocusManager call FocusedComponent.HandleInput(). If it returns $false, call FocusedComponent.Parent.HandleInput(), and so on, up the tree. This is a cleaner, more object-oriented way to handle input bubbling.




3. From Spectre.Console (The "Beautiful" API)
Spectre is less of an application framework and more of a library for creating beautiful, rich console output. Its strength is its fluent, easy-to-use API.
What to Crib: API Design and Rich Content
Fluent Configuration: Look at how Spectre builds a Table:
Generated csharp
// Spectre's C# API
var table = new Table();
table.AddColumn("Name");
table.AddColumn("Age");
table.AddRow("Rob", "35").LeftJustified();
Use code with caution.
C#
How to Crib this: Design your component creation functions to be "fluent." This means methods on your objects return $this, allowing you to chain calls.
DX Impact: This makes code more readable and concise.
Generated powershell
# Your new fluent API
$panel = ([Panel]::new("MyPanel"))
    .SetPosition(5, 5)
    .SetSize(40, 10)
    .SetTitle("System Status")
    .SetBorderStyle("Double")

$panel.AddChild(
    ([Label]::new("StatusLabel"))
        .SetText("All systems nominal.")
        .SetColor("Green")
)
Use code with caution.
Powershell
Markup: Spectre's most famous feature is its console markup. You can write AnsiConsole.Markup("[bold yellow]Hello[/] [blue]World![/]");
How to Crib this (Medium Difficulty):
Create a Write-TuiMarkup function.
This function would take a string with your custom markup (e.g., [fg:yellow b]Warning![/b][/fg]).
It would parse this string using a regular expression to find the tags.
As it parses, it would make a series of calls to Buffer.WriteString, changing the style for each segment.
You could then create a MarkupLabel component that uses this function in its OnRender method.
DX Impact: Hugely simplifies writing richly formatted text. It's much easier for developers to write markup than to build complex style objects in code.
Live Displays and Spinners: Spectre has a Status context that shows an animated spinner while a long-running task is in progress.
How to Crib this:
Create an AnimationService as discussed before. This service would be responsible for updating the spinner character on every frame.
Create a Show-TuiStatus function. This function displays an overlay panel with a label for the spinner and a label for the status text. It then executes a scriptblock provided by the user.
The function starts an animation for the spinner. When the user's scriptblock finishes, the function stops the animation and hides the overlay.
DX Impact: Provides an elegant, non-blocking way to give feedback for long operations, making the application feel much more professional and alive.