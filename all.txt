Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor DarkGray
    
    # Initialize core services that have no dependencies
    Write-Host "`nInitializing services..." -ForegroundColor Yellow
    Initialize-Logger -Level $(if ($Debug) { "Debug" } else { "Info" })
    Initialize-EventSystem
    Initialize-ThemeManager
    
    # Create the service container
    $services = @{}
    
    # Initialize services that depend on others, passing the container
    $services.KeybindingService = New-KeybindingService
    $services.DataManager = Initialize-DataManager
    
    # Create sample tasks for testing
    Write-Host "Creating sample tasks..." -ForegroundColor Yellow
    try {
        $sampleTasks = @(
            @{Title = "Review project documentation"; Description = "Review and update project documentation"; Priority = "High"; Project = "ProjectA"},
            @{Title = "Fix critical bug in login system"; Description = "Address authentication issues"; Priority = "Medium"; Project = "ProjectB"},
            @{Title = "Implement new feature"; Description = "Add user profile management"; Priority = "Medium"; Project = "ProjectA"},
            @{Title = "Update dependencies"; Description = "Update all NPM packages"; Priority = "Low"; Project = "ProjectC"},
            @{Title = "Write unit tests"; Description = "Increase test coverage"; Priority = "Medium"; Project = "ProjectB"}
        )
        
        foreach ($taskData in $sampleTasks) {
            # Create PmcTask objects properly
            $task = [PmcTask]::new()
            $task.Title = $taskData.Title
            $task.Description = $taskData.Description
            $task.Priority = $taskData.Priority
            $task.Project = $taskData.Project
            $task.Status = "Pending"
            $task.CreatedDate = [datetime]::Now
            $task.DueDate = [datetime]::Now.AddDays(7)
            
            # Add to DataManager
            $services.DataManager.Tasks.Add($task)
        }
        Write-Host "Sample tasks created successfully!" -ForegroundColor Green
    } catch {
        Write-Host "Warning: Could not create sample tasks: $_" -ForegroundColor Yellow
    }
    
    # NavigationService needs the $services container to pass to screens
    $services.Navigation = Initialize-NavigationService -Services $services
    
    # DON'T register screen classes here - they don't exist yet in the file
    # We'll create them on demand instead
    
    # Initialize the dialog system
    Initialize-DialogSystem
    
    Write-Host "All services initialized!" -ForegroundColor Green
    
    if (-not $SkipLogo) {
        Write-Host @"
    
    ╔═══════════════════════════════════════╗
    ║      PMC Terminal v5.0                ║
    ║      PowerShell Management Console    ║
    ╚═══════════════════════════════════════╝
    
"@ -ForegroundColor Cyan
    }
    
    # Initialize the TUI Engine which orchestrates the UI
    Write-Host "Starting TUI Engine..." -ForegroundColor Yellow
    Initialize-TuiEngine
    Write-Host "TUI Engine initialized successfully" -ForegroundColor Green
    
    # Instead of using [DashboardScreen] type, create a minimal screen to test
    Write-Host "Creating test screen..." -ForegroundColor Yellow
    
    # Create a minimal test screen
    $testScreen = [UIElement]::new(0, 0, 120, 30)
    $testScreen.Name = "TestScreen"
    $testScreen.IsFocusable = $true
    $testScreen.Enabled = $true
    $testScreen.Visible = $true
    
    # Add a simple render method
    $testScreen | Add-Member -MemberType ScriptMethod -Name "OnRender" -Value {
        param($buffer)
        # Draw a simple message
        Write-TuiText -Buffer $buffer -X 10 -Y 5 -Text "PMC Terminal v5 - Test Screen" -ForegroundColor "Cyan"
        Write-TuiText -Buffer $buffer -X 10 -Y 7 -Text "The screen classes are not loaded in the monolithic file." -ForegroundColor "Yellow"
        Write-TuiText -Buffer $buffer -X 10 -Y 8 -Text "Press 'Q' to quit." -ForegroundColor "White"
    }
    
    # Add input handling
    $testScreen | Add-Member -MemberType ScriptMethod -Name "HandleInput" -Value {
        param($keyInfo)
        if ($keyInfo.Character -eq 'q' -or $keyInfo.Character -eq 'Q') {
            Stop-TuiLoop
            return $true
        }
        return $false
    }
    
    Write-Host "Test screen created successfully" -ForegroundColor Green
    
    # Push the screen to the engine and start the main loop
    Write-Host "Pushing screen to TUI engine..." -ForegroundColor Yellow
    Push-Screen -Screen $testScreen
    Write-Host "Screen pushed, starting main loop..." -ForegroundColor Yellow
    
    # Force an initial refresh to ensure rendering
    $global:TuiState.IsDirty = $true
    
    Start-TuiLoop

    class DashboardScreen : UIElement {
        # --- Core Architecture ---
        [hashtable] $Services
        [Panel] $MainPanel
        [Panel] $SummaryPanel
        [Panel] $MenuPanel
        [Panel] $StatusPanel
        [NavigationMenu] $MainMenu
        [System.Collections.Generic.List[UIElement]] $Components

        # --- State Management ---
        [object[]] $Tasks = @()
        [int] $TotalTasks = 0
        [int] $CompletedTasks = 0
        [int] $PendingTasks = 0

        # --- Constructor ---
        DashboardScreen([hashtable]$services) : base(0, 0, 120, 30) {
            $this.Name = "DashboardScreen"
            $this.Services = $services
            $this.Components = [System.Collections.Generic.List[UIElement]]::new()
            $this.IsFocusable = $true
            $this.Enabled = $true
            $this.Visible = $true
            $this.Tasks = @()
            
            Write-Log -Level Info -Message "Creating DashboardScreen with NCurses architecture"
        }

        # --- Initialization ---
        [void] Initialize() {
            Invoke-WithErrorHandling -Component "DashboardScreen" -Context "Initialize" -ScriptBlock {
                # Create main panel structure
                $this.MainPanel = [Panel]::new(0, 0, $this.Width, $this.Height, "PMC Terminal v5 - Dashboard")
                $this.MainPanel.HasBorder = $true
                $this.MainPanel.BorderStyle = "Double"
                $this.MainPanel.BorderColor = [ConsoleColor]::Cyan
                $this.MainPanel.BackgroundColor = [ConsoleColor]::Black
                $this.MainPanel.TitleColor = [ConsoleColor]::White
                $this.MainPanel.Name = "MainDashboardPanel"
                $this.AddChild($this.MainPanel)
                
                # Summary panel (left side)
                $this.SummaryPanel = [Panel]::new(2, 2, 45, 12, "Task Summary")
                $this.SummaryPanel.HasBorder = $true
                $this.SummaryPanel.BorderStyle = "Single"
                $this.SummaryPanel.BorderColor = [ConsoleColor]::Green
                $this.SummaryPanel.BackgroundColor = [ConsoleColor]::Black
                $this.SummaryPanel.Name = "SummaryPanel"
                $this.MainPanel.AddChild($this.SummaryPanel)
                
                # Menu panel (right side)
                $this.MenuPanel = [Panel]::new(49, 2, 50, 15, "Main Menu")
                $this.MenuPanel.HasBorder = $true
                $this.MenuPanel.BorderStyle = "Single"
                $this.MenuPanel.BorderColor = [ConsoleColor]::Yellow
                $this.MenuPanel.BackgroundColor = [ConsoleColor]::Black
                $this.MenuPanel.Name = "MenuPanel"
                $this.MainPanel.AddChild($this.MenuPanel)
                
                # Status panel (bottom)
                $this.StatusPanel = [Panel]::new(2, 19, 116, 8, "System Status")
                $this.StatusPanel.HasBorder = $true
                $this.StatusPanel.BorderStyle = "Single"
                $this.StatusPanel.BorderColor = [ConsoleColor]::Magenta
                $this.StatusPanel.BackgroundColor = [ConsoleColor]::Black
                $this.StatusPanel.Name = "StatusPanel"
                $this.MainPanel.AddChild($this.StatusPanel)
                
                # Create navigation menu
                $this.MainMenu = [NavigationMenu]::new("MainMenu")
                $this.MainMenu.Move(1, 1)  # Inside menu panel
                $this.MainMenu.Resize(48, 13)
                $this.BuildMainMenu()
                $this.MenuPanel.AddChild($this.MainMenu)
                
                # Load initial data and update display
                $this.RefreshData()
                $this.UpdateDisplay()
                
                Write-Log -Level Info -Message "DashboardScreen initialized with NCurses architecture"
            }
        }

        # --- Menu Building ---
        hidden [void] BuildMainMenu() {
            try {
                # Capture services for closure
                $local:services = $this.Services

                $this.MainMenu.AddItem([NavigationItem]::new("1", "Task Management", {
                    $services.Navigation.GoTo("/tasks", @{})
                }))
                $this.MainMenu.AddItem([NavigationItem]::new("2", "Project Management", {
                    $services.Navigation.GoTo("/projects", @{})
                }))
                $this.MainMenu.AddItem([NavigationItem]::new("3", "Settings", {
                    $services.Navigation.GoTo("/settings", @{})
                }))
                $this.MainMenu.AddSeparator()
                $this.MainMenu.AddItem([NavigationItem]::new("Q", "Quit Application", {
                    Stop-TuiLoop
                }))
                
                Write-Log -Level Debug -Message "Main menu built with $($this.MainMenu.Items.Count) items"
            } catch {
                Write-Log -Level Error -Message "Failed to build main menu: $_"
            }
        }

        # --- Data Management ---
        hidden [void] RefreshData() {
            Invoke-WithErrorHandling -Component "DashboardScreen" -Context "RefreshData" -ScriptBlock {
                $this.Tasks = @()
                $this.TotalTasks = 0
                $this.CompletedTasks = 0
                $this.PendingTasks = 0
                
                if ($null -eq $this.Services.DataManager) {
                    Write-Log -Level Warning -Message "DataManager service not available"
                    return
                }
                
                try {
                    $this.Tasks = @($this.Services.DataManager.GetTasks())
                    $this.TotalTasks = $this.Tasks.Count
                    
                    if ($this.TotalTasks -gt 0) {
                        try {
                            $completedTasks = @($this.Tasks | Where-Object { 
                                $null -ne $_ -and $_.Status -eq [TaskStatus]::Completed 
                            })
                            $this.CompletedTasks = $completedTasks.Count
                            $this.PendingTasks = $this.TotalTasks - $this.CompletedTasks
                        } catch {
                            Write-Log -Level Warning -Message "TaskStatus enum not available, using string comparison"
                            $completedTasks = @($this.Tasks | Where-Object { 
                                $null -ne $_ -and ($_.Status -eq "Completed" -or $_.Status -eq 2)
                            })
                            $this.CompletedTasks = $completedTasks.Count
                            $this.PendingTasks = $this.TotalTasks - $this.CompletedTasks
                        }
                    }
                    
                    Write-Log -Level Debug -Message "Dashboard data refreshed - $($this.TotalTasks) tasks loaded"
                } catch {
                    Write-Log -Level Warning -Message "Failed to load tasks: $_"
                    $this.Tasks = @()
                }
            }
        }

        hidden [void] UpdateDisplay() {
            Invoke-WithErrorHandling -Component "DashboardScreen" -Context "UpdateDisplay" -ScriptBlock {
                $this.UpdateSummaryPanel()
                $this.UpdateStatusPanel()
                $this.RequestRedraw()
            }
        }

        hidden [void] UpdateSummaryPanel() {
            if ($null -eq $this.SummaryPanel) { return }
            
            $this.ClearPanelContent($this.SummaryPanel)
            
            $summaryLines = @(
                "Task Overview",
                "═══════════════",
                "",
                "Total Tasks:    $($this.TotalTasks)",
                "Completed:      $($this.CompletedTasks)",
                "Pending:        $($this.PendingTasks)",
                "",
                "Progress: $($this.GetProgressBar())",
                "",
                "Use number keys or",
                "arrow keys + Enter"
            )
            
            for ($i = 0; $i -lt $summaryLines.Count; $i++) {
                $color = if ($i -eq 0) { [ConsoleColor]::White } elseif ($i -eq 1) { [ConsoleColor]::Gray } else { [ConsoleColor]::Cyan }
                $this.WriteTextToPanel($this.SummaryPanel, $summaryLines[$i], 1, $i, $color)
            }
        }

        hidden [void] UpdateStatusPanel() {
            if ($null -eq $this.StatusPanel) { return }
            
            $this.ClearPanelContent($this.StatusPanel)
            
            $statusLines = @(
                "System Information",
                "════════════════════",
                "",
                "PowerShell Version: $($global:PSVersionTable.PSVersion)",
                "Platform:           $($global:PSVersionTable.Platform)",
                "Memory Usage:       $($this.GetMemoryUsage())",
                "Current Time:       $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
            )
            
            for ($i = 0; $i -lt $statusLines.Count; $i++) {
                $color = if ($i -eq 0) { [ConsoleColor]::White } elseif ($i -eq 1) { [ConsoleColor]::Gray } else { [ConsoleColor]::Green }
                $this.WriteTextToPanel($this.StatusPanel, $statusLines[$i], 1, $i, $color)
            }
        }

        # --- Helper Methods ---
        hidden [string] GetProgressBar() {
            if ($this.TotalTasks -eq 0) { return "No tasks" }
            
            $percentage = [Math]::Round(($this.CompletedTasks / $this.TotalTasks) * 100)
            $barLength = 20
            $filledLength = [Math]::Round(($percentage / 100) * $barLength)
            $bar = "█" * $filledLength + "░" * ($barLength - $filledLength)
            return "$bar $percentage%"
        }

        hidden [string] GetMemoryUsage() {
            try {
                $process = Get-Process -Id $global:PID
                $memoryMB = [Math]::Round($process.WorkingSet64 / 1MB, 2)
                return "$memoryMB MB"
            } catch {
                return "Unknown"
            }
        }

        hidden [void] ClearPanelContent([Panel]$panel) {
            if ($null -eq $panel -or $null -eq $panel._private_buffer) { return }
            
            $clearCell = [TuiCell]::new(' ', [ConsoleColor]::White, $panel.BackgroundColor)
            for ($y = $panel.ContentY; $y -lt ($panel.ContentY + $panel.ContentHeight); $y++) {
                for ($x = $panel.ContentX; $x -lt ($panel.ContentX + $panel.ContentWidth); $x++) {
                    $panel._private_buffer.SetCell($x, $y, $clearCell)
                }
            }
        }

        hidden [void] WriteTextToPanel([Panel]$panel, [string]$text, [int]$x, [int]$y, [ConsoleColor]$color) {
            if ($null -eq $panel -or $null -eq $panel._private_buffer) { return }
            if ($y -ge $panel.ContentHeight) { return }
            
            $chars = $text.ToCharArray()
            for ($i = 0; $i -lt $chars.Length -and ($x + $i) -lt $panel.ContentWidth; $i++) {
                $cell = [TuiCell]::new($chars[$i], $color, $panel.BackgroundColor)
                $panel._private_buffer.SetCell($panel.ContentX + $x + $i, $panel.ContentY + $y, $cell)
            }
        }

        # --- Input Handling ---
        [bool] HandleInput([System.ConsoleKeyInfo]$keyInfo) {
            Invoke-WithErrorHandling -Component "DashboardScreen" -Context "HandleInput" -ScriptBlock {
                # Handle hotkeys first
                $keyChar = $keyInfo.KeyChar.ToString().ToUpper()
                                if ($keyChar -match '^[123Q]') {
                    Write-Log -Level Debug -Message "Processing hotkey: $keyChar"
                    try {
                        $this.MainMenu.ExecuteAction($keyChar)
                        return $true
                    } catch {
                        Write-Log -Level Error -Message "Failed to execute menu action: $_"
                    }
                }
                
                # Handle navigation keys
                switch ($keyInfo.Key) {
                    ([ConsoleKey]::UpArrow) {
                        if ($this.MainMenu.SelectedIndex -gt 0) {
                            $this.MainMenu.SelectedIndex--
                            $this.RequestRedraw()
                            return $true
                        }
                    }
                    ([ConsoleKey]::DownArrow) {
                        if ($this.MainMenu.SelectedIndex -lt ($this.MainMenu.Items.Count - 1)) {
                            $this.MainMenu.SelectedIndex++
                            $this.RequestRedraw()
                            return $true
                        }
                    }
                    ([ConsoleKey]::Enter) {
                        try {
                            $selectedItem = $this.MainMenu.Items[$this.MainMenu.SelectedIndex]
                            if ($selectedItem -and $selectedItem.Enabled) {
                                Write-Log -Level Debug -Message "Executing selected menu item: $($selectedItem.Key)"
                                $selectedItem.Execute()
                                return $true
                            }
                        } catch {
                            Write-Log -Level Error -Message "Failed to execute selected menu item: $_"
                        }
                    }
                    ([ConsoleKey]::Escape) {
                        Write-Log -Level Debug -Message "Escape pressed - requesting exit"
                        Stop-TuiLoop
                        return $true
                    }
                    ([ConsoleKey]::F5) {
                        # Refresh data on F5
                        $this.RefreshData()
                        $this.UpdateDisplay()
                        return $true
                    }
                }
            }
            return $false
        }

        # --- NCurses Rendering ---
        [void] OnRender() {
            # Buffer-based rendering
            if ($null -eq $this._private_buffer) { return }
            
            # Clear buffer
            $bgCell = [TuiCell]::new(' ', [ConsoleColor]::White, [ConsoleColor]::Black)
            $this._private_buffer.Clear($bgCell)
        }

        # --- Lifecycle Methods ---
        [void] OnEnter() {
            $this.RefreshData()
            $this.UpdateDisplay()
            Write-Log -Level Debug -Message "DashboardScreen entered"
        }

        [void] OnExit() {
            Write-Log -Level Debug -Message "DashboardScreen exited"
        }